/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jpeg-js";
exports.ids = ["vendor-chunks/jpeg-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/jpeg-js/index.js":
/*!***************************************!*\
  !*** ./node_modules/jpeg-js/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var encode = __webpack_require__(/*! ./lib/encoder */ \"(ssr)/./node_modules/jpeg-js/lib/encoder.js\"), decode = __webpack_require__(/*! ./lib/decoder */ \"(ssr)/./node_modules/jpeg-js/lib/decoder.js\");\nmodule.exports = {\n    encode: encode,\n    decode: decode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanBlZy1qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQyxxRUFDakJDLFNBQVNELG1CQUFPQSxDQUFDO0FBRXJCRSxPQUFPQyxPQUFPLEdBQUc7SUFDZkosUUFBUUE7SUFDUkUsUUFBUUE7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL21pY3JvcG9zLy4vbm9kZV9tb2R1bGVzL2pwZWctanMvaW5kZXguanM/MTE3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZW5jb2RlID0gcmVxdWlyZSgnLi9saWIvZW5jb2RlcicpLFxuICAgIGRlY29kZSA9IHJlcXVpcmUoJy4vbGliL2RlY29kZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuY29kZTogZW5jb2RlLFxuICBkZWNvZGU6IGRlY29kZVxufTtcbiJdLCJuYW1lcyI6WyJlbmNvZGUiLCJyZXF1aXJlIiwiZGVjb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jpeg-js/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jpeg-js/lib/decoder.js":
/*!*********************************************!*\
  !*** ./node_modules/jpeg-js/lib/decoder.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */ /*\n   Copyright 2011 notmasteryet\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/ // - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\nvar JpegImage = function jpegImage() {\n    \"use strict\";\n    var dctZigZag = new Int32Array([\n        0,\n        1,\n        8,\n        16,\n        9,\n        2,\n        3,\n        10,\n        17,\n        24,\n        32,\n        25,\n        18,\n        11,\n        4,\n        5,\n        12,\n        19,\n        26,\n        33,\n        40,\n        48,\n        41,\n        34,\n        27,\n        20,\n        13,\n        6,\n        7,\n        14,\n        21,\n        28,\n        35,\n        42,\n        49,\n        56,\n        57,\n        50,\n        43,\n        36,\n        29,\n        22,\n        15,\n        23,\n        30,\n        37,\n        44,\n        51,\n        58,\n        59,\n        52,\n        45,\n        38,\n        31,\n        39,\n        46,\n        53,\n        60,\n        61,\n        54,\n        47,\n        55,\n        62,\n        63\n    ]);\n    var dctCos1 = 4017 // cos(pi/16)\n    ;\n    var dctSin1 = 799 // sin(pi/16)\n    ;\n    var dctCos3 = 3406 // cos(3*pi/16)\n    ;\n    var dctSin3 = 2276 // sin(3*pi/16)\n    ;\n    var dctCos6 = 1567 // cos(6*pi/16)\n    ;\n    var dctSin6 = 3784 // sin(6*pi/16)\n    ;\n    var dctSqrt2 = 5793 // sqrt(2)\n    ;\n    var dctSqrt1d2 = 2896 // sqrt(2) / 2\n    ;\n    function constructor() {}\n    function buildHuffmanTable(codeLengths, values) {\n        var k = 0, code = [], i, j, length = 16;\n        while(length > 0 && !codeLengths[length - 1])length--;\n        code.push({\n            children: [],\n            index: 0\n        });\n        var p = code[0], q;\n        for(i = 0; i < length; i++){\n            for(j = 0; j < codeLengths[i]; j++){\n                p = code.pop();\n                p.children[p.index] = values[k];\n                while(p.index > 0){\n                    if (code.length === 0) throw new Error(\"Could not recreate Huffman Table\");\n                    p = code.pop();\n                }\n                p.index++;\n                code.push(p);\n                while(code.length <= i){\n                    code.push(q = {\n                        children: [],\n                        index: 0\n                    });\n                    p.children[p.index] = q.children;\n                    p = q;\n                }\n                k++;\n            }\n            if (i + 1 < length) {\n                // p here points to last code\n                code.push(q = {\n                    children: [],\n                    index: 0\n                });\n                p.children[p.index] = q.children;\n                p = q;\n            }\n        }\n        return code[0].children;\n    }\n    function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, opts) {\n        var precision = frame.precision;\n        var samplesPerLine = frame.samplesPerLine;\n        var scanLines = frame.scanLines;\n        var mcusPerLine = frame.mcusPerLine;\n        var progressive = frame.progressive;\n        var maxH = frame.maxH, maxV = frame.maxV;\n        var startOffset = offset, bitsData = 0, bitsCount = 0;\n        function readBit() {\n            if (bitsCount > 0) {\n                bitsCount--;\n                return bitsData >> bitsCount & 1;\n            }\n            bitsData = data[offset++];\n            if (bitsData == 0xFF) {\n                var nextByte = data[offset++];\n                if (nextByte) {\n                    throw new Error(\"unexpected marker: \" + (bitsData << 8 | nextByte).toString(16));\n                }\n            // unstuff 0\n            }\n            bitsCount = 7;\n            return bitsData >>> 7;\n        }\n        function decodeHuffman(tree) {\n            var node = tree, bit;\n            while((bit = readBit()) !== null){\n                node = node[bit];\n                if (typeof node === \"number\") return node;\n                if (typeof node !== \"object\") throw new Error(\"invalid huffman sequence\");\n            }\n            return null;\n        }\n        function receive(length) {\n            var n = 0;\n            while(length > 0){\n                var bit = readBit();\n                if (bit === null) return;\n                n = n << 1 | bit;\n                length--;\n            }\n            return n;\n        }\n        function receiveAndExtend(length) {\n            var n = receive(length);\n            if (n >= 1 << length - 1) return n;\n            return n + (-1 << length) + 1;\n        }\n        function decodeBaseline(component, zz) {\n            var t = decodeHuffman(component.huffmanTableDC);\n            var diff = t === 0 ? 0 : receiveAndExtend(t);\n            zz[0] = component.pred += diff;\n            var k = 1;\n            while(k < 64){\n                var rs = decodeHuffman(component.huffmanTableAC);\n                var s = rs & 15, r = rs >> 4;\n                if (s === 0) {\n                    if (r < 15) break;\n                    k += 16;\n                    continue;\n                }\n                k += r;\n                var z = dctZigZag[k];\n                zz[z] = receiveAndExtend(s);\n                k++;\n            }\n        }\n        function decodeDCFirst(component, zz) {\n            var t = decodeHuffman(component.huffmanTableDC);\n            var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n            zz[0] = component.pred += diff;\n        }\n        function decodeDCSuccessive(component, zz) {\n            zz[0] |= readBit() << successive;\n        }\n        var eobrun = 0;\n        function decodeACFirst(component, zz) {\n            if (eobrun > 0) {\n                eobrun--;\n                return;\n            }\n            var k = spectralStart, e = spectralEnd;\n            while(k <= e){\n                var rs = decodeHuffman(component.huffmanTableAC);\n                var s = rs & 15, r = rs >> 4;\n                if (s === 0) {\n                    if (r < 15) {\n                        eobrun = receive(r) + (1 << r) - 1;\n                        break;\n                    }\n                    k += 16;\n                    continue;\n                }\n                k += r;\n                var z = dctZigZag[k];\n                zz[z] = receiveAndExtend(s) * (1 << successive);\n                k++;\n            }\n        }\n        var successiveACState = 0, successiveACNextValue;\n        function decodeACSuccessive(component, zz) {\n            var k = spectralStart, e = spectralEnd, r = 0;\n            while(k <= e){\n                var z = dctZigZag[k];\n                var direction = zz[z] < 0 ? -1 : 1;\n                switch(successiveACState){\n                    case 0:\n                        var rs = decodeHuffman(component.huffmanTableAC);\n                        var s = rs & 15, r = rs >> 4;\n                        if (s === 0) {\n                            if (r < 15) {\n                                eobrun = receive(r) + (1 << r);\n                                successiveACState = 4;\n                            } else {\n                                r = 16;\n                                successiveACState = 1;\n                            }\n                        } else {\n                            if (s !== 1) throw new Error(\"invalid ACn encoding\");\n                            successiveACNextValue = receiveAndExtend(s);\n                            successiveACState = r ? 2 : 3;\n                        }\n                        continue;\n                    case 1:\n                    case 2:\n                        if (zz[z]) zz[z] += (readBit() << successive) * direction;\n                        else {\n                            r--;\n                            if (r === 0) successiveACState = successiveACState == 2 ? 3 : 0;\n                        }\n                        break;\n                    case 3:\n                        if (zz[z]) zz[z] += (readBit() << successive) * direction;\n                        else {\n                            zz[z] = successiveACNextValue << successive;\n                            successiveACState = 0;\n                        }\n                        break;\n                    case 4:\n                        if (zz[z]) zz[z] += (readBit() << successive) * direction;\n                        break;\n                }\n                k++;\n            }\n            if (successiveACState === 4) {\n                eobrun--;\n                if (eobrun === 0) successiveACState = 0;\n            }\n        }\n        function decodeMcu(component, decode, mcu, row, col) {\n            var mcuRow = mcu / mcusPerLine | 0;\n            var mcuCol = mcu % mcusPerLine;\n            var blockRow = mcuRow * component.v + row;\n            var blockCol = mcuCol * component.h + col;\n            // If the block is missing and we're in tolerant mode, just skip it.\n            if (component.blocks[blockRow] === undefined && opts.tolerantDecoding) return;\n            decode(component, component.blocks[blockRow][blockCol]);\n        }\n        function decodeBlock(component, decode, mcu) {\n            var blockRow = mcu / component.blocksPerLine | 0;\n            var blockCol = mcu % component.blocksPerLine;\n            // If the block is missing and we're in tolerant mode, just skip it.\n            if (component.blocks[blockRow] === undefined && opts.tolerantDecoding) return;\n            decode(component, component.blocks[blockRow][blockCol]);\n        }\n        var componentsLength = components.length;\n        var component, i, j, k, n;\n        var decodeFn;\n        if (progressive) {\n            if (spectralStart === 0) decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n            else decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n        } else {\n            decodeFn = decodeBaseline;\n        }\n        var mcu = 0, marker;\n        var mcuExpected;\n        if (componentsLength == 1) {\n            mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n        } else {\n            mcuExpected = mcusPerLine * frame.mcusPerColumn;\n        }\n        if (!resetInterval) resetInterval = mcuExpected;\n        var h, v;\n        while(mcu < mcuExpected){\n            // reset interval stuff\n            for(i = 0; i < componentsLength; i++)components[i].pred = 0;\n            eobrun = 0;\n            if (componentsLength == 1) {\n                component = components[0];\n                for(n = 0; n < resetInterval; n++){\n                    decodeBlock(component, decodeFn, mcu);\n                    mcu++;\n                }\n            } else {\n                for(n = 0; n < resetInterval; n++){\n                    for(i = 0; i < componentsLength; i++){\n                        component = components[i];\n                        h = component.h;\n                        v = component.v;\n                        for(j = 0; j < v; j++){\n                            for(k = 0; k < h; k++){\n                                decodeMcu(component, decodeFn, mcu, j, k);\n                            }\n                        }\n                    }\n                    mcu++;\n                    // If we've reached our expected MCU's, stop decoding\n                    if (mcu === mcuExpected) break;\n                }\n            }\n            if (mcu === mcuExpected) {\n                // Skip trailing bytes at the end of the scan - until we reach the next marker\n                do {\n                    if (data[offset] === 0xFF) {\n                        if (data[offset + 1] !== 0x00) {\n                            break;\n                        }\n                    }\n                    offset += 1;\n                }while (offset < data.length - 2);\n            }\n            // find marker\n            bitsCount = 0;\n            marker = data[offset] << 8 | data[offset + 1];\n            if (marker < 0xFF00) {\n                throw new Error(\"marker was not found\");\n            }\n            if (marker >= 0xFFD0 && marker <= 0xFFD7) {\n                offset += 2;\n            } else break;\n        }\n        return offset - startOffset;\n    }\n    function buildComponentData(frame, component) {\n        var lines = [];\n        var blocksPerLine = component.blocksPerLine;\n        var blocksPerColumn = component.blocksPerColumn;\n        var samplesPerLine = blocksPerLine << 3;\n        // Only 1 used per invocation of this function and garbage collected after invocation, so no need to account for its memory footprint.\n        var R = new Int32Array(64), r = new Uint8Array(64);\n        // A port of poppler's IDCT method which in turn is taken from:\n        //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n        //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n        //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n        //   988-991.\n        function quantizeAndInverse(zz, dataOut, dataIn) {\n            var qt = component.quantizationTable;\n            var v0, v1, v2, v3, v4, v5, v6, v7, t;\n            var p = dataIn;\n            var i;\n            // dequant\n            for(i = 0; i < 64; i++)p[i] = zz[i] * qt[i];\n            // inverse DCT on rows\n            for(i = 0; i < 8; ++i){\n                var row = 8 * i;\n                // check for all-zero AC coefficients\n                if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 && p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 && p[7 + row] == 0) {\n                    t = dctSqrt2 * p[0 + row] + 512 >> 10;\n                    p[0 + row] = t;\n                    p[1 + row] = t;\n                    p[2 + row] = t;\n                    p[3 + row] = t;\n                    p[4 + row] = t;\n                    p[5 + row] = t;\n                    p[6 + row] = t;\n                    p[7 + row] = t;\n                    continue;\n                }\n                // stage 4\n                v0 = dctSqrt2 * p[0 + row] + 128 >> 8;\n                v1 = dctSqrt2 * p[4 + row] + 128 >> 8;\n                v2 = p[2 + row];\n                v3 = p[6 + row];\n                v4 = dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128 >> 8;\n                v7 = dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128 >> 8;\n                v5 = p[3 + row] << 4;\n                v6 = p[5 + row] << 4;\n                // stage 3\n                t = v0 - v1 + 1 >> 1;\n                v0 = v0 + v1 + 1 >> 1;\n                v1 = t;\n                t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\n                v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\n                v3 = t;\n                t = v4 - v6 + 1 >> 1;\n                v4 = v4 + v6 + 1 >> 1;\n                v6 = t;\n                t = v7 + v5 + 1 >> 1;\n                v5 = v7 - v5 + 1 >> 1;\n                v7 = t;\n                // stage 2\n                t = v0 - v3 + 1 >> 1;\n                v0 = v0 + v3 + 1 >> 1;\n                v3 = t;\n                t = v1 - v2 + 1 >> 1;\n                v1 = v1 + v2 + 1 >> 1;\n                v2 = t;\n                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n                v7 = t;\n                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n                v6 = t;\n                // stage 1\n                p[0 + row] = v0 + v7;\n                p[7 + row] = v0 - v7;\n                p[1 + row] = v1 + v6;\n                p[6 + row] = v1 - v6;\n                p[2 + row] = v2 + v5;\n                p[5 + row] = v2 - v5;\n                p[3 + row] = v3 + v4;\n                p[4 + row] = v3 - v4;\n            }\n            // inverse DCT on columns\n            for(i = 0; i < 8; ++i){\n                var col = i;\n                // check for all-zero AC coefficients\n                if (p[1 * 8 + col] == 0 && p[2 * 8 + col] == 0 && p[3 * 8 + col] == 0 && p[4 * 8 + col] == 0 && p[5 * 8 + col] == 0 && p[6 * 8 + col] == 0 && p[7 * 8 + col] == 0) {\n                    t = dctSqrt2 * dataIn[i + 0] + 8192 >> 14;\n                    p[0 * 8 + col] = t;\n                    p[1 * 8 + col] = t;\n                    p[2 * 8 + col] = t;\n                    p[3 * 8 + col] = t;\n                    p[4 * 8 + col] = t;\n                    p[5 * 8 + col] = t;\n                    p[6 * 8 + col] = t;\n                    p[7 * 8 + col] = t;\n                    continue;\n                }\n                // stage 4\n                v0 = dctSqrt2 * p[0 * 8 + col] + 2048 >> 12;\n                v1 = dctSqrt2 * p[4 * 8 + col] + 2048 >> 12;\n                v2 = p[2 * 8 + col];\n                v3 = p[6 * 8 + col];\n                v4 = dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048 >> 12;\n                v7 = dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048 >> 12;\n                v5 = p[3 * 8 + col];\n                v6 = p[5 * 8 + col];\n                // stage 3\n                t = v0 - v1 + 1 >> 1;\n                v0 = v0 + v1 + 1 >> 1;\n                v1 = t;\n                t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\n                v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\n                v3 = t;\n                t = v4 - v6 + 1 >> 1;\n                v4 = v4 + v6 + 1 >> 1;\n                v6 = t;\n                t = v7 + v5 + 1 >> 1;\n                v5 = v7 - v5 + 1 >> 1;\n                v7 = t;\n                // stage 2\n                t = v0 - v3 + 1 >> 1;\n                v0 = v0 + v3 + 1 >> 1;\n                v3 = t;\n                t = v1 - v2 + 1 >> 1;\n                v1 = v1 + v2 + 1 >> 1;\n                v2 = t;\n                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n                v7 = t;\n                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n                v6 = t;\n                // stage 1\n                p[0 * 8 + col] = v0 + v7;\n                p[7 * 8 + col] = v0 - v7;\n                p[1 * 8 + col] = v1 + v6;\n                p[6 * 8 + col] = v1 - v6;\n                p[2 * 8 + col] = v2 + v5;\n                p[5 * 8 + col] = v2 - v5;\n                p[3 * 8 + col] = v3 + v4;\n                p[4 * 8 + col] = v3 - v4;\n            }\n            // convert to 8-bit integers\n            for(i = 0; i < 64; ++i){\n                var sample = 128 + (p[i] + 8 >> 4);\n                dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;\n            }\n        }\n        requestMemoryAllocation(samplesPerLine * blocksPerColumn * 8);\n        var i, j;\n        for(var blockRow = 0; blockRow < blocksPerColumn; blockRow++){\n            var scanLine = blockRow << 3;\n            for(i = 0; i < 8; i++)lines.push(new Uint8Array(samplesPerLine));\n            for(var blockCol = 0; blockCol < blocksPerLine; blockCol++){\n                quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);\n                var offset = 0, sample = blockCol << 3;\n                for(j = 0; j < 8; j++){\n                    var line = lines[scanLine + j];\n                    for(i = 0; i < 8; i++)line[sample + i] = r[offset++];\n                }\n            }\n        }\n        return lines;\n    }\n    function clampTo8bit(a) {\n        return a < 0 ? 0 : a > 255 ? 255 : a;\n    }\n    constructor.prototype = {\n        load: function load(path) {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", path, true);\n            xhr.responseType = \"arraybuffer\";\n            xhr.onload = (function() {\n                // TODO catch parse error\n                var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);\n                this.parse(data);\n                if (this.onload) this.onload();\n            }).bind(this);\n            xhr.send(null);\n        },\n        parse: function parse(data) {\n            var maxResolutionInPixels = this.opts.maxResolutionInMP * 1000 * 1000;\n            var offset = 0, length = data.length;\n            function readUint16() {\n                var value = data[offset] << 8 | data[offset + 1];\n                offset += 2;\n                return value;\n            }\n            function readDataBlock() {\n                var length = readUint16();\n                var array = data.subarray(offset, offset + length - 2);\n                offset += array.length;\n                return array;\n            }\n            function prepareComponents(frame) {\n                // According to the JPEG standard, the sampling factor must be between 1 and 4\n                // See https://github.com/libjpeg-turbo/libjpeg-turbo/blob/9abeff46d87bd201a952e276f3e4339556a403a3/libjpeg.txt#L1138-L1146\n                var maxH = 1, maxV = 1;\n                var component, componentId;\n                for(componentId in frame.components){\n                    if (frame.components.hasOwnProperty(componentId)) {\n                        component = frame.components[componentId];\n                        if (maxH < component.h) maxH = component.h;\n                        if (maxV < component.v) maxV = component.v;\n                    }\n                }\n                var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);\n                var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);\n                for(componentId in frame.components){\n                    if (frame.components.hasOwnProperty(componentId)) {\n                        component = frame.components[componentId];\n                        var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);\n                        var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);\n                        var blocksPerLineForMcu = mcusPerLine * component.h;\n                        var blocksPerColumnForMcu = mcusPerColumn * component.v;\n                        var blocksToAllocate = blocksPerColumnForMcu * blocksPerLineForMcu;\n                        var blocks = [];\n                        // Each block is a Int32Array of length 64 (4 x 64 = 256 bytes)\n                        requestMemoryAllocation(blocksToAllocate * 256);\n                        for(var i = 0; i < blocksPerColumnForMcu; i++){\n                            var row = [];\n                            for(var j = 0; j < blocksPerLineForMcu; j++)row.push(new Int32Array(64));\n                            blocks.push(row);\n                        }\n                        component.blocksPerLine = blocksPerLine;\n                        component.blocksPerColumn = blocksPerColumn;\n                        component.blocks = blocks;\n                    }\n                }\n                frame.maxH = maxH;\n                frame.maxV = maxV;\n                frame.mcusPerLine = mcusPerLine;\n                frame.mcusPerColumn = mcusPerColumn;\n            }\n            var jfif = null;\n            var adobe = null;\n            var pixels = null;\n            var frame, resetInterval;\n            var quantizationTables = [], frames = [];\n            var huffmanTablesAC = [], huffmanTablesDC = [];\n            var fileMarker = readUint16();\n            var malformedDataOffset = -1;\n            this.comments = [];\n            if (fileMarker != 0xFFD8) {\n                throw new Error(\"SOI not found\");\n            }\n            fileMarker = readUint16();\n            while(fileMarker != 0xFFD9){\n                var i, j, l;\n                switch(fileMarker){\n                    case 0xFF00:\n                        break;\n                    case 0xFFE0:\n                    case 0xFFE1:\n                    case 0xFFE2:\n                    case 0xFFE3:\n                    case 0xFFE4:\n                    case 0xFFE5:\n                    case 0xFFE6:\n                    case 0xFFE7:\n                    case 0xFFE8:\n                    case 0xFFE9:\n                    case 0xFFEA:\n                    case 0xFFEB:\n                    case 0xFFEC:\n                    case 0xFFED:\n                    case 0xFFEE:\n                    case 0xFFEF:\n                    case 0xFFFE:\n                        var appData = readDataBlock();\n                        if (fileMarker === 0xFFFE) {\n                            var comment = String.fromCharCode.apply(null, appData);\n                            this.comments.push(comment);\n                        }\n                        if (fileMarker === 0xFFE0) {\n                            if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {\n                                jfif = {\n                                    version: {\n                                        major: appData[5],\n                                        minor: appData[6]\n                                    },\n                                    densityUnits: appData[7],\n                                    xDensity: appData[8] << 8 | appData[9],\n                                    yDensity: appData[10] << 8 | appData[11],\n                                    thumbWidth: appData[12],\n                                    thumbHeight: appData[13],\n                                    thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                                };\n                            }\n                        }\n                        // TODO APP1 - Exif\n                        if (fileMarker === 0xFFE1) {\n                            if (appData[0] === 0x45 && appData[1] === 0x78 && appData[2] === 0x69 && appData[3] === 0x66 && appData[4] === 0) {\n                                this.exifBuffer = appData.subarray(5, appData.length);\n                            }\n                        }\n                        if (fileMarker === 0xFFEE) {\n                            if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) {\n                                adobe = {\n                                    version: appData[6],\n                                    flags0: appData[7] << 8 | appData[8],\n                                    flags1: appData[9] << 8 | appData[10],\n                                    transformCode: appData[11]\n                                };\n                            }\n                        }\n                        break;\n                    case 0xFFDB:\n                        var quantizationTablesLength = readUint16();\n                        var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n                        while(offset < quantizationTablesEnd){\n                            var quantizationTableSpec = data[offset++];\n                            requestMemoryAllocation(64 * 4);\n                            var tableData = new Int32Array(64);\n                            if (quantizationTableSpec >> 4 === 0) {\n                                for(j = 0; j < 64; j++){\n                                    var z = dctZigZag[j];\n                                    tableData[z] = data[offset++];\n                                }\n                            } else if (quantizationTableSpec >> 4 === 1) {\n                                for(j = 0; j < 64; j++){\n                                    var z = dctZigZag[j];\n                                    tableData[z] = readUint16();\n                                }\n                            } else throw new Error(\"DQT: invalid table spec\");\n                            quantizationTables[quantizationTableSpec & 15] = tableData;\n                        }\n                        break;\n                    case 0xFFC0:\n                    case 0xFFC1:\n                    case 0xFFC2:\n                        readUint16(); // skip data length\n                        frame = {};\n                        frame.extended = fileMarker === 0xFFC1;\n                        frame.progressive = fileMarker === 0xFFC2;\n                        frame.precision = data[offset++];\n                        frame.scanLines = readUint16();\n                        frame.samplesPerLine = readUint16();\n                        frame.components = {};\n                        frame.componentsOrder = [];\n                        var pixelsInFrame = frame.scanLines * frame.samplesPerLine;\n                        if (pixelsInFrame > maxResolutionInPixels) {\n                            var exceededAmount = Math.ceil((pixelsInFrame - maxResolutionInPixels) / 1e6);\n                            throw new Error(`maxResolutionInMP limit exceeded by ${exceededAmount}MP`);\n                        }\n                        var componentsCount = data[offset++], componentId;\n                        var maxH = 0, maxV = 0;\n                        for(i = 0; i < componentsCount; i++){\n                            componentId = data[offset];\n                            var h = data[offset + 1] >> 4;\n                            var v = data[offset + 1] & 15;\n                            var qId = data[offset + 2];\n                            if (h <= 0 || v <= 0) {\n                                throw new Error(\"Invalid sampling factor, expected values above 0\");\n                            }\n                            frame.componentsOrder.push(componentId);\n                            frame.components[componentId] = {\n                                h: h,\n                                v: v,\n                                quantizationIdx: qId\n                            };\n                            offset += 3;\n                        }\n                        prepareComponents(frame);\n                        frames.push(frame);\n                        break;\n                    case 0xFFC4:\n                        var huffmanLength = readUint16();\n                        for(i = 2; i < huffmanLength;){\n                            var huffmanTableSpec = data[offset++];\n                            var codeLengths = new Uint8Array(16);\n                            var codeLengthSum = 0;\n                            for(j = 0; j < 16; j++, offset++){\n                                codeLengthSum += codeLengths[j] = data[offset];\n                            }\n                            requestMemoryAllocation(16 + codeLengthSum);\n                            var huffmanValues = new Uint8Array(codeLengthSum);\n                            for(j = 0; j < codeLengthSum; j++, offset++)huffmanValues[j] = data[offset];\n                            i += 17 + codeLengthSum;\n                            (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n                        }\n                        break;\n                    case 0xFFDD:\n                        readUint16(); // skip data length\n                        resetInterval = readUint16();\n                        break;\n                    case 0xFFDC:\n                        readUint16() // skip data length\n                        ;\n                        readUint16() // Ignore this data since it represents the image height\n                        ;\n                        break;\n                    case 0xFFDA:\n                        var scanLength = readUint16();\n                        var selectorsCount = data[offset++];\n                        var components = [], component;\n                        for(i = 0; i < selectorsCount; i++){\n                            component = frame.components[data[offset++]];\n                            var tableSpec = data[offset++];\n                            component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n                            component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n                            components.push(component);\n                        }\n                        var spectralStart = data[offset++];\n                        var spectralEnd = data[offset++];\n                        var successiveApproximation = data[offset++];\n                        var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, this.opts);\n                        offset += processed;\n                        break;\n                    case 0xFFFF:\n                        if (data[offset] !== 0xFF) {\n                            offset--;\n                        }\n                        break;\n                    default:\n                        if (data[offset - 3] == 0xFF && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n                            // could be incorrect encoding -- last 0xFF byte of the previous\n                            // block was eaten by the encoder\n                            offset -= 3;\n                            break;\n                        } else if (fileMarker === 0xE0 || fileMarker == 0xE1) {\n                            // Recover from malformed APP1 markers popular in some phone models.\n                            // See https://github.com/eugeneware/jpeg-js/issues/82\n                            if (malformedDataOffset !== -1) {\n                                throw new Error(`first unknown JPEG marker at offset ${malformedDataOffset.toString(16)}, second unknown JPEG marker ${fileMarker.toString(16)} at offset ${(offset - 1).toString(16)}`);\n                            }\n                            malformedDataOffset = offset - 1;\n                            const nextOffset = readUint16();\n                            if (data[offset + nextOffset - 2] === 0xFF) {\n                                offset += nextOffset - 2;\n                                break;\n                            }\n                        }\n                        throw new Error(\"unknown JPEG marker \" + fileMarker.toString(16));\n                }\n                fileMarker = readUint16();\n            }\n            if (frames.length != 1) throw new Error(\"only single frame JPEGs supported\");\n            // set each frame's components quantization table\n            for(var i = 0; i < frames.length; i++){\n                var cp = frames[i].components;\n                for(var j in cp){\n                    cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];\n                    delete cp[j].quantizationIdx;\n                }\n            }\n            this.width = frame.samplesPerLine;\n            this.height = frame.scanLines;\n            this.jfif = jfif;\n            this.adobe = adobe;\n            this.components = [];\n            for(var i = 0; i < frame.componentsOrder.length; i++){\n                var component = frame.components[frame.componentsOrder[i]];\n                this.components.push({\n                    lines: buildComponentData(frame, component),\n                    scaleX: component.h / frame.maxH,\n                    scaleY: component.v / frame.maxV\n                });\n            }\n        },\n        getData: function getData(width, height) {\n            var scaleX = this.width / width, scaleY = this.height / height;\n            var component1, component2, component3, component4;\n            var component1Line, component2Line, component3Line, component4Line;\n            var x, y;\n            var offset = 0;\n            var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n            var colorTransform;\n            var dataLength = width * height * this.components.length;\n            requestMemoryAllocation(dataLength);\n            var data = new Uint8Array(dataLength);\n            switch(this.components.length){\n                case 1:\n                    component1 = this.components[0];\n                    for(y = 0; y < height; y++){\n                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];\n                        for(x = 0; x < width; x++){\n                            Y = component1Line[0 | x * component1.scaleX * scaleX];\n                            data[offset++] = Y;\n                        }\n                    }\n                    break;\n                case 2:\n                    // PDF might compress two component data in custom colorspace\n                    component1 = this.components[0];\n                    component2 = this.components[1];\n                    for(y = 0; y < height; y++){\n                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];\n                        component2Line = component2.lines[0 | y * component2.scaleY * scaleY];\n                        for(x = 0; x < width; x++){\n                            Y = component1Line[0 | x * component1.scaleX * scaleX];\n                            data[offset++] = Y;\n                            Y = component2Line[0 | x * component2.scaleX * scaleX];\n                            data[offset++] = Y;\n                        }\n                    }\n                    break;\n                case 3:\n                    // The default transform for three components is true\n                    colorTransform = true;\n                    // The adobe transform marker overrides any previous setting\n                    if (this.adobe && this.adobe.transformCode) colorTransform = true;\n                    else if (typeof this.opts.colorTransform !== \"undefined\") colorTransform = !!this.opts.colorTransform;\n                    component1 = this.components[0];\n                    component2 = this.components[1];\n                    component3 = this.components[2];\n                    for(y = 0; y < height; y++){\n                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];\n                        component2Line = component2.lines[0 | y * component2.scaleY * scaleY];\n                        component3Line = component3.lines[0 | y * component3.scaleY * scaleY];\n                        for(x = 0; x < width; x++){\n                            if (!colorTransform) {\n                                R = component1Line[0 | x * component1.scaleX * scaleX];\n                                G = component2Line[0 | x * component2.scaleX * scaleX];\n                                B = component3Line[0 | x * component3.scaleX * scaleX];\n                            } else {\n                                Y = component1Line[0 | x * component1.scaleX * scaleX];\n                                Cb = component2Line[0 | x * component2.scaleX * scaleX];\n                                Cr = component3Line[0 | x * component3.scaleX * scaleX];\n                                R = clampTo8bit(Y + 1.402 * (Cr - 128));\n                                G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                                B = clampTo8bit(Y + 1.772 * (Cb - 128));\n                            }\n                            data[offset++] = R;\n                            data[offset++] = G;\n                            data[offset++] = B;\n                        }\n                    }\n                    break;\n                case 4:\n                    if (!this.adobe) throw new Error(\"Unsupported color mode (4 components)\");\n                    // The default transform for four components is false\n                    colorTransform = false;\n                    // The adobe transform marker overrides any previous setting\n                    if (this.adobe && this.adobe.transformCode) colorTransform = true;\n                    else if (typeof this.opts.colorTransform !== \"undefined\") colorTransform = !!this.opts.colorTransform;\n                    component1 = this.components[0];\n                    component2 = this.components[1];\n                    component3 = this.components[2];\n                    component4 = this.components[3];\n                    for(y = 0; y < height; y++){\n                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];\n                        component2Line = component2.lines[0 | y * component2.scaleY * scaleY];\n                        component3Line = component3.lines[0 | y * component3.scaleY * scaleY];\n                        component4Line = component4.lines[0 | y * component4.scaleY * scaleY];\n                        for(x = 0; x < width; x++){\n                            if (!colorTransform) {\n                                C = component1Line[0 | x * component1.scaleX * scaleX];\n                                M = component2Line[0 | x * component2.scaleX * scaleX];\n                                Ye = component3Line[0 | x * component3.scaleX * scaleX];\n                                K = component4Line[0 | x * component4.scaleX * scaleX];\n                            } else {\n                                Y = component1Line[0 | x * component1.scaleX * scaleX];\n                                Cb = component2Line[0 | x * component2.scaleX * scaleX];\n                                Cr = component3Line[0 | x * component3.scaleX * scaleX];\n                                K = component4Line[0 | x * component4.scaleX * scaleX];\n                                C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));\n                                M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                                Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));\n                            }\n                            data[offset++] = 255 - C;\n                            data[offset++] = 255 - M;\n                            data[offset++] = 255 - Ye;\n                            data[offset++] = 255 - K;\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unsupported color mode\");\n            }\n            return data;\n        },\n        copyToImageData: function copyToImageData(imageData, formatAsRGBA) {\n            var width = imageData.width, height = imageData.height;\n            var imageDataArray = imageData.data;\n            var data = this.getData(width, height);\n            var i = 0, j = 0, x, y;\n            var Y, K, C, M, R, G, B;\n            switch(this.components.length){\n                case 1:\n                    for(y = 0; y < height; y++){\n                        for(x = 0; x < width; x++){\n                            Y = data[i++];\n                            imageDataArray[j++] = Y;\n                            imageDataArray[j++] = Y;\n                            imageDataArray[j++] = Y;\n                            if (formatAsRGBA) {\n                                imageDataArray[j++] = 255;\n                            }\n                        }\n                    }\n                    break;\n                case 3:\n                    for(y = 0; y < height; y++){\n                        for(x = 0; x < width; x++){\n                            R = data[i++];\n                            G = data[i++];\n                            B = data[i++];\n                            imageDataArray[j++] = R;\n                            imageDataArray[j++] = G;\n                            imageDataArray[j++] = B;\n                            if (formatAsRGBA) {\n                                imageDataArray[j++] = 255;\n                            }\n                        }\n                    }\n                    break;\n                case 4:\n                    for(y = 0; y < height; y++){\n                        for(x = 0; x < width; x++){\n                            C = data[i++];\n                            M = data[i++];\n                            Y = data[i++];\n                            K = data[i++];\n                            R = 255 - clampTo8bit(C * (1 - K / 255) + K);\n                            G = 255 - clampTo8bit(M * (1 - K / 255) + K);\n                            B = 255 - clampTo8bit(Y * (1 - K / 255) + K);\n                            imageDataArray[j++] = R;\n                            imageDataArray[j++] = G;\n                            imageDataArray[j++] = B;\n                            if (formatAsRGBA) {\n                                imageDataArray[j++] = 255;\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unsupported color mode\");\n            }\n        }\n    };\n    // We cap the amount of memory used by jpeg-js to avoid unexpected OOMs from untrusted content.\n    var totalBytesAllocated = 0;\n    var maxMemoryUsageBytes = 0;\n    function requestMemoryAllocation(increaseAmount = 0) {\n        var totalMemoryImpactBytes = totalBytesAllocated + increaseAmount;\n        if (totalMemoryImpactBytes > maxMemoryUsageBytes) {\n            var exceededAmount = Math.ceil((totalMemoryImpactBytes - maxMemoryUsageBytes) / 1024 / 1024);\n            throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${exceededAmount}MB`);\n        }\n        totalBytesAllocated = totalMemoryImpactBytes;\n    }\n    constructor.resetMaxMemoryUsage = function(maxMemoryUsageBytes_) {\n        totalBytesAllocated = 0;\n        maxMemoryUsageBytes = maxMemoryUsageBytes_;\n    };\n    constructor.getBytesAllocated = function() {\n        return totalBytesAllocated;\n    };\n    constructor.requestMemoryAllocation = requestMemoryAllocation;\n    return constructor;\n}();\nif (true) {\n    module.exports = decode;\n} else {}\nfunction decode(jpegData, userOpts = {}) {\n    var defaultOpts = {\n        // \"undefined\" means \"Choose whether to transform colors based on the image’s color model.\"\n        colorTransform: undefined,\n        useTArray: false,\n        formatAsRGBA: true,\n        tolerantDecoding: true,\n        maxResolutionInMP: 100,\n        maxMemoryUsageInMB: 512\n    };\n    var opts = {\n        ...defaultOpts,\n        ...userOpts\n    };\n    var arr = new Uint8Array(jpegData);\n    var decoder = new JpegImage();\n    decoder.opts = opts;\n    // If this constructor ever supports async decoding this will need to be done differently.\n    // Until then, treating as singleton limit is fine.\n    JpegImage.resetMaxMemoryUsage(opts.maxMemoryUsageInMB * 1024 * 1024);\n    decoder.parse(arr);\n    var channels = opts.formatAsRGBA ? 4 : 3;\n    var bytesNeeded = decoder.width * decoder.height * channels;\n    try {\n        JpegImage.requestMemoryAllocation(bytesNeeded);\n        var image = {\n            width: decoder.width,\n            height: decoder.height,\n            exifBuffer: decoder.exifBuffer,\n            data: opts.useTArray ? new Uint8Array(bytesNeeded) : Buffer.alloc(bytesNeeded)\n        };\n        if (decoder.comments.length > 0) {\n            image[\"comments\"] = decoder.comments;\n        }\n    } catch (err) {\n        if (err instanceof RangeError) {\n            throw new Error(\"Could not allocate enough memory for the image. \" + \"Required: \" + bytesNeeded);\n        }\n        if (err instanceof ReferenceError) {\n            if (err.message === \"Buffer is not defined\") {\n                throw new Error(\"Buffer is not globally defined in this environment. \" + \"Consider setting useTArray to true\");\n            }\n        }\n        throw err;\n    }\n    decoder.copyToImageData(image, opts.formatAsRGBA);\n    return image;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jpeg-js/lib/decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jpeg-js/lib/encoder.js":
/*!*********************************************!*\
  !*** ./node_modules/jpeg-js/lib/encoder.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/*\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without \n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice, \n    this list of conditions and the following disclaimer.\n  \n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n  \n  * Neither the name of Adobe Systems Incorporated nor the names of its \n    contributors may be used to endorse or promote products derived from \n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/ /*\nJPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009\n\nBasic GUI blocking jpeg encoder\n*/ var btoa = btoa || function(buf) {\n    return Buffer.from(buf).toString(\"base64\");\n};\nfunction JPEGEncoder(quality) {\n    var self = this;\n    var fround = Math.round;\n    var ffloor = Math.floor;\n    var YTable = new Array(64);\n    var UVTable = new Array(64);\n    var fdtbl_Y = new Array(64);\n    var fdtbl_UV = new Array(64);\n    var YDC_HT;\n    var UVDC_HT;\n    var YAC_HT;\n    var UVAC_HT;\n    var bitcode = new Array(65535);\n    var category = new Array(65535);\n    var outputfDCTQuant = new Array(64);\n    var DU = new Array(64);\n    var byteout = [];\n    var bytenew = 0;\n    var bytepos = 7;\n    var YDU = new Array(64);\n    var UDU = new Array(64);\n    var VDU = new Array(64);\n    var clt = new Array(256);\n    var RGB_YUV_TABLE = new Array(2048);\n    var currentQuality;\n    var ZigZag = [\n        0,\n        1,\n        5,\n        6,\n        14,\n        15,\n        27,\n        28,\n        2,\n        4,\n        7,\n        13,\n        16,\n        26,\n        29,\n        42,\n        3,\n        8,\n        12,\n        17,\n        25,\n        30,\n        41,\n        43,\n        9,\n        11,\n        18,\n        24,\n        31,\n        40,\n        44,\n        53,\n        10,\n        19,\n        23,\n        32,\n        39,\n        45,\n        52,\n        54,\n        20,\n        22,\n        33,\n        38,\n        46,\n        51,\n        55,\n        60,\n        21,\n        34,\n        37,\n        47,\n        50,\n        56,\n        59,\n        61,\n        35,\n        36,\n        48,\n        49,\n        57,\n        58,\n        62,\n        63\n    ];\n    var std_dc_luminance_nrcodes = [\n        0,\n        0,\n        1,\n        5,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    var std_dc_luminance_values = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11\n    ];\n    var std_ac_luminance_nrcodes = [\n        0,\n        0,\n        2,\n        1,\n        3,\n        3,\n        2,\n        4,\n        3,\n        5,\n        5,\n        4,\n        4,\n        0,\n        0,\n        1,\n        0x7d\n    ];\n    var std_ac_luminance_values = [\n        0x01,\n        0x02,\n        0x03,\n        0x00,\n        0x04,\n        0x11,\n        0x05,\n        0x12,\n        0x21,\n        0x31,\n        0x41,\n        0x06,\n        0x13,\n        0x51,\n        0x61,\n        0x07,\n        0x22,\n        0x71,\n        0x14,\n        0x32,\n        0x81,\n        0x91,\n        0xa1,\n        0x08,\n        0x23,\n        0x42,\n        0xb1,\n        0xc1,\n        0x15,\n        0x52,\n        0xd1,\n        0xf0,\n        0x24,\n        0x33,\n        0x62,\n        0x72,\n        0x82,\n        0x09,\n        0x0a,\n        0x16,\n        0x17,\n        0x18,\n        0x19,\n        0x1a,\n        0x25,\n        0x26,\n        0x27,\n        0x28,\n        0x29,\n        0x2a,\n        0x34,\n        0x35,\n        0x36,\n        0x37,\n        0x38,\n        0x39,\n        0x3a,\n        0x43,\n        0x44,\n        0x45,\n        0x46,\n        0x47,\n        0x48,\n        0x49,\n        0x4a,\n        0x53,\n        0x54,\n        0x55,\n        0x56,\n        0x57,\n        0x58,\n        0x59,\n        0x5a,\n        0x63,\n        0x64,\n        0x65,\n        0x66,\n        0x67,\n        0x68,\n        0x69,\n        0x6a,\n        0x73,\n        0x74,\n        0x75,\n        0x76,\n        0x77,\n        0x78,\n        0x79,\n        0x7a,\n        0x83,\n        0x84,\n        0x85,\n        0x86,\n        0x87,\n        0x88,\n        0x89,\n        0x8a,\n        0x92,\n        0x93,\n        0x94,\n        0x95,\n        0x96,\n        0x97,\n        0x98,\n        0x99,\n        0x9a,\n        0xa2,\n        0xa3,\n        0xa4,\n        0xa5,\n        0xa6,\n        0xa7,\n        0xa8,\n        0xa9,\n        0xaa,\n        0xb2,\n        0xb3,\n        0xb4,\n        0xb5,\n        0xb6,\n        0xb7,\n        0xb8,\n        0xb9,\n        0xba,\n        0xc2,\n        0xc3,\n        0xc4,\n        0xc5,\n        0xc6,\n        0xc7,\n        0xc8,\n        0xc9,\n        0xca,\n        0xd2,\n        0xd3,\n        0xd4,\n        0xd5,\n        0xd6,\n        0xd7,\n        0xd8,\n        0xd9,\n        0xda,\n        0xe1,\n        0xe2,\n        0xe3,\n        0xe4,\n        0xe5,\n        0xe6,\n        0xe7,\n        0xe8,\n        0xe9,\n        0xea,\n        0xf1,\n        0xf2,\n        0xf3,\n        0xf4,\n        0xf5,\n        0xf6,\n        0xf7,\n        0xf8,\n        0xf9,\n        0xfa\n    ];\n    var std_dc_chrominance_nrcodes = [\n        0,\n        0,\n        3,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    var std_dc_chrominance_values = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11\n    ];\n    var std_ac_chrominance_nrcodes = [\n        0,\n        0,\n        2,\n        1,\n        2,\n        4,\n        4,\n        3,\n        4,\n        7,\n        5,\n        4,\n        4,\n        0,\n        1,\n        2,\n        0x77\n    ];\n    var std_ac_chrominance_values = [\n        0x00,\n        0x01,\n        0x02,\n        0x03,\n        0x11,\n        0x04,\n        0x05,\n        0x21,\n        0x31,\n        0x06,\n        0x12,\n        0x41,\n        0x51,\n        0x07,\n        0x61,\n        0x71,\n        0x13,\n        0x22,\n        0x32,\n        0x81,\n        0x08,\n        0x14,\n        0x42,\n        0x91,\n        0xa1,\n        0xb1,\n        0xc1,\n        0x09,\n        0x23,\n        0x33,\n        0x52,\n        0xf0,\n        0x15,\n        0x62,\n        0x72,\n        0xd1,\n        0x0a,\n        0x16,\n        0x24,\n        0x34,\n        0xe1,\n        0x25,\n        0xf1,\n        0x17,\n        0x18,\n        0x19,\n        0x1a,\n        0x26,\n        0x27,\n        0x28,\n        0x29,\n        0x2a,\n        0x35,\n        0x36,\n        0x37,\n        0x38,\n        0x39,\n        0x3a,\n        0x43,\n        0x44,\n        0x45,\n        0x46,\n        0x47,\n        0x48,\n        0x49,\n        0x4a,\n        0x53,\n        0x54,\n        0x55,\n        0x56,\n        0x57,\n        0x58,\n        0x59,\n        0x5a,\n        0x63,\n        0x64,\n        0x65,\n        0x66,\n        0x67,\n        0x68,\n        0x69,\n        0x6a,\n        0x73,\n        0x74,\n        0x75,\n        0x76,\n        0x77,\n        0x78,\n        0x79,\n        0x7a,\n        0x82,\n        0x83,\n        0x84,\n        0x85,\n        0x86,\n        0x87,\n        0x88,\n        0x89,\n        0x8a,\n        0x92,\n        0x93,\n        0x94,\n        0x95,\n        0x96,\n        0x97,\n        0x98,\n        0x99,\n        0x9a,\n        0xa2,\n        0xa3,\n        0xa4,\n        0xa5,\n        0xa6,\n        0xa7,\n        0xa8,\n        0xa9,\n        0xaa,\n        0xb2,\n        0xb3,\n        0xb4,\n        0xb5,\n        0xb6,\n        0xb7,\n        0xb8,\n        0xb9,\n        0xba,\n        0xc2,\n        0xc3,\n        0xc4,\n        0xc5,\n        0xc6,\n        0xc7,\n        0xc8,\n        0xc9,\n        0xca,\n        0xd2,\n        0xd3,\n        0xd4,\n        0xd5,\n        0xd6,\n        0xd7,\n        0xd8,\n        0xd9,\n        0xda,\n        0xe2,\n        0xe3,\n        0xe4,\n        0xe5,\n        0xe6,\n        0xe7,\n        0xe8,\n        0xe9,\n        0xea,\n        0xf2,\n        0xf3,\n        0xf4,\n        0xf5,\n        0xf6,\n        0xf7,\n        0xf8,\n        0xf9,\n        0xfa\n    ];\n    function initQuantTables(sf) {\n        var YQT = [\n            16,\n            11,\n            10,\n            16,\n            24,\n            40,\n            51,\n            61,\n            12,\n            12,\n            14,\n            19,\n            26,\n            58,\n            60,\n            55,\n            14,\n            13,\n            16,\n            24,\n            40,\n            57,\n            69,\n            56,\n            14,\n            17,\n            22,\n            29,\n            51,\n            87,\n            80,\n            62,\n            18,\n            22,\n            37,\n            56,\n            68,\n            109,\n            103,\n            77,\n            24,\n            35,\n            55,\n            64,\n            81,\n            104,\n            113,\n            92,\n            49,\n            64,\n            78,\n            87,\n            103,\n            121,\n            120,\n            101,\n            72,\n            92,\n            95,\n            98,\n            112,\n            100,\n            103,\n            99\n        ];\n        for(var i = 0; i < 64; i++){\n            var t = ffloor((YQT[i] * sf + 50) / 100);\n            if (t < 1) {\n                t = 1;\n            } else if (t > 255) {\n                t = 255;\n            }\n            YTable[ZigZag[i]] = t;\n        }\n        var UVQT = [\n            17,\n            18,\n            24,\n            47,\n            99,\n            99,\n            99,\n            99,\n            18,\n            21,\n            26,\n            66,\n            99,\n            99,\n            99,\n            99,\n            24,\n            26,\n            56,\n            99,\n            99,\n            99,\n            99,\n            99,\n            47,\n            66,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99,\n            99\n        ];\n        for(var j = 0; j < 64; j++){\n            var u = ffloor((UVQT[j] * sf + 50) / 100);\n            if (u < 1) {\n                u = 1;\n            } else if (u > 255) {\n                u = 255;\n            }\n            UVTable[ZigZag[j]] = u;\n        }\n        var aasf = [\n            1.0,\n            1.387039845,\n            1.306562965,\n            1.175875602,\n            1.0,\n            0.785694958,\n            0.541196100,\n            0.275899379\n        ];\n        var k = 0;\n        for(var row = 0; row < 8; row++){\n            for(var col = 0; col < 8; col++){\n                fdtbl_Y[k] = 1.0 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);\n                fdtbl_UV[k] = 1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);\n                k++;\n            }\n        }\n    }\n    function computeHuffmanTbl(nrcodes, std_table) {\n        var codevalue = 0;\n        var pos_in_table = 0;\n        var HT = new Array();\n        for(var k = 1; k <= 16; k++){\n            for(var j = 1; j <= nrcodes[k]; j++){\n                HT[std_table[pos_in_table]] = [];\n                HT[std_table[pos_in_table]][0] = codevalue;\n                HT[std_table[pos_in_table]][1] = k;\n                pos_in_table++;\n                codevalue++;\n            }\n            codevalue *= 2;\n        }\n        return HT;\n    }\n    function initHuffmanTbl() {\n        YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);\n        UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);\n        YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);\n        UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);\n    }\n    function initCategoryNumber() {\n        var nrlower = 1;\n        var nrupper = 2;\n        for(var cat = 1; cat <= 15; cat++){\n            //Positive numbers\n            for(var nr = nrlower; nr < nrupper; nr++){\n                category[32767 + nr] = cat;\n                bitcode[32767 + nr] = [];\n                bitcode[32767 + nr][1] = cat;\n                bitcode[32767 + nr][0] = nr;\n            }\n            //Negative numbers\n            for(var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++){\n                category[32767 + nrneg] = cat;\n                bitcode[32767 + nrneg] = [];\n                bitcode[32767 + nrneg][1] = cat;\n                bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;\n            }\n            nrlower <<= 1;\n            nrupper <<= 1;\n        }\n    }\n    function initRGBYUVTable() {\n        for(var i = 0; i < 256; i++){\n            RGB_YUV_TABLE[i] = 19595 * i;\n            RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;\n            RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 0x8000;\n            RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;\n            RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;\n            RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 0x807FFF;\n            RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;\n            RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;\n        }\n    }\n    // IO functions\n    function writeBits(bs) {\n        var value = bs[0];\n        var posval = bs[1] - 1;\n        while(posval >= 0){\n            if (value & 1 << posval) {\n                bytenew |= 1 << bytepos;\n            }\n            posval--;\n            bytepos--;\n            if (bytepos < 0) {\n                if (bytenew == 0xFF) {\n                    writeByte(0xFF);\n                    writeByte(0);\n                } else {\n                    writeByte(bytenew);\n                }\n                bytepos = 7;\n                bytenew = 0;\n            }\n        }\n    }\n    function writeByte(value) {\n        //byteout.push(clt[value]); // write char directly instead of converting later\n        byteout.push(value);\n    }\n    function writeWord(value) {\n        writeByte(value >> 8 & 0xFF);\n        writeByte(value & 0xFF);\n    }\n    // DCT & quantization core\n    function fDCTQuant(data, fdtbl) {\n        var d0, d1, d2, d3, d4, d5, d6, d7;\n        /* Pass 1: process rows. */ var dataOff = 0;\n        var i;\n        var I8 = 8;\n        var I64 = 64;\n        for(i = 0; i < I8; ++i){\n            d0 = data[dataOff];\n            d1 = data[dataOff + 1];\n            d2 = data[dataOff + 2];\n            d3 = data[dataOff + 3];\n            d4 = data[dataOff + 4];\n            d5 = data[dataOff + 5];\n            d6 = data[dataOff + 6];\n            d7 = data[dataOff + 7];\n            var tmp0 = d0 + d7;\n            var tmp7 = d0 - d7;\n            var tmp1 = d1 + d6;\n            var tmp6 = d1 - d6;\n            var tmp2 = d2 + d5;\n            var tmp5 = d2 - d5;\n            var tmp3 = d3 + d4;\n            var tmp4 = d3 - d4;\n            /* Even part */ var tmp10 = tmp0 + tmp3; /* phase 2 */ \n            var tmp13 = tmp0 - tmp3;\n            var tmp11 = tmp1 + tmp2;\n            var tmp12 = tmp1 - tmp2;\n            data[dataOff] = tmp10 + tmp11; /* phase 3 */ \n            data[dataOff + 4] = tmp10 - tmp11;\n            var z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */ \n            data[dataOff + 2] = tmp13 + z1; /* phase 5 */ \n            data[dataOff + 6] = tmp13 - z1;\n            /* Odd part */ tmp10 = tmp4 + tmp5; /* phase 2 */ \n            tmp11 = tmp5 + tmp6;\n            tmp12 = tmp6 + tmp7;\n            /* The rotator is modified from fig 4-8 to avoid extra negations. */ var z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */ \n            var z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */ \n            var z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */ \n            var z3 = tmp11 * 0.707106781; /* c4 */ \n            var z11 = tmp7 + z3; /* phase 5 */ \n            var z13 = tmp7 - z3;\n            data[dataOff + 5] = z13 + z2; /* phase 6 */ \n            data[dataOff + 3] = z13 - z2;\n            data[dataOff + 1] = z11 + z4;\n            data[dataOff + 7] = z11 - z4;\n            dataOff += 8; /* advance pointer to next row */ \n        }\n        /* Pass 2: process columns. */ dataOff = 0;\n        for(i = 0; i < I8; ++i){\n            d0 = data[dataOff];\n            d1 = data[dataOff + 8];\n            d2 = data[dataOff + 16];\n            d3 = data[dataOff + 24];\n            d4 = data[dataOff + 32];\n            d5 = data[dataOff + 40];\n            d6 = data[dataOff + 48];\n            d7 = data[dataOff + 56];\n            var tmp0p2 = d0 + d7;\n            var tmp7p2 = d0 - d7;\n            var tmp1p2 = d1 + d6;\n            var tmp6p2 = d1 - d6;\n            var tmp2p2 = d2 + d5;\n            var tmp5p2 = d2 - d5;\n            var tmp3p2 = d3 + d4;\n            var tmp4p2 = d3 - d4;\n            /* Even part */ var tmp10p2 = tmp0p2 + tmp3p2; /* phase 2 */ \n            var tmp13p2 = tmp0p2 - tmp3p2;\n            var tmp11p2 = tmp1p2 + tmp2p2;\n            var tmp12p2 = tmp1p2 - tmp2p2;\n            data[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */ \n            data[dataOff + 32] = tmp10p2 - tmp11p2;\n            var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */ \n            data[dataOff + 16] = tmp13p2 + z1p2; /* phase 5 */ \n            data[dataOff + 48] = tmp13p2 - z1p2;\n            /* Odd part */ tmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */ \n            tmp11p2 = tmp5p2 + tmp6p2;\n            tmp12p2 = tmp6p2 + tmp7p2;\n            /* The rotator is modified from fig 4-8 to avoid extra negations. */ var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */ \n            var z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */ \n            var z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */ \n            var z3p2 = tmp11p2 * 0.707106781; /* c4 */ \n            var z11p2 = tmp7p2 + z3p2; /* phase 5 */ \n            var z13p2 = tmp7p2 - z3p2;\n            data[dataOff + 40] = z13p2 + z2p2; /* phase 6 */ \n            data[dataOff + 24] = z13p2 - z2p2;\n            data[dataOff + 8] = z11p2 + z4p2;\n            data[dataOff + 56] = z11p2 - z4p2;\n            dataOff++; /* advance pointer to next column */ \n        }\n        // Quantize/descale the coefficients\n        var fDCTQuant;\n        for(i = 0; i < I64; ++i){\n            // Apply the quantization and scaling factor & Round to nearest integer\n            fDCTQuant = data[i] * fdtbl[i];\n            outputfDCTQuant[i] = fDCTQuant > 0.0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0;\n        //outputfDCTQuant[i] = fround(fDCTQuant);\n        }\n        return outputfDCTQuant;\n    }\n    function writeAPP0() {\n        writeWord(0xFFE0); // marker\n        writeWord(16); // length\n        writeByte(0x4A); // J\n        writeByte(0x46); // F\n        writeByte(0x49); // I\n        writeByte(0x46); // F\n        writeByte(0); // = \"JFIF\",'\\0'\n        writeByte(1); // versionhi\n        writeByte(1); // versionlo\n        writeByte(0); // xyunits\n        writeWord(1); // xdensity\n        writeWord(1); // ydensity\n        writeByte(0); // thumbnwidth\n        writeByte(0); // thumbnheight\n    }\n    function writeAPP1(exifBuffer) {\n        if (!exifBuffer) return;\n        writeWord(0xFFE1); // APP1 marker\n        if (exifBuffer[0] === 0x45 && exifBuffer[1] === 0x78 && exifBuffer[2] === 0x69 && exifBuffer[3] === 0x66) {\n            // Buffer already starts with EXIF, just use it directly\n            writeWord(exifBuffer.length + 2); // length is buffer + length itself!\n        } else {\n            // Buffer doesn't start with EXIF, write it for them\n            writeWord(exifBuffer.length + 5 + 2); // length is buffer + EXIF\\0 + length itself!\n            writeByte(0x45); // E\n            writeByte(0x78); // X\n            writeByte(0x69); // I\n            writeByte(0x66); // F\n            writeByte(0); // = \"EXIF\",'\\0'\n        }\n        for(var i = 0; i < exifBuffer.length; i++){\n            writeByte(exifBuffer[i]);\n        }\n    }\n    function writeSOF0(width, height) {\n        writeWord(0xFFC0); // marker\n        writeWord(17); // length, truecolor YUV JPG\n        writeByte(8); // precision\n        writeWord(height);\n        writeWord(width);\n        writeByte(3); // nrofcomponents\n        writeByte(1); // IdY\n        writeByte(0x11); // HVY\n        writeByte(0); // QTY\n        writeByte(2); // IdU\n        writeByte(0x11); // HVU\n        writeByte(1); // QTU\n        writeByte(3); // IdV\n        writeByte(0x11); // HVV\n        writeByte(1); // QTV\n    }\n    function writeDQT() {\n        writeWord(0xFFDB); // marker\n        writeWord(132); // length\n        writeByte(0);\n        for(var i = 0; i < 64; i++){\n            writeByte(YTable[i]);\n        }\n        writeByte(1);\n        for(var j = 0; j < 64; j++){\n            writeByte(UVTable[j]);\n        }\n    }\n    function writeDHT() {\n        writeWord(0xFFC4); // marker\n        writeWord(0x01A2); // length\n        writeByte(0); // HTYDCinfo\n        for(var i = 0; i < 16; i++){\n            writeByte(std_dc_luminance_nrcodes[i + 1]);\n        }\n        for(var j = 0; j <= 11; j++){\n            writeByte(std_dc_luminance_values[j]);\n        }\n        writeByte(0x10); // HTYACinfo\n        for(var k = 0; k < 16; k++){\n            writeByte(std_ac_luminance_nrcodes[k + 1]);\n        }\n        for(var l = 0; l <= 161; l++){\n            writeByte(std_ac_luminance_values[l]);\n        }\n        writeByte(1); // HTUDCinfo\n        for(var m = 0; m < 16; m++){\n            writeByte(std_dc_chrominance_nrcodes[m + 1]);\n        }\n        for(var n = 0; n <= 11; n++){\n            writeByte(std_dc_chrominance_values[n]);\n        }\n        writeByte(0x11); // HTUACinfo\n        for(var o = 0; o < 16; o++){\n            writeByte(std_ac_chrominance_nrcodes[o + 1]);\n        }\n        for(var p = 0; p <= 161; p++){\n            writeByte(std_ac_chrominance_values[p]);\n        }\n    }\n    function writeCOM(comments) {\n        if (typeof comments === \"undefined\" || comments.constructor !== Array) return;\n        comments.forEach((e)=>{\n            if (typeof e !== \"string\") return;\n            writeWord(0xFFFE); // marker\n            var l = e.length;\n            writeWord(l + 2); // length itself as well\n            var i;\n            for(i = 0; i < l; i++)writeByte(e.charCodeAt(i));\n        });\n    }\n    function writeSOS() {\n        writeWord(0xFFDA); // marker\n        writeWord(12); // length\n        writeByte(3); // nrofcomponents\n        writeByte(1); // IdY\n        writeByte(0); // HTY\n        writeByte(2); // IdU\n        writeByte(0x11); // HTU\n        writeByte(3); // IdV\n        writeByte(0x11); // HTV\n        writeByte(0); // Ss\n        writeByte(0x3f); // Se\n        writeByte(0); // Bf\n    }\n    function processDU(CDU, fdtbl, DC, HTDC, HTAC) {\n        var EOB = HTAC[0x00];\n        var M16zeroes = HTAC[0xF0];\n        var pos;\n        var I16 = 16;\n        var I63 = 63;\n        var I64 = 64;\n        var DU_DCT = fDCTQuant(CDU, fdtbl);\n        //ZigZag reorder\n        for(var j = 0; j < I64; ++j){\n            DU[ZigZag[j]] = DU_DCT[j];\n        }\n        var Diff = DU[0] - DC;\n        DC = DU[0];\n        //Encode DC\n        if (Diff == 0) {\n            writeBits(HTDC[0]); // Diff might be 0\n        } else {\n            pos = 32767 + Diff;\n            writeBits(HTDC[category[pos]]);\n            writeBits(bitcode[pos]);\n        }\n        //Encode ACs\n        var end0pos = 63; // was const... which is crazy\n        for(; end0pos > 0 && DU[end0pos] == 0; end0pos--){}\n        ;\n        //end0pos = first element in reverse order !=0\n        if (end0pos == 0) {\n            writeBits(EOB);\n            return DC;\n        }\n        var i = 1;\n        var lng;\n        while(i <= end0pos){\n            var startpos = i;\n            for(; DU[i] == 0 && i <= end0pos; ++i){}\n            var nrzeroes = i - startpos;\n            if (nrzeroes >= I16) {\n                lng = nrzeroes >> 4;\n                for(var nrmarker = 1; nrmarker <= lng; ++nrmarker)writeBits(M16zeroes);\n                nrzeroes = nrzeroes & 0xF;\n            }\n            pos = 32767 + DU[i];\n            writeBits(HTAC[(nrzeroes << 4) + category[pos]]);\n            writeBits(bitcode[pos]);\n            i++;\n        }\n        if (end0pos != I63) {\n            writeBits(EOB);\n        }\n        return DC;\n    }\n    function initCharLookupTable() {\n        var sfcc = String.fromCharCode;\n        for(var i = 0; i < 256; i++){\n            clt[i] = sfcc(i);\n        }\n    }\n    this.encode = function(image, quality) {\n        var time_start = new Date().getTime();\n        if (quality) setQuality(quality);\n        // Initialize bit writer\n        byteout = new Array();\n        bytenew = 0;\n        bytepos = 7;\n        // Add JPEG headers\n        writeWord(0xFFD8); // SOI\n        writeAPP0();\n        writeCOM(image.comments);\n        writeAPP1(image.exifBuffer);\n        writeDQT();\n        writeSOF0(image.width, image.height);\n        writeDHT();\n        writeSOS();\n        // Encode 8x8 macroblocks\n        var DCY = 0;\n        var DCU = 0;\n        var DCV = 0;\n        bytenew = 0;\n        bytepos = 7;\n        this.encode.displayName = \"_encode_\";\n        var imageData = image.data;\n        var width = image.width;\n        var height = image.height;\n        var quadWidth = width * 4;\n        var tripleWidth = width * 3;\n        var x, y = 0;\n        var r, g, b;\n        var start, p, col, row, pos;\n        while(y < height){\n            x = 0;\n            while(x < quadWidth){\n                start = quadWidth * y + x;\n                p = start;\n                col = -1;\n                row = 0;\n                for(pos = 0; pos < 64; pos++){\n                    row = pos >> 3; // /8\n                    col = (pos & 7) * 4; // %8\n                    p = start + row * quadWidth + col;\n                    if (y + row >= height) {\n                        p -= quadWidth * (y + 1 + row - height);\n                    }\n                    if (x + col >= quadWidth) {\n                        p -= x + col - quadWidth + 4;\n                    }\n                    r = imageData[p++];\n                    g = imageData[p++];\n                    b = imageData[p++];\n                    /* // calculate YUV values dynamically\n\t\t\t\t\tYDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\n\t\t\t\t\tUDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\n\t\t\t\t\tVDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\n\t\t\t\t\t*/ // use lookup table (slightly faster)\n                    YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;\n                    UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;\n                    VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;\n                }\n                DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);\n                DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);\n                DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);\n                x += 32;\n            }\n            y += 8;\n        }\n        ////////////////////////////////////////////////////////////////\n        // Do the bit alignment of the EOI marker\n        if (bytepos >= 0) {\n            var fillbits = [];\n            fillbits[1] = bytepos + 1;\n            fillbits[0] = (1 << bytepos + 1) - 1;\n            writeBits(fillbits);\n        }\n        writeWord(0xFFD9); //EOI\n        if (false) {}\n        return Buffer.from(byteout);\n        var jpegDataUri = \"data:image/jpeg;base64,\" + btoa(byteout.join(\"\"));\n        byteout = [];\n        // benchmarking\n        var duration = new Date().getTime() - time_start;\n        //console.log('Encoding time: '+ duration + 'ms');\n        //\n        return jpegDataUri;\n    };\n    function setQuality(quality) {\n        if (quality <= 0) {\n            quality = 1;\n        }\n        if (quality > 100) {\n            quality = 100;\n        }\n        if (currentQuality == quality) return; // don't recalc if unchanged\n        var sf = 0;\n        if (quality < 50) {\n            sf = Math.floor(5000 / quality);\n        } else {\n            sf = Math.floor(200 - quality * 2);\n        }\n        initQuantTables(sf);\n        currentQuality = quality;\n    //console.log('Quality set to: '+quality +'%');\n    }\n    function init() {\n        var time_start = new Date().getTime();\n        if (!quality) quality = 50;\n        // Create tables\n        initCharLookupTable();\n        initHuffmanTbl();\n        initCategoryNumber();\n        initRGBYUVTable();\n        setQuality(quality);\n        var duration = new Date().getTime() - time_start;\n    //console.log('Initialization '+ duration + 'ms');\n    }\n    init();\n}\n;\nif (true) {\n    module.exports = encode;\n} else {}\nfunction encode(imgData, qu) {\n    if (typeof qu === \"undefined\") qu = 50;\n    var encoder = new JPEGEncoder(qu);\n    var data = encoder.encode(imgData, qu);\n    return {\n        data: data,\n        width: imgData.width,\n        height: imgData.height\n    };\n}\n// helper function to get the imageData of an existing image on the current page.\nfunction getImageDataFromImage(idOrElement) {\n    var theImg = typeof idOrElement == \"string\" ? document.getElementById(idOrElement) : idOrElement;\n    var cvs = document.createElement(\"canvas\");\n    cvs.width = theImg.width;\n    cvs.height = theImg.height;\n    var ctx = cvs.getContext(\"2d\");\n    ctx.drawImage(theImg, 0, 0);\n    return ctx.getImageData(0, 0, cvs.width, cvs.height);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jpeg-js/lib/encoder.js\n");

/***/ })

};
;