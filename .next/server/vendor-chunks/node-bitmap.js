/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-bitmap";
exports.ids = ["vendor-chunks/node-bitmap"];
exports.modules = {

/***/ "(ssr)/./node_modules/node-bitmap/index.js":
/*!*******************************************!*\
  !*** ./node_modules/node-bitmap/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/bitmap */ \"(ssr)/./node_modules/node-bitmap/lib/bitmap.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1iaXRtYXAvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUFBLDBHQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21pY3JvcG9zLy4vbm9kZV9tb2R1bGVzL25vZGUtYml0bWFwL2luZGV4LmpzP2UyNDUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9iaXRtYXAnKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-bitmap/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-bitmap/lib/bitmap.js":
/*!************************************************!*\
  !*** ./node_modules/node-bitmap/lib/bitmap.js ***!
  \************************************************/
/***/ ((module, exports) => {

eval("var Bitmap = module.exports = exports = function(buffer) {\n    this.buffer = buffer;\n    this.initialized = false;\n    this.fileHeader = null;\n    this.infoHeader = null;\n    this.coreHeader = null;\n    this.colorPalette = null;\n    this.dataPos = -1;\n};\nBitmap.prototype.CORE_TYPE_WINDOWS_V3 = 40;\nBitmap.prototype.CORE_TYPE_WINDOWS_V4 = 108;\nBitmap.prototype.CORE_TYPE_WINDOWS_V5 = 124;\nBitmap.prototype.CORE_TYPE_OS2_V1 = 12;\nBitmap.prototype.CORE_TYPE_OS2_V2 = 64;\nBitmap.prototype.BITMAPCOREHEADER = Bitmap.prototype.CORE_TYPE_OS2_V1;\nBitmap.prototype.BITMAPINFOHEADER = Bitmap.prototype.CORE_TYPE_WINDOWS_V3;\nBitmap.prototype.BITMAPINFOHEADER2 = Bitmap.prototype.CORE_TYPE_OS2_V2;\nBitmap.prototype.BITMAPV4HEADER = Bitmap.prototype.CORE_TYPE_WINDOWS_V4;\nBitmap.prototype.BITMAPV5HEADER = Bitmap.prototype.CORE_TYPE_WINDOWS_V5;\nBitmap.prototype.COMPRESSION_BI_RGB = 0;\nBitmap.prototype.COMPRESSION_BI_RLE8 = 1;\nBitmap.prototype.COMPRESSION_BI_RLE4 = 2;\nBitmap.prototype.COMPRESSION_BI_BITFIELDS = 3;\nBitmap.prototype.COMPRESSION_BI_JPEG = 4;\nBitmap.prototype.COMPRESSION_BI_PNG = 5;\nBitmap.prototype.BITCOUNT_2 = 1;\nBitmap.prototype.BITCOUNT_16 = 4;\nBitmap.prototype.BITCOUNT_256 = 8;\nBitmap.prototype.BITCOUNT_16bit = 16;\nBitmap.prototype.BITCOUNT_24bit = 24;\nBitmap.prototype.BITCOUNT_32bit = 32;\nBitmap.prototype.init = function() {\n    this.readFileHeader();\n    this.readInfoHeader();\n    this.readCoreHeader();\n    this.readColorPalette();\n    this.initDataPos();\n    this.initialized = true;\n};\nBitmap.prototype.checkInit = function() {\n    if (!this.initialized) {\n        throw new Error(\"not initialized\");\n    }\n/* nop */ };\nBitmap.prototype.isBitmap = function() {\n    this.checkInit();\n    if (\"BM\" == this.fileHeader.bfType) {\n        return true;\n    }\n    return false;\n};\nBitmap.prototype.getData = function() {\n    this.checkInit();\n    if (this.COMPRESSION_BI_RGB !== this.coreHeader.__copmression__) {\n        throw new Error(\"not supported compression: \" + this.coreHeader.__copmression__);\n    }\n    var bitCount = this.coreHeader.__bitCount__;\n    var width = this.getWidth();\n    var height = this.getHeight();\n    var line = width * bitCount / 8;\n    if (0 != line % 4) {\n        line = (line / 4 + 1) * 4;\n    }\n    var rgbaData = [];\n    var dataPos = this.dataPos;\n    for(var i = 0; i < height; ++i){\n        var pos = dataPos + line * (height - (i + 1));\n        var buf = this.buffer.slice(pos, pos + line);\n        var color = this.mapColor(buf, bitCount);\n        rgbaData.push(color);\n    }\n    return rgbaData;\n};\nBitmap.prototype.getWidth = function() {\n    this.checkInit();\n    return this.coreHeader.__width__;\n};\nBitmap.prototype.getHeight = function() {\n    this.checkInit();\n    return this.coreHeader.__height__;\n};\nBitmap.prototype.read = function(buf, offset, limit) {\n    var read = [];\n    for(var i = offset, len = offset + limit; i < len; ++i){\n        read.push(buf.readInt8(i));\n    }\n    return new Buffer(read);\n};\nBitmap.prototype.readFileHeader = function() {\n    var bfType = this.read(this.buffer, 0, 2);\n    var bfSize = this.read(this.buffer, 2, 4);\n    var bfReserved1 = this.read(this.buffer, 6, 2);\n    var bfReserved2 = this.read(this.buffer, 8, 2);\n    var bfOffBits = this.read(this.buffer, 10, 4);\n    this.fileHeader = {\n        bfType: bfType.toString(\"ascii\"),\n        _bfType: bfType,\n        bfSize: bfSize.readUInt16LE(0),\n        _bfSize: bfSize,\n        bfReserved1: 0,\n        bfReserved2: 0,\n        bfOffBits: bfOffBits.readUInt16LE(0),\n        _bfOffBits: bfOffBits\n    };\n};\nBitmap.prototype.readInfoHeader = function() {\n    this.infoHeader = this.read(this.buffer, 14, 4);\n};\nBitmap.prototype.readCoreHeader = function() {\n    var coreType = this.infoHeader.readUInt16LE(0);\n    switch(coreType){\n        case this.BITMAPCOREHEADER:\n            return this.readCoreHeaderOS2_V1();\n        case this.BITMAPINFOHEADER2:\n            return this.readCoreHeaderOS2_V2();\n        case this.BITMAPV4HEADER:\n            return this.readCoreHeaderWINDOWS_V4();\n        case this.BITMAPV5HEADER:\n            return this.readCoreHeaderWINDOWS_V5();\n        case this.BITMAPINFOHEADER:\n            return this.readCoreHeaderWINDOWS_V3();\n        default:\n            throw new Error(\"unknown coreType: \" + coreType);\n    }\n};\nBitmap.prototype.readCoreHeaderWINDOWS_V3 = function() {\n    var biWidth = this.read(this.buffer, 0x12, 4);\n    var biHeight = this.read(this.buffer, 0x16, 4);\n    var biPlanes = this.read(this.buffer, 0x1a, 2);\n    var biBitCount = this.read(this.buffer, 0x1c, 2);\n    var biCopmression = this.read(this.buffer, 0x1e, 4);\n    var biSizeImage = this.read(this.buffer, 0x22, 4);\n    var biXPixPerMeter = this.read(this.buffer, 0x26, 4);\n    var biYPixPerMeter = this.read(this.buffer, 0x2a, 4);\n    var biClrUsed = this.read(this.buffer, 0x2e, 4);\n    var biCirImportant = this.read(this.buffer, 0x32, 4);\n    this.coreHeader = {\n        __copmression__: biCopmression.readUInt16LE(0),\n        __bitCount__: biBitCount.readUInt8(0),\n        __width__: biWidth.readUInt16LE(0),\n        __height__: biHeight.readUInt16LE(0),\n        biWidth: biWidth.readUInt16LE(0),\n        _biWidth: biWidth,\n        biHeight: biHeight.readUInt16LE(0),\n        _biHeight: biHeight,\n        biPlanes: biPlanes.readUInt8(0),\n        _biPlanes: biPlanes,\n        biBitCount: biBitCount.readUInt8(0),\n        _biBitCount: biBitCount,\n        biCopmression: biCopmression.readUInt16LE(0),\n        _biCopmression: biCopmression,\n        biSizeImage: biSizeImage.readUInt16LE(0),\n        _biSizeImage: biSizeImage,\n        biXPixPerMeter: biXPixPerMeter.readUInt16LE(0),\n        _biXPixPerMeter: biXPixPerMeter,\n        biYPixPerMeter: biYPixPerMeter.readUInt16LE(0),\n        _biYPixPerMeter: biYPixPerMeter,\n        biClrUsed: biClrUsed.readUInt16LE(0),\n        _biClrUsed: biClrUsed,\n        biCirImportant: biCirImportant.readUInt16LE(0),\n        _biCirImportant: biCirImportant\n    };\n};\nBitmap.prototype.readCoreHeaderWINDOWS_V4 = function() {\n    throw new Error(\"not yet impl\");\n    var bV4Width = this.read(this.buffer, 0x12, 4);\n    var bV4Height = this.read(this.buffer, 0x16, 4);\n    var bV4Planes = this.read(this.buffer, 0x1a, 2);\n    var bV4BitCount = this.read(this.buffer, 0x1c, 2);\n    var bV4Compression = this.read(this.buffer, 0x1e, 4);\n    var bV4SizeImage = this.read(this.buffer, 0x22, 4);\n    var bV4XPelsPerMeter = this.read(this.buffer, 0x26, 4);\n    var bV4YPelsPerMeter = this.read(this.buffer, 0x2a, 4);\n    var bV4ClrUsed = this.read(this.buffer, 0x2e, 4);\n    var bV4ClrImportant = this.read(this.buffer, 0x32, 4);\n    var bV4RedMask = this.read(this.buffer, 0x36, 4);\n    var bV4GreenMask = this.read(this.buffer, 0x3a, 4);\n    var bV4BlueMask = this.read(this.buffer, 0x3e, 4);\n    var bV4AlphaMask = this.read(this.buffer, 0x42, 4);\n    var bV4CSType = this.read(this.buffer, 0x46, 4);\n    var bV4Endpoints = this.read(this.buffer, 0x6a, 36);\n    var bV4GammaRed = this.read(this.buffer, 0x6e, 4);\n    var bV4GammaGreen = this.read(this.buffer, 0x72, 4);\n    var bV4GammaBlue = this.read(this.buffer, 0x76, 4);\n    this.coreHeader = {\n        __compression__: bV4Compression.readUInt16LE(0),\n        __bitCount__: bV4BitCount.readUInt8(0),\n        __width__: bV4Width.readUInt16LE(0),\n        __height__: bV4Height.readUInt16LE(0),\n        bV4Width: bV4Width.readUInt16LE(0),\n        _bV4Width: bV4Width,\n        bV4Height: bV4Height.readUInt16LE(0),\n        _bV4Height: bV4Height,\n        bV4Planes: bV4Planes.readUInt8(0),\n        _bV4Planes: bV4Planes,\n        bV4BitCount: bV4BitCount.readUInt8(0),\n        _bV4BitCount: bV4BitCount,\n        bV4Compression: bV4Compression.readUInt16LE(0),\n        _bV4Compression: bV4Compression,\n        bV4SizeImage: bV4SizeImage.readUInt16LE(0),\n        _bV4SizeImage: bV4SizeImage,\n        bV4XPelsPerMeter: bV4XPelsPerMeter.readUInt16LE(0),\n        _bV4XPelsPerMeter: bV4XPelsPerMeter,\n        bV4YPelsPerMeter: bV4YPelsPerMeter.readUInt16LE(0),\n        _bV4YPelsPerMeter: bV4YPelsPerMeter,\n        bV4ClrUsed: bV4ClrUsed.readUInt16LE(0),\n        _bV4ClrUsed: bV4ClrUsed,\n        bV4ClrImportant: bV4ClrImportant.readUInt16LE(0),\n        _bV4ClrImportant: bV4ClrImportant,\n        bV4RedMask: bV4RedMask.readUInt16LE(0),\n        _bV4RedMask: bV4RedMask,\n        bV4GreenMask: bV4GreenMask.readUInt16LE(0),\n        _bV4GreenMask: bV4GreenMask,\n        bV4BlueMask: bV4BlueMask.readUInt16LE(0),\n        _bV4BlueMask: bV4BlueMask,\n        bV4AlphaMask: bV4AlphaMask.readUInt16LE(0),\n        _bV4AlphaMask: bV4AlphaMask,\n        bV4CSType: bV4CSType.readUInt16LE(0),\n        _bV4CSType: bV4CSType,\n        bV4Endpoints: null,\n        _bV4Endpoints: bV4Endpoints,\n        bV4GammaRed: bV4GammaRed.readUInt16LE(0),\n        _bV4GammaRed: bV4GammaRed,\n        bV4GammaGreen: bV4GammaGreen.readUInt16LE(0),\n        _bV4GammaGreen: bV4GammaGreen,\n        bV4GammaBlue: bV4GammaBlue.readUInt16LE(0),\n        _bV4GammaBlue: bV4GammaBlue\n    };\n};\nBitmap.prototype.readCoreHeaderWINDOWS_V5 = function() {\n    throw new Error(\"not yet impl\");\n    var bV5Width = this.read(this.buffer, 0x12, 4);\n    var bV5Height = this.read(this.buffer, 0x16, 4);\n    var bV5Planes = this.read(this.buffer, 0x1a, 2);\n    var bV5BitCount = this.read(this.buffer, 0x1c, 2);\n    var bV5Compression = this.read(this.buffer, 0x1e, 4);\n    var bV5SizeImage = this.read(this.buffer, 0x22, 4);\n    var bV5XPelsPerMeter = this.read(this.buffer, 0x26, 4);\n    var bV5YPelsPerMeter = this.read(this.buffer, 0x2a, 4);\n    var bV5ClrUsed = this.read(this.buffer, 0x2e, 4);\n    var bV5ClrImportant = this.read(this.buffer, 0x32, 4);\n    var bV5RedMask = this.read(this.buffer, 0x36, 4);\n    var bV5GreenMask = this.read(this.buffer, 0x3a, 4);\n    var bV5BlueMask = this.read(this.buffer, 0x3e, 4);\n    var bV5AlphaMask = this.read(this.buffer, 0x42, 4);\n    var bV5CSType = this.read(this.buffer, 0x46, 4);\n    var bV5Endpoints = this.read(this.buffer, 0x6a, 36);\n    var bV5GammaRed = this.read(this.buffer, 0x6e, 4);\n    var bV5GammaGreen = this.read(this.buffer, 0x72, 4);\n    var bV5GammaBlue = this.read(this.buffer, 0x76, 4);\n    var bV5Intent = this.read(this.buffer, 0x7a, 4);\n    var bV5ProfileData = this.read(this.buffer, 0x7e, 4);\n    var bV5ProfileSize = this.read(this.buffer, 0x82, 4);\n    var bV5Reserved = this.read(this.buffer, 0x86, 4);\n    this.coreHeader = {\n        __compression__: bV5Compression.readUInt16LE(0),\n        __bitCount__: bV5BitCount.readUInt8(0),\n        __width__: bV5Width.readUInt16LE(0),\n        __height__: bV5Height.readUInt16LE(0),\n        bV5Width: bV5Width.readUInt16LE(0),\n        _bV5Width: bV5Width,\n        bV5Height: bV5Height.readUInt16LE(0),\n        _bV5Height: bV5Height,\n        bV5Planes: bV5Planes.readUInt8(0),\n        _bV5Planes: bV5Planes,\n        bV5BitCount: bV5BitCount.readUInt8(0),\n        _bV5BitCount: bV5BitCount,\n        bV5Compression: bV5Compression.readUInt16LE(0),\n        _bV5Compression: bV5Compression,\n        bV5SizeImage: bV5SizeImage.readUInt16LE(0),\n        _bV5SizeImage: bV5SizeImage,\n        bV5XPelsPerMeter: bV5XPelsPerMeter.readUInt16LE(0),\n        _bV5XPelsPerMeter: bV5XPelsPerMeter,\n        bV5YPelsPerMeter: bV5YPelsPerMeter.readUInt16LE(0),\n        _bV5YPelsPerMeter: bV5YPelsPerMeter,\n        bV5ClrUsed: bV5ClrUsed.readUInt16LE(0),\n        _bV5ClrUsed: bV5ClrUsed,\n        bV5ClrImportant: bV5ClrImportant.readUInt16LE(0),\n        _bV5ClrImportant: bV5ClrImportant,\n        bV5RedMask: bV5RedMask.readUInt16LE(0),\n        _bV5RedMask: bV5RedMask,\n        bV5GreenMask: bV5GreenMask.readUInt16LE(0),\n        _bV5GreenMask: bV5GreenMask,\n        bV5BlueMask: bV5BlueMask.readUInt16LE(0),\n        _bV5BlueMask: bV5BlueMask,\n        bV5AlphaMask: bV5AlphaMask.readUInt16LE(0),\n        _bV5AlphaMask: bV5AlphaMask,\n        bV5CSType: bV5CSType.readUInt16LE(0),\n        _bV5CSType: bV5CSType,\n        bV5Endpoints: null,\n        _bV5Endpoints: bV5Endpoints,\n        bV5GammaRed: bV5GammaRed.readUInt16LE(0),\n        _bV5GammaRed: bV5GammaRed,\n        bV5GammaGreen: bV5GammaGreen.readUInt16LE(0),\n        _bV5GammaGreen: bV5GammaGreen,\n        bV5GammaBlue: bV5GammaBlue.readUInt16LE(0),\n        _bV5GammaBlue: bV5GammaBlue,\n        bV5Intent: bV5Intent.readUInt16LE(0),\n        _bV5Intent: bV5Intent,\n        bV5ProfileData: bV5ProfileData.readUInt16LE(0),\n        _bV5ProfileData: bV5ProfileData,\n        bV5ProfileSize: bV5ProfileSize.readUInt16LE(0),\n        _bV5ProfileSize: bV5ProfileSize,\n        bV5Reserved: 0,\n        _bV5Reserved: bV5Reserved\n    };\n};\nBitmap.prototype.readCoreHeaderOS2_V1 = function() {\n    throw new Error(\"not yet impl\");\n    var bcWidth = this.read(this.buffer, 0x12, 2);\n    var bcHeight = this.read(this.buffer, 0x14, 2);\n    var bcPlanes = this.read(this.buffer, 0x16, 2);\n    var bcBitCount = this.read(this.buffer, 0x18, 2);\n    this.coreHeader = {\n        __compression__: 0,\n        __bitCount__: bcBitCount.readUInt8(0),\n        __width__: bcWidth.readUInt8(0),\n        __height__: bcHeight.readUInt8(0),\n        bcWidth: bcWidth.readUInt8(0),\n        _bcWidth: bcWidth,\n        bcHeight: bcHeight.readUInt8(0),\n        _bcHeight: bcHeight,\n        bcPlanes: bcPlanes.readUInt8(0),\n        _bcPlanes: bcPlanes,\n        bcBitCount: bcBitCount.readUInt8(0),\n        _bcBitCount: bcBitCount\n    };\n};\nBitmap.prototype.readCoreHeaderOS2_V2 = function() {\n    throw new Error(\"not yet impl\");\n    var cx = this.read(this.buffer, 0x12, 4);\n    var cy = this.read(this.buffer, 0x16, 4);\n    var cPlanes = this.read(this.buffer, 0x1a, 2);\n    var cBitCount = this.read(this.buffer, 0x1c, 2);\n    var ulCompression = this.read(this.buffer, 0x1e, 4);\n    var cbImage = this.read(this.buffer, 0x22, 4);\n    var cxResolution = this.read(this.buffer, 0x26, 4);\n    var cyResolution = this.read(this.buffer, 0x2a, 4);\n    var cclrUsed = this.read(this.buffer, 0x2e, 4);\n    var cclrImportant = this.read(this.buffer, 0x32, 4);\n    var usUnits = this.read(this.buffer, 0x36, 2);\n    var usReserved = this.read(this.buffer, 0x38, 2);\n    var usRecording = this.read(this.buffer, 0x3a, 2);\n    var usRendering = this.read(this.buffer, 0x3c, 2);\n    var cSize1 = this.read(this.buffer, 0x3e, 4);\n    var cSize2 = this.read(this.buffer, 0x42, 4);\n    var ulColorEncoding = this.read(this.buffer, 0x46, 4);\n    var ulIdentifier = this.read(this.buffer, 0x4a, 4);\n    this.coreHeader = {\n        __compression__: ulCompression.readUInt16LE(0),\n        __bitCount__: cBitCount.readUInt8(0),\n        __width__: cx.readUInt16LE(0),\n        __height__: cy.readUInt16LE(0),\n        cx: cx.readUInt16LE(0),\n        _cx: cx,\n        cy: cy.readUInt16LE(0),\n        _cy: cy,\n        cPlanes: cPlanes.readUInt8(0),\n        _cPlanes: cPlanes,\n        cBitCount: cBitCount.readUInt8(0),\n        _cBitCount: cBitCount,\n        ulCompression: ulCompression.readUInt16LE(0),\n        _ulCompression: ulCompression,\n        cbImage: cbImage.readUInt16LE(0),\n        _cbImage: cbImage,\n        cxResolution: cxResolution.readUInt16LE(0),\n        _cxResolution: cxResolution,\n        cyResolution: cyResolution.readUInt16LE(0),\n        _cyResolution: cyResolution,\n        cclrUsed: cclrUsed.readUInt16LE(0),\n        _cclrUsed: cclrUsed,\n        cclrImportant: cclrImportant.readUInt16LE(0),\n        _cclrImportant: cclrImportant,\n        usUnits: usUnits.readUInt8(0),\n        _usUnits: usUnits,\n        usReserved: usReserved.readUInt8(0),\n        _usReserved: usReserved,\n        usRecording: usRecording.readUInt8(0),\n        _usRecording: usRecording,\n        usRendering: usRendering.readUInt8(0),\n        _usRendering: usRendering,\n        cSize1: cSize1.readUInt16LE(0),\n        _cSize1: cSize1,\n        cSize2: cSize2.readUInt16LE(0),\n        _cSize1: cSize1,\n        ulColorEncoding: ulColorEncoding.readUInt16LE(0),\n        _ulColorEncoding: ulColorEncoding,\n        ulIdentifier: ulIdentifier.readUInt16LE(0),\n        _ulIdentifier: ulIdentifier\n    };\n};\nBitmap.prototype.readColorPalette = function() {\n    var bitCount = this.coreHeader.__bitCount__;\n    if (this.BITCOUNT_16bit == bitCount) {\n        return;\n    }\n    if (this.BITCOUNT_24bit == bitCount) {\n        return;\n    }\n    if (this.BITCOUNT_32bit == bitCount) {\n        return;\n    }\n    var coreType = this.infoHeader.readUInt16LE(0);\n    switch(coreType){\n        case this.BITMAPCOREHEADER:\n            return this.readColorPalette_RGBTRIPLE(bitCount, 0x1a);\n        case this.BITMAPINFOHEADER2:\n            return this.readColorPalette_RGBTRIPLE(bitCount, 0x4e);\n        case this.BITMAPV4HEADER:\n            return this.readColorPalette_RGBQUAD(bitCount, 0x7a);\n        case this.BITMAPV5HEADER:\n            return this.readColorPalette_RGBQUAD(bitCount, 0x8a);\n        case this.BITMAPINFOHEADER:\n            return this.readColorPalette_RGBQUAD(bitCount, 0x36);\n        default:\n            throw new Error(\"unknown colorPalette: \" + coreType + \",\" + bitCount);\n    }\n};\nBitmap.prototype.readColorPalette_RGBTRIPLE = function(bitCount, startPos) {\n    throw new Error(\"not yet impl\");\n};\nBitmap.prototype.readColorPalette_RGBQUAD = function(bitCount, startPos) {\n    if (this.BITCOUNT_2 == bitCount) {\n        return this.readRGBQUAD(1 << this.BITCOUNT_2, startPos);\n    }\n    if (this.BITCOUNT_16 == bitCount) {\n        return this.readRGBQUAD(1 << this.BITCOUNT_16, startPos);\n    }\n    if (this.BITCOUNT_256 == bitCount) {\n        return this.readRGBQUAD(1 << this.BITCOUNT_256, startPos);\n    }\n    throw new Error(\"unknown bitCount: \" + bitCount);\n};\nBitmap.prototype.readRGBQUAD = function(count, startPos) {\n    var palette = [];\n    for(var i = startPos, len = startPos + 4 * count; i < len; i += 4){\n        palette.push({\n            rgbBlue: this.read(this.buffer, i, 1).readUInt8(0),\n            rgbGreen: this.read(this.buffer, i + 1, 1).readUInt8(0),\n            rgbRed: this.read(this.buffer, i + 2, 1).readUInt8(0),\n            rgbReserved: this.read(this.buffer, i + 3, 1).readUInt8(0)\n        });\n    }\n    this.colorPalette = palette;\n};\nBitmap.prototype.initDataPos = function() {\n    var bitCount = this.coreHeader.__bitCount__;\n    var hasPalette = true;\n    if (this.BITCOUNT_16bit == bitCount) {\n        hasPalette = true;\n    }\n    if (this.BITCOUNT_24bit == bitCount) {\n        hasPalette = true;\n    }\n    if (this.BITCOUNT_32bit == bitCount) {\n        hasPalette = true;\n    }\n    var coreType = this.infoHeader.readUInt16LE(0);\n    switch(coreType){\n        case this.BITMAPCOREHEADER:\n            this.dataPos = 0x1a;\n            if (hasPalette) {\n                this.dataPos = this.dataPos + 3 * (1 << bitCount);\n            }\n            break;\n        case this.BITMAPINFOHEADER2:\n            this.dataPos = 0x4e;\n            if (hasPalette) {\n                this.dataPos = this.dataPos + 3 * (1 << bitCount);\n            }\n            break;\n        case this.BITMAPV4HEADER:\n            this.dataPos = 0x7a;\n            if (hasPalette) {\n                this.dataPos = this.dataPos + 4 * (1 << bitCount);\n            }\n            break;\n        case this.BITMAPV5HEADER:\n            this.dataPos = 0x8a;\n            if (hasPalette) {\n                this.dataPos = this.dataPos + 4 * (1 << bitCount);\n            }\n        case this.BITMAPINFOHEADER:\n            this.dataPos = 0x36;\n            if (hasPalette) {\n                this.dataPos = this.dataPos + 4 * (1 << bitCount);\n            }\n            break;\n        default:\n            throw new Error(\"unknown colorPalette: \" + coreType + \",\" + bitCount);\n    }\n};\nBitmap.prototype.mapRGBA = function(r, g, b, a) {\n    var hex = [];\n    var padHex = function(value) {\n        var h = value.toString(16);\n        if (value < 0x0f) {\n            return \"0\" + h;\n        }\n        return h;\n    };\n    hex.push(padHex(r));\n    hex.push(padHex(g));\n    hex.push(padHex(b));\n    return \"#\" + hex.join(\"\");\n};\nBitmap.prototype.mapColor = function(bmpBuf, bitCount) {\n    var b, g, r, a;\n    var length = bmpBuf.length;\n    var colorData = [];\n    if (this.BITCOUNT_2 == bitCount) {\n        for(var i = 0; i < length; ++i){\n            var paletteValue = bmpBuf[i];\n            var bin = paletteValue.toString(2);\n            bin = new Array(8 - bin.length).join(\"0\") + bin;\n            for(var j = 0; j < bin.length; ++j){\n                var paletteIndex = parseInt(bin.substring(j, j + 1), 10);\n                var palette = this.colorPalette[paletteIndex];\n                colorData.push(this.mapRGBA(palette.rgbRed, palette.rgbGreen, palette.rgbBlue, -1));\n            }\n        }\n        return colorData;\n    }\n    if (this.BITCOUNT_16 == bitCount) {\n        for(var i = 0; i < length; i += 2){\n            var paletteHigh = bmpBuf.readUInt8(i);\n            var paletteLow = bmpBuf.readUInt8(i + 1);\n            var indexes = [\n                paletteHigh,\n                paletteLow\n            ];\n            indexes.forEach(function(paletteIndex) {\n                var palette = this.colorPalette[paletteIndex];\n                colorData.push(this.mapRGBA(palette.rgbRed, palette.rgbGreen, palette.rgbBlue, -1));\n            });\n        }\n        return colorData;\n    }\n    if (this.BITCOUNT_256 == bitCount) {\n        for(var i = 0; i < length; ++i){\n            var paletteIndex = bmpBuf.readUInt16LE(i);\n            var palette = this.colorPalette[paletteIndex];\n            colorData.push(this.mapRGBA(palette.rgbRed, palette.rgbGreen, palette.rgbBlue, -1));\n        }\n        return colorData;\n    }\n    if (this.BITCOUNT_16bit == bitCount) {\n        for(var i = 0; i < length; i += 3){\n            b = bmpBuf[i];\n            g = bmpBuf[i + 1];\n            r = bmpBuf[i + 2];\n            colorData.push(this.mapRGBA(r, g, b, -1));\n        }\n        return colorData;\n    }\n    if (this.BITCOUNT_24bit == bitCount) {\n        for(var i = 0; i < length; i += 3){\n            b = bmpBuf[i];\n            g = bmpBuf[i + 1];\n            r = bmpBuf[i + 2];\n            colorData.push(this.mapRGBA(r, g, b, -1));\n        }\n        return colorData;\n    }\n    if (this.BITCOUNT_32bit == bitCount) {\n        for(var i = 0; i < length; i += 4){\n            b = bmpBuf[i];\n            g = bmpBuf[i + 1];\n            r = bmpBuf[i + 2];\n            a = bmpBuf[i + 3];\n            colorData.push(this.mapRGBA(r, g, b, a));\n        }\n        return colorData;\n    }\n    throw new Error(\"unknown bitCount: \" + bitCount);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-bitmap/lib/bitmap.js\n");

/***/ })

};
;