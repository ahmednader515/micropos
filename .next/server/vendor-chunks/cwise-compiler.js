"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cwise-compiler";
exports.ids = ["vendor-chunks/cwise-compiler"];
exports.modules = {

/***/ "(ssr)/./node_modules/cwise-compiler/compiler.js":
/*!*************************************************!*\
  !*** ./node_modules/cwise-compiler/compiler.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar createThunk = __webpack_require__(/*! ./lib/thunk.js */ \"(ssr)/./node_modules/cwise-compiler/lib/thunk.js\");\nfunction Procedure() {\n    this.argTypes = [];\n    this.shimArgs = [];\n    this.arrayArgs = [];\n    this.arrayBlockIndices = [];\n    this.scalarArgs = [];\n    this.offsetArgs = [];\n    this.offsetArgIndex = [];\n    this.indexArgs = [];\n    this.shapeArgs = [];\n    this.funcName = \"\";\n    this.pre = null;\n    this.body = null;\n    this.post = null;\n    this.debug = false;\n}\nfunction compileCwise(user_args) {\n    //Create procedure\n    var proc = new Procedure();\n    //Parse blocks\n    proc.pre = user_args.pre;\n    proc.body = user_args.body;\n    proc.post = user_args.post;\n    //Parse arguments\n    var proc_args = user_args.args.slice(0);\n    proc.argTypes = proc_args;\n    for(var i = 0; i < proc_args.length; ++i){\n        var arg_type = proc_args[i];\n        if (arg_type === \"array\" || typeof arg_type === \"object\" && arg_type.blockIndices) {\n            proc.argTypes[i] = \"array\";\n            proc.arrayArgs.push(i);\n            proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0);\n            proc.shimArgs.push(\"array\" + i);\n            if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n                throw new Error(\"cwise: pre() block may not reference array args\");\n            }\n            if (i < proc.post.args.length && proc.post.args[i].count > 0) {\n                throw new Error(\"cwise: post() block may not reference array args\");\n            }\n        } else if (arg_type === \"scalar\") {\n            proc.scalarArgs.push(i);\n            proc.shimArgs.push(\"scalar\" + i);\n        } else if (arg_type === \"index\") {\n            proc.indexArgs.push(i);\n            if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n                throw new Error(\"cwise: pre() block may not reference array index\");\n            }\n            if (i < proc.body.args.length && proc.body.args[i].lvalue) {\n                throw new Error(\"cwise: body() block may not write to array index\");\n            }\n            if (i < proc.post.args.length && proc.post.args[i].count > 0) {\n                throw new Error(\"cwise: post() block may not reference array index\");\n            }\n        } else if (arg_type === \"shape\") {\n            proc.shapeArgs.push(i);\n            if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n                throw new Error(\"cwise: pre() block may not write to array shape\");\n            }\n            if (i < proc.body.args.length && proc.body.args[i].lvalue) {\n                throw new Error(\"cwise: body() block may not write to array shape\");\n            }\n            if (i < proc.post.args.length && proc.post.args[i].lvalue) {\n                throw new Error(\"cwise: post() block may not write to array shape\");\n            }\n        } else if (typeof arg_type === \"object\" && arg_type.offset) {\n            proc.argTypes[i] = \"offset\";\n            proc.offsetArgs.push({\n                array: arg_type.array,\n                offset: arg_type.offset\n            });\n            proc.offsetArgIndex.push(i);\n        } else {\n            throw new Error(\"cwise: Unknown argument type \" + proc_args[i]);\n        }\n    }\n    //Make sure at least one array argument was specified\n    if (proc.arrayArgs.length <= 0) {\n        throw new Error(\"cwise: No array arguments specified\");\n    }\n    //Make sure arguments are correct\n    if (proc.pre.args.length > proc_args.length) {\n        throw new Error(\"cwise: Too many arguments in pre() block\");\n    }\n    if (proc.body.args.length > proc_args.length) {\n        throw new Error(\"cwise: Too many arguments in body() block\");\n    }\n    if (proc.post.args.length > proc_args.length) {\n        throw new Error(\"cwise: Too many arguments in post() block\");\n    }\n    //Check debug flag\n    proc.debug = !!user_args.printCode || !!user_args.debug;\n    //Retrieve name\n    proc.funcName = user_args.funcName || \"cwise\";\n    //Read in block size\n    proc.blockSize = user_args.blockSize || 64;\n    return createThunk(proc);\n}\nmodule.exports = compileCwise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cwise-compiler/compiler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cwise-compiler/lib/compile.js":
/*!****************************************************!*\
  !*** ./node_modules/cwise-compiler/lib/compile.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar uniq = __webpack_require__(/*! uniq */ \"(ssr)/./node_modules/uniq/uniq.js\");\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\nfunction innerFill(order, proc, body) {\n    var dimension = order.length, nargs = proc.arrayArgs.length, has_index = proc.indexArgs.length > 0, code = [], vars = [], idx = 0, pidx = 0, i, j;\n    for(i = 0; i < dimension; ++i){\n        vars.push([\n            \"i\",\n            i,\n            \"=0\"\n        ].join(\"\"));\n    }\n    //Compute scan deltas\n    for(j = 0; j < nargs; ++j){\n        for(i = 0; i < dimension; ++i){\n            pidx = idx;\n            idx = order[i];\n            if (i === 0) {\n                vars.push([\n                    \"d\",\n                    j,\n                    \"s\",\n                    i,\n                    \"=t\",\n                    j,\n                    \"p\",\n                    idx\n                ].join(\"\"));\n            } else {\n                vars.push([\n                    \"d\",\n                    j,\n                    \"s\",\n                    i,\n                    \"=(t\",\n                    j,\n                    \"p\",\n                    idx,\n                    \"-s\",\n                    pidx,\n                    \"*t\",\n                    j,\n                    \"p\",\n                    pidx,\n                    \")\"\n                ].join(\"\"));\n            }\n        }\n    }\n    if (vars.length > 0) {\n        code.push(\"var \" + vars.join(\",\"));\n    }\n    //Scan loop\n    for(i = dimension - 1; i >= 0; --i){\n        idx = order[i];\n        code.push([\n            \"for(i\",\n            i,\n            \"=0;i\",\n            i,\n            \"<s\",\n            idx,\n            \";++i\",\n            i,\n            \"){\"\n        ].join(\"\"));\n    }\n    //Push body of inner loop\n    code.push(body);\n    //Advance scan pointers\n    for(i = 0; i < dimension; ++i){\n        pidx = idx;\n        idx = order[i];\n        for(j = 0; j < nargs; ++j){\n            code.push([\n                \"p\",\n                j,\n                \"+=d\",\n                j,\n                \"s\",\n                i\n            ].join(\"\"));\n        }\n        if (has_index) {\n            if (i > 0) {\n                code.push([\n                    \"index[\",\n                    pidx,\n                    \"]-=s\",\n                    pidx\n                ].join(\"\"));\n            }\n            code.push([\n                \"++index[\",\n                idx,\n                \"]\"\n            ].join(\"\"));\n        }\n        code.push(\"}\");\n    }\n    return code.join(\"\\n\");\n}\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\nfunction outerFill(matched, order, proc, body) {\n    var dimension = order.length, nargs = proc.arrayArgs.length, blockSize = proc.blockSize, has_index = proc.indexArgs.length > 0, code = [];\n    for(var i = 0; i < nargs; ++i){\n        code.push([\n            \"var offset\",\n            i,\n            \"=p\",\n            i\n        ].join(\"\"));\n    }\n    //Generate loops for unmatched dimensions\n    // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\n    // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\n    for(var i = matched; i < dimension; ++i){\n        code.push([\n            \"for(var j\" + i + \"=SS[\",\n            order[i],\n            \"]|0;j\",\n            i,\n            \">0;){\"\n        ].join(\"\")) // Iterate back to front\n        ;\n        code.push([\n            \"if(j\",\n            i,\n            \"<\",\n            blockSize,\n            \"){\"\n        ].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\n        ;\n        code.push([\n            \"s\",\n            order[i],\n            \"=j\",\n            i\n        ].join(\"\"));\n        code.push([\n            \"j\",\n            i,\n            \"=0\"\n        ].join(\"\"));\n        code.push([\n            \"}else{s\",\n            order[i],\n            \"=\",\n            blockSize\n        ].join(\"\"));\n        code.push([\n            \"j\",\n            i,\n            \"-=\",\n            blockSize,\n            \"}\"\n        ].join(\"\"));\n        if (has_index) {\n            code.push([\n                \"index[\",\n                order[i],\n                \"]=j\",\n                i\n            ].join(\"\"));\n        }\n    }\n    for(var i = 0; i < nargs; ++i){\n        var indexStr = [\n            \"offset\" + i\n        ];\n        for(var j = matched; j < dimension; ++j){\n            indexStr.push([\n                \"j\",\n                j,\n                \"*t\",\n                i,\n                \"p\",\n                order[j]\n            ].join(\"\"));\n        }\n        code.push([\n            \"p\",\n            i,\n            \"=(\",\n            indexStr.join(\"+\"),\n            \")\"\n        ].join(\"\"));\n    }\n    code.push(innerFill(order, proc, body));\n    for(var i = matched; i < dimension; ++i){\n        code.push(\"}\");\n    }\n    return code.join(\"\\n\");\n}\n//Count the number of compatible inner orders\n// This is the length of the longest common prefix of the arrays in orders.\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\nfunction countMatches(orders) {\n    var matched = 0, dimension = orders[0].length;\n    while(matched < dimension){\n        for(var j = 1; j < orders.length; ++j){\n            if (orders[j][matched] !== orders[0][matched]) {\n                return matched;\n            }\n        }\n        ++matched;\n    }\n    return matched;\n}\n//Processes a block according to the given data types\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\nfunction processBlock(block, proc, dtypes) {\n    var code = block.body;\n    var pre = [];\n    var post = [];\n    for(var i = 0; i < block.args.length; ++i){\n        var carg = block.args[i];\n        if (carg.count <= 0) {\n            continue;\n        }\n        var re = new RegExp(carg.name, \"g\");\n        var ptrStr = \"\";\n        var arrNum = proc.arrayArgs.indexOf(i);\n        switch(proc.argTypes[i]){\n            case \"offset\":\n                var offArgIndex = proc.offsetArgIndex.indexOf(i);\n                var offArg = proc.offsetArgs[offArgIndex];\n                arrNum = offArg.array;\n                ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\n                ;\n            case \"array\":\n                ptrStr = \"p\" + arrNum + ptrStr;\n                var localStr = \"l\" + i;\n                var arrStr = \"a\" + arrNum;\n                if (proc.arrayBlockIndices[arrNum] === 0) {\n                    if (carg.count === 1) {\n                        if (dtypes[arrNum] === \"generic\") {\n                            if (carg.lvalue) {\n                                pre.push([\n                                    \"var \",\n                                    localStr,\n                                    \"=\",\n                                    arrStr,\n                                    \".get(\",\n                                    ptrStr,\n                                    \")\"\n                                ].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n                                ;\n                                code = code.replace(re, localStr);\n                                post.push([\n                                    arrStr,\n                                    \".set(\",\n                                    ptrStr,\n                                    \",\",\n                                    localStr,\n                                    \")\"\n                                ].join(\"\"));\n                            } else {\n                                code = code.replace(re, [\n                                    arrStr,\n                                    \".get(\",\n                                    ptrStr,\n                                    \")\"\n                                ].join(\"\"));\n                            }\n                        } else {\n                            code = code.replace(re, [\n                                arrStr,\n                                \"[\",\n                                ptrStr,\n                                \"]\"\n                            ].join(\"\"));\n                        }\n                    } else if (dtypes[arrNum] === \"generic\") {\n                        pre.push([\n                            \"var \",\n                            localStr,\n                            \"=\",\n                            arrStr,\n                            \".get(\",\n                            ptrStr,\n                            \")\"\n                        ].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n                        ;\n                        code = code.replace(re, localStr);\n                        if (carg.lvalue) {\n                            post.push([\n                                arrStr,\n                                \".set(\",\n                                ptrStr,\n                                \",\",\n                                localStr,\n                                \")\"\n                            ].join(\"\"));\n                        }\n                    } else {\n                        pre.push([\n                            \"var \",\n                            localStr,\n                            \"=\",\n                            arrStr,\n                            \"[\",\n                            ptrStr,\n                            \"]\"\n                        ].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n                        ;\n                        code = code.replace(re, localStr);\n                        if (carg.lvalue) {\n                            post.push([\n                                arrStr,\n                                \"[\",\n                                ptrStr,\n                                \"]=\",\n                                localStr\n                            ].join(\"\"));\n                        }\n                    }\n                } else {\n                    var reStrArr = [\n                        carg.name\n                    ], ptrStrArr = [\n                        ptrStr\n                    ];\n                    for(var j = 0; j < Math.abs(proc.arrayBlockIndices[arrNum]); j++){\n                        reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\");\n                        ptrStrArr.push(\"$\" + (j + 1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\n                        ;\n                    }\n                    re = new RegExp(reStrArr.join(\"\"), \"g\");\n                    ptrStr = ptrStrArr.join(\"+\");\n                    if (dtypes[arrNum] === \"generic\") {\n                        /*if(carg.lvalue) {\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n              code = code.replace(re, localStr)\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            } else {\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n            }*/ throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\");\n                    } else {\n                        // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\n                        code = code.replace(re, [\n                            arrStr,\n                            \"[\",\n                            ptrStr,\n                            \"]\"\n                        ].join(\"\"));\n                    }\n                }\n                break;\n            case \"scalar\":\n                code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i));\n                break;\n            case \"index\":\n                code = code.replace(re, \"index\");\n                break;\n            case \"shape\":\n                code = code.replace(re, \"shape\");\n                break;\n        }\n    }\n    return [\n        pre.join(\"\\n\"),\n        code,\n        post.join(\"\\n\")\n    ].join(\"\\n\").trim();\n}\nfunction typeSummary(dtypes) {\n    var summary = new Array(dtypes.length);\n    var allEqual = true;\n    for(var i = 0; i < dtypes.length; ++i){\n        var t = dtypes[i];\n        var digits = t.match(/\\d+/);\n        if (!digits) {\n            digits = \"\";\n        } else {\n            digits = digits[0];\n        }\n        if (t.charAt(0) === 0) {\n            summary[i] = \"u\" + t.charAt(1) + digits;\n        } else {\n            summary[i] = t.charAt(0) + digits;\n        }\n        if (i > 0) {\n            allEqual = allEqual && summary[i] === summary[i - 1];\n        }\n    }\n    if (allEqual) {\n        return summary[0];\n    }\n    return summary.join(\"\");\n}\n//Generates a cwise operator\nfunction generateCWiseOp(proc, typesig) {\n    //Compute dimension\n    // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\n    var dimension = typesig[1].length - Math.abs(proc.arrayBlockIndices[0]) | 0;\n    var orders = new Array(proc.arrayArgs.length);\n    var dtypes = new Array(proc.arrayArgs.length);\n    for(var i = 0; i < proc.arrayArgs.length; ++i){\n        dtypes[i] = typesig[2 * i];\n        orders[i] = typesig[2 * i + 1];\n    }\n    //Determine where block and loop indices start and end\n    var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\n    ;\n    var loopBegin = [], loopEnd = [] // These indices are iterated over\n    ;\n    var loopOrders = [] // orders restricted to the loop indices\n    ;\n    for(var i = 0; i < proc.arrayArgs.length; ++i){\n        if (proc.arrayBlockIndices[i] < 0) {\n            loopBegin.push(0);\n            loopEnd.push(dimension);\n            blockBegin.push(dimension);\n            blockEnd.push(dimension + proc.arrayBlockIndices[i]);\n        } else {\n            loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\n            ;\n            loopEnd.push(proc.arrayBlockIndices[i] + dimension);\n            blockBegin.push(0);\n            blockEnd.push(proc.arrayBlockIndices[i]);\n        }\n        var newOrder = [];\n        for(var j = 0; j < orders[i].length; j++){\n            if (loopBegin[i] <= orders[i][j] && orders[i][j] < loopEnd[i]) {\n                newOrder.push(orders[i][j] - loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\n                ;\n            }\n        }\n        loopOrders.push(newOrder);\n    }\n    //First create arguments for procedure\n    var arglist = [\n        \"SS\"\n    ] // SS is the overall shape over which we iterate\n    ;\n    var code = [\n        \"'use strict'\"\n    ];\n    var vars = [];\n    for(var j = 0; j < dimension; ++j){\n        vars.push([\n            \"s\",\n            j,\n            \"=SS[\",\n            j,\n            \"]\"\n        ].join(\"\")) // The limits for each dimension.\n        ;\n    }\n    for(var i = 0; i < proc.arrayArgs.length; ++i){\n        arglist.push(\"a\" + i) // Actual data array\n        ;\n        arglist.push(\"t\" + i) // Strides\n        ;\n        arglist.push(\"p\" + i) // Offset in the array at which the data starts (also used for iterating over the data)\n        ;\n        for(var j = 0; j < dimension; ++j){\n            vars.push([\n                \"t\",\n                i,\n                \"p\",\n                j,\n                \"=t\",\n                i,\n                \"[\",\n                loopBegin[i] + j,\n                \"]\"\n            ].join(\"\"));\n        }\n        for(var j = 0; j < Math.abs(proc.arrayBlockIndices[i]); ++j){\n            vars.push([\n                \"t\",\n                i,\n                \"b\",\n                j,\n                \"=t\",\n                i,\n                \"[\",\n                blockBegin[i] + j,\n                \"]\"\n            ].join(\"\"));\n        }\n    }\n    for(var i = 0; i < proc.scalarArgs.length; ++i){\n        arglist.push(\"Y\" + i);\n    }\n    if (proc.shapeArgs.length > 0) {\n        vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\n        ;\n    }\n    if (proc.indexArgs.length > 0) {\n        // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\n        var zeros = new Array(dimension);\n        for(var i = 0; i < dimension; ++i){\n            zeros[i] = \"0\";\n        }\n        vars.push([\n            \"index=[\",\n            zeros.join(\",\"),\n            \"]\"\n        ].join(\"\"));\n    }\n    for(var i = 0; i < proc.offsetArgs.length; ++i){\n        var off_arg = proc.offsetArgs[i];\n        var init_string = [];\n        for(var j = 0; j < off_arg.offset.length; ++j){\n            if (off_arg.offset[j] === 0) {\n                continue;\n            } else if (off_arg.offset[j] === 1) {\n                init_string.push([\n                    \"t\",\n                    off_arg.array,\n                    \"p\",\n                    j\n                ].join(\"\"));\n            } else {\n                init_string.push([\n                    off_arg.offset[j],\n                    \"*t\",\n                    off_arg.array,\n                    \"p\",\n                    j\n                ].join(\"\"));\n            }\n        }\n        if (init_string.length === 0) {\n            vars.push(\"q\" + i + \"=0\");\n        } else {\n            vars.push([\n                \"q\",\n                i,\n                \"=\",\n                init_string.join(\"+\")\n            ].join(\"\"));\n        }\n    }\n    //Prepare this variables\n    var thisVars = uniq([].concat(proc.pre.thisVars).concat(proc.body.thisVars).concat(proc.post.thisVars));\n    vars = vars.concat(thisVars);\n    if (vars.length > 0) {\n        code.push(\"var \" + vars.join(\",\"));\n    }\n    for(var i = 0; i < proc.arrayArgs.length; ++i){\n        code.push(\"p\" + i + \"|=0\");\n    }\n    //Inline prelude\n    if (proc.pre.body.length > 3) {\n        code.push(processBlock(proc.pre, proc, dtypes));\n    }\n    //Process body\n    var body = processBlock(proc.body, proc, dtypes);\n    var matched = countMatches(loopOrders);\n    if (matched < dimension) {\n        code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\n        ;\n    } else {\n        code.push(innerFill(loopOrders[0], proc, body));\n    }\n    //Inline epilog\n    if (proc.post.body.length > 3) {\n        code.push(processBlock(proc.post, proc, dtypes));\n    }\n    if (proc.debug) {\n        console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\");\n    }\n    var loopName = [\n        proc.funcName || \"unnamed\",\n        \"_cwise_loop_\",\n        orders[0].join(\"s\"),\n        \"m\",\n        matched,\n        typeSummary(dtypes)\n    ].join(\"\");\n    var f = new Function([\n        \"function \",\n        loopName,\n        \"(\",\n        arglist.join(\",\"),\n        \"){\",\n        code.join(\"\\n\"),\n        \"} return \",\n        loopName\n    ].join(\"\"));\n    return f();\n}\nmodule.exports = generateCWiseOp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cwise-compiler/lib/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cwise-compiler/lib/thunk.js":
/*!**************************************************!*\
  !*** ./node_modules/cwise-compiler/lib/thunk.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// The function below is called when constructing a cwise function object, and does the following:\n// A function object is constructed which accepts as argument a compilation function and returns another function.\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\n// The compilation passed to the first function object is used for compiling new functions.\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\n// So createThunk roughly works like this:\n// function createThunk(proc) {\n//   var thunk = function(compileBound) {\n//     var CACHED = {}\n//     return function(arrays and scalars) {\n//       if (dtype and order of arrays in CACHED) {\n//         var func = CACHED[dtype and order of arrays]\n//       } else {\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\n//       }\n//       return func(arrays and scalars)\n//     }\n//   }\n//   return thunk(compile.bind1(proc))\n// }\nvar compile = __webpack_require__(/*! ./compile.js */ \"(ssr)/./node_modules/cwise-compiler/lib/compile.js\");\nfunction createThunk(proc) {\n    var code = [\n        \"'use strict'\",\n        \"var CACHED={}\"\n    ];\n    var vars = [];\n    var thunkName = proc.funcName + \"_cwise_thunk\";\n    //Build thunk\n    code.push([\n        \"return function \",\n        thunkName,\n        \"(\",\n        proc.shimArgs.join(\",\"),\n        \"){\"\n    ].join(\"\"));\n    var typesig = [];\n    var string_typesig = [];\n    var proc_args = [\n        [\n            \"array\",\n            proc.arrayArgs[0],\n            \".shape.slice(\",\n            Math.max(0, proc.arrayBlockIndices[0]),\n            proc.arrayBlockIndices[0] < 0 ? \",\" + proc.arrayBlockIndices[0] + \")\" : \")\"\n        ].join(\"\")\n    ];\n    var shapeLengthConditions = [], shapeConditions = [];\n    // Process array arguments\n    for(var i = 0; i < proc.arrayArgs.length; ++i){\n        var j = proc.arrayArgs[i];\n        vars.push([\n            \"t\",\n            j,\n            \"=array\",\n            j,\n            \".dtype,\",\n            \"r\",\n            j,\n            \"=array\",\n            j,\n            \".order\"\n        ].join(\"\"));\n        typesig.push(\"t\" + j);\n        typesig.push(\"r\" + j);\n        string_typesig.push(\"t\" + j);\n        string_typesig.push(\"r\" + j + \".join()\");\n        proc_args.push(\"array\" + j + \".data\");\n        proc_args.push(\"array\" + j + \".stride\");\n        proc_args.push(\"array\" + j + \".offset|0\");\n        if (i > 0) {\n            shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0]) - Math.abs(proc.arrayBlockIndices[i])));\n            shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0, proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0, proc.arrayBlockIndices[i]) + \"]\");\n        }\n    }\n    // Check for shape equality\n    if (proc.arrayArgs.length > 1) {\n        code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\");\n        code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\");\n        code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\");\n        code.push(\"}\");\n    }\n    // Process scalar arguments\n    for(var i = 0; i < proc.scalarArgs.length; ++i){\n        proc_args.push(\"scalar\" + proc.scalarArgs[i]);\n    }\n    // Check for cached function (and if not present, generate it)\n    vars.push([\n        \"type=[\",\n        string_typesig.join(\",\"),\n        \"].join()\"\n    ].join(\"\"));\n    vars.push(\"proc=CACHED[type]\");\n    code.push(\"var \" + vars.join(\",\"));\n    code.push([\n        \"if(!proc){\",\n        \"CACHED[type]=proc=compile([\",\n        typesig.join(\",\"),\n        \"])}\",\n        \"return proc(\",\n        proc_args.join(\",\"),\n        \")}\"\n    ].join(\"\"));\n    if (proc.debug) {\n        console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\");\n    }\n    //Compile thunk\n    var thunk = new Function(\"compile\", code.join(\"\\n\"));\n    return thunk(compile.bind(undefined, proc));\n}\nmodule.exports = createThunk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cwise-compiler/lib/thunk.js\n");

/***/ })

};
;