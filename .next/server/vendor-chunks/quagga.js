/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/quagga";
exports.ids = ["vendor-chunks/quagga"];
exports.modules = {

/***/ "(ssr)/./node_modules/quagga/lib/quagga.js":
/*!*******************************************!*\
  !*** ./node_modules/quagga/lib/quagga.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory(__webpack_require__(/*! get-pixels */ \"(ssr)/./node_modules/get-pixels/node-pixels.js\"), __webpack_require__(/*! ndarray */ \"(ssr)/./node_modules/ndarray/ndarray.js\"), __webpack_require__(/*! ndarray-linear-interpolate */ \"(ssr)/./node_modules/ndarray-linear-interpolate/interp.js\"));\n    else {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_164__, __WEBPACK_EXTERNAL_MODULE_165__, __WEBPACK_EXTERNAL_MODULE_166__) {\n    return /******/ function(modules) {\n        /******/ // The module cache\n        /******/ var installedModules = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_964__(moduleId) {\n            /******/ /******/ // Check if module is in cache\n            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;\n            /******/ /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = installedModules[moduleId] = {\n                /******/ i: moduleId,\n                /******/ l: false,\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_964__);\n            /******/ /******/ // Flag the module as loaded\n            /******/ module1.l = true;\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n        /******/ __nested_webpack_require_964__.m = modules;\n        /******/ /******/ // expose the module cache\n        /******/ __nested_webpack_require_964__.c = installedModules;\n        /******/ /******/ // identity function for calling harmony imports with the correct context\n        /******/ __nested_webpack_require_964__.i = function(value) {\n            return value;\n        };\n        /******/ /******/ // define getter function for harmony exports\n        /******/ __nested_webpack_require_964__.d = function(exports1, name, getter) {\n            /******/ if (!__nested_webpack_require_964__.o(exports1, name)) {\n                /******/ Object.defineProperty(exports1, name, {\n                    /******/ configurable: false,\n                    /******/ enumerable: true,\n                    /******/ get: getter\n                });\n            /******/ }\n        /******/ };\n        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ __nested_webpack_require_964__.n = function(module1) {\n            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {\n                return module1[\"default\"];\n            } : /******/ function getModuleExports() {\n                return module1;\n            };\n            /******/ __nested_webpack_require_964__.d(getter, \"a\", getter);\n            /******/ return getter;\n        /******/ };\n        /******/ /******/ // Object.prototype.hasOwnProperty.call\n        /******/ __nested_webpack_require_964__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n        };\n        /******/ /******/ // __webpack_public_path__\n        /******/ __nested_webpack_require_964__.p = \"/\";\n        /******/ /******/ // Load entry module and return exports\n        /******/ return __nested_webpack_require_964__(__nested_webpack_require_964__.s = 167);\n    /******/ }([\n        /* 0 */ /***/ function(module1, exports1) {\n            /**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ function isObject(value) {\n                var type = typeof value;\n                return value != null && (type == \"object\" || type == \"function\");\n            }\n            module1.exports = isObject;\n        /***/ },\n        /* 1 */ /***/ function(module1, exports1, __nested_webpack_require_4684__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _array_helper = __nested_webpack_require_4684__(3);\n            var _array_helper2 = _interopRequireDefault(_array_helper);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function BarcodeReader(config, supplements) {\n                this._row = [];\n                this.config = config || {};\n                this.supplements = supplements;\n                return this;\n            }\n            BarcodeReader.prototype._nextUnset = function(line, start) {\n                var i;\n                if (start === undefined) {\n                    start = 0;\n                }\n                for(i = start; i < line.length; i++){\n                    if (!line[i]) {\n                        return i;\n                    }\n                }\n                return line.length;\n            };\n            BarcodeReader.prototype._matchPattern = function(counter, code, maxSingleError) {\n                var i, error = 0, singleError = 0, sum = 0, modulo = 0, barWidth, count, scaled;\n                maxSingleError = maxSingleError || this.SINGLE_CODE_ERROR || 1;\n                for(i = 0; i < counter.length; i++){\n                    sum += counter[i];\n                    modulo += code[i];\n                }\n                if (sum < modulo) {\n                    return Number.MAX_VALUE;\n                }\n                barWidth = sum / modulo;\n                maxSingleError *= barWidth;\n                for(i = 0; i < counter.length; i++){\n                    count = counter[i];\n                    scaled = code[i] * barWidth;\n                    singleError = Math.abs(count - scaled) / scaled;\n                    if (singleError > maxSingleError) {\n                        return Number.MAX_VALUE;\n                    }\n                    error += singleError;\n                }\n                return error / modulo;\n            };\n            BarcodeReader.prototype._nextSet = function(line, offset) {\n                var i;\n                offset = offset || 0;\n                for(i = offset; i < line.length; i++){\n                    if (line[i]) {\n                        return i;\n                    }\n                }\n                return line.length;\n            };\n            BarcodeReader.prototype._correctBars = function(counter, correction, indices) {\n                var length = indices.length, tmp = 0;\n                while(length--){\n                    tmp = counter[indices[length]] * (1 - (1 - correction) / 2);\n                    if (tmp > 1) {\n                        counter[indices[length]] = tmp;\n                    }\n                }\n            };\n            BarcodeReader.prototype._matchTrace = function(cmpCounter, epsilon) {\n                var counter = [], i, self1 = this, offset = self1._nextSet(self1._row), isWhite = !self1._row[offset], counterPos = 0, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: 0\n                }, error;\n                if (cmpCounter) {\n                    for(i = 0; i < cmpCounter.length; i++){\n                        counter.push(0);\n                    }\n                    for(i = offset; i < self1._row.length; i++){\n                        if (self1._row[i] ^ isWhite) {\n                            counter[counterPos]++;\n                        } else {\n                            if (counterPos === counter.length - 1) {\n                                error = self1._matchPattern(counter, cmpCounter);\n                                if (error < epsilon) {\n                                    bestMatch.start = i - offset;\n                                    bestMatch.end = i;\n                                    bestMatch.counter = counter;\n                                    return bestMatch;\n                                } else {\n                                    return null;\n                                }\n                            } else {\n                                counterPos++;\n                            }\n                            counter[counterPos] = 1;\n                            isWhite = !isWhite;\n                        }\n                    }\n                } else {\n                    counter.push(0);\n                    for(i = offset; i < self1._row.length; i++){\n                        if (self1._row[i] ^ isWhite) {\n                            counter[counterPos]++;\n                        } else {\n                            counterPos++;\n                            counter.push(0);\n                            counter[counterPos] = 1;\n                            isWhite = !isWhite;\n                        }\n                    }\n                }\n                // if cmpCounter was not given\n                bestMatch.start = offset;\n                bestMatch.end = self1._row.length - 1;\n                bestMatch.counter = counter;\n                return bestMatch;\n            };\n            BarcodeReader.prototype.decodePattern = function(pattern) {\n                var self1 = this, result;\n                self1._row = pattern;\n                result = self1._decode();\n                if (result === null) {\n                    self1._row.reverse();\n                    result = self1._decode();\n                    if (result) {\n                        result.direction = BarcodeReader.DIRECTION.REVERSE;\n                        result.start = self1._row.length - result.start;\n                        result.end = self1._row.length - result.end;\n                    }\n                } else {\n                    result.direction = BarcodeReader.DIRECTION.FORWARD;\n                }\n                if (result) {\n                    result.format = self1.FORMAT;\n                }\n                return result;\n            };\n            BarcodeReader.prototype._matchRange = function(start, end, value) {\n                var i;\n                start = start < 0 ? 0 : start;\n                for(i = start; i < end; i++){\n                    if (this._row[i] !== value) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            BarcodeReader.prototype._fillCounters = function(offset, end, isWhite) {\n                var self1 = this, counterPos = 0, i, counters = [];\n                isWhite = typeof isWhite !== \"undefined\" ? isWhite : true;\n                offset = typeof offset !== \"undefined\" ? offset : self1._nextUnset(self1._row);\n                end = end || self1._row.length;\n                counters[counterPos] = 0;\n                for(i = offset; i < end; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counters[counterPos]++;\n                    } else {\n                        counterPos++;\n                        counters[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return counters;\n            };\n            BarcodeReader.prototype._toCounters = function(start, counter) {\n                var self1 = this, numCounters = counter.length, end = self1._row.length, isWhite = !self1._row[start], i, counterPos = 0;\n                _array_helper2.default.init(counter, 0);\n                for(i = start; i < end; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        counterPos++;\n                        if (counterPos === numCounters) {\n                            break;\n                        } else {\n                            counter[counterPos] = 1;\n                            isWhite = !isWhite;\n                        }\n                    }\n                }\n                return counter;\n            };\n            Object.defineProperty(BarcodeReader.prototype, \"FORMAT\", {\n                value: \"unknown\",\n                writeable: false\n            });\n            BarcodeReader.DIRECTION = {\n                FORWARD: 1,\n                REVERSE: -1\n            };\n            BarcodeReader.Exception = {\n                StartNotFoundException: \"Start-Info was not found!\",\n                CodeNotFoundException: \"Code could not be found!\",\n                PatternNotFoundException: \"Pattern could not be found!\"\n            };\n            BarcodeReader.CONFIG_KEYS = {};\n            exports1.default = BarcodeReader;\n        /***/ },\n        /* 2 */ /***/ function(module1, exports1) {\n            /**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ var isArray = Array.isArray;\n            module1.exports = isArray;\n        /***/ },\n        /* 3 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            exports1.default = {\n                init: function init(arr, val) {\n                    var l = arr.length;\n                    while(l--){\n                        arr[l] = val;\n                    }\n                },\n                /**\n     * Shuffles the content of an array\n     * @return {Array} the array itself shuffled\n     */ shuffle: function shuffle(arr) {\n                    var i = arr.length - 1, j, x;\n                    for(i; i >= 0; i--){\n                        j = Math.floor(Math.random() * i);\n                        x = arr[i];\n                        arr[i] = arr[j];\n                        arr[j] = x;\n                    }\n                    return arr;\n                },\n                toPointList: function toPointList(arr) {\n                    var i, j, row = [], rows = [];\n                    for(i = 0; i < arr.length; i++){\n                        row = [];\n                        for(j = 0; j < arr[i].length; j++){\n                            row[j] = arr[i][j];\n                        }\n                        rows[i] = \"[\" + row.join(\",\") + \"]\";\n                    }\n                    return \"[\" + rows.join(\",\\r\\n\") + \"]\";\n                },\n                /**\n     * returns the elements which's score is bigger than the threshold\n     * @return {Array} the reduced array\n     */ threshold: function threshold(arr, _threshold, scoreFunc) {\n                    var i, queue = [];\n                    for(i = 0; i < arr.length; i++){\n                        if (scoreFunc.apply(arr, [\n                            arr[i]\n                        ]) >= _threshold) {\n                            queue.push(arr[i]);\n                        }\n                    }\n                    return queue;\n                },\n                maxIndex: function maxIndex(arr) {\n                    var i, max = 0;\n                    for(i = 0; i < arr.length; i++){\n                        if (arr[i] > arr[max]) {\n                            max = i;\n                        }\n                    }\n                    return max;\n                },\n                max: function max(arr) {\n                    var i, max = 0;\n                    for(i = 0; i < arr.length; i++){\n                        if (arr[i] > max) {\n                            max = arr[i];\n                        }\n                    }\n                    return max;\n                },\n                sum: function sum(arr) {\n                    var length = arr.length, sum = 0;\n                    while(length--){\n                        sum += arr[length];\n                    }\n                    return sum;\n                }\n            };\n        /***/ },\n        /* 4 */ /***/ function(module1, exports1, __nested_webpack_require_16781__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _merge2 = __nested_webpack_require_16781__(28);\n            var _merge3 = _interopRequireDefault(_merge2);\n            var _extends = Object.assign || function(target) {\n                for(var i = 1; i < arguments.length; i++){\n                    var source = arguments[i];\n                    for(var key in source){\n                        if (Object.prototype.hasOwnProperty.call(source, key)) {\n                            target[key] = source[key];\n                        }\n                    }\n                }\n                return target;\n            };\n            var _barcode_reader = __nested_webpack_require_16781__(1);\n            var _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function EANReader(opts, supplements) {\n                opts = (0, _merge3.default)(getDefaulConfig(), opts);\n                _barcode_reader2.default.call(this, opts, supplements);\n            }\n            function getDefaulConfig() {\n                var config = {};\n                Object.keys(EANReader.CONFIG_KEYS).forEach(function(key) {\n                    config[key] = EANReader.CONFIG_KEYS[key].default;\n                });\n                return config;\n            }\n            var properties = {\n                CODE_L_START: {\n                    value: 0\n                },\n                CODE_G_START: {\n                    value: 10\n                },\n                START_PATTERN: {\n                    value: [\n                        1,\n                        1,\n                        1\n                    ]\n                },\n                STOP_PATTERN: {\n                    value: [\n                        1,\n                        1,\n                        1\n                    ]\n                },\n                MIDDLE_PATTERN: {\n                    value: [\n                        1,\n                        1,\n                        1,\n                        1,\n                        1\n                    ]\n                },\n                EXTENSION_START_PATTERN: {\n                    value: [\n                        1,\n                        1,\n                        2\n                    ]\n                },\n                CODE_PATTERN: {\n                    value: [\n                        [\n                            3,\n                            2,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            2,\n                            2,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            2,\n                            2\n                        ],\n                        [\n                            1,\n                            4,\n                            1,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            3,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            3,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            1,\n                            4\n                        ],\n                        [\n                            1,\n                            3,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            1,\n                            3\n                        ],\n                        [\n                            3,\n                            1,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            3\n                        ],\n                        [\n                            1,\n                            2,\n                            2,\n                            2\n                        ],\n                        [\n                            2,\n                            2,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            1,\n                            4,\n                            1\n                        ],\n                        [\n                            2,\n                            3,\n                            1,\n                            1\n                        ],\n                        [\n                            1,\n                            3,\n                            2,\n                            1\n                        ],\n                        [\n                            4,\n                            1,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            3,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            2,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            1,\n                            3\n                        ]\n                    ]\n                },\n                CODE_FREQUENCY: {\n                    value: [\n                        0,\n                        11,\n                        13,\n                        14,\n                        19,\n                        25,\n                        28,\n                        21,\n                        22,\n                        26\n                    ]\n                },\n                SINGLE_CODE_ERROR: {\n                    value: 0.70\n                },\n                AVG_CODE_ERROR: {\n                    value: 0.48\n                },\n                FORMAT: {\n                    value: \"ean_13\",\n                    writeable: false\n                }\n            };\n            EANReader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\n            EANReader.prototype.constructor = EANReader;\n            EANReader.prototype._decodeCode = function(start, coderange) {\n                var counter = [\n                    0,\n                    0,\n                    0,\n                    0\n                ], i, self1 = this, offset = start, isWhite = !self1._row[offset], counterPos = 0, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: start,\n                    end: start\n                }, code, error;\n                if (!coderange) {\n                    coderange = self1.CODE_PATTERN.length;\n                }\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            for(code = 0; code < coderange; code++){\n                                error = self1._matchPattern(counter, self1.CODE_PATTERN[code]);\n                                if (error < bestMatch.error) {\n                                    bestMatch.code = code;\n                                    bestMatch.error = error;\n                                }\n                            }\n                            bestMatch.end = i;\n                            if (bestMatch.error > self1.AVG_CODE_ERROR) {\n                                return null;\n                            }\n                            return bestMatch;\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            EANReader.prototype._findPattern = function(pattern, offset, isWhite, tryHarder, epsilon) {\n                var counter = [], self1 = this, i, counterPos = 0, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: 0,\n                    end: 0\n                }, error, j, sum;\n                if (!offset) {\n                    offset = self1._nextSet(self1._row);\n                }\n                if (isWhite === undefined) {\n                    isWhite = false;\n                }\n                if (tryHarder === undefined) {\n                    tryHarder = true;\n                }\n                if (epsilon === undefined) {\n                    epsilon = self1.AVG_CODE_ERROR;\n                }\n                for(i = 0; i < pattern.length; i++){\n                    counter[i] = 0;\n                }\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            sum = 0;\n                            for(j = 0; j < counter.length; j++){\n                                sum += counter[j];\n                            }\n                            error = self1._matchPattern(counter, pattern);\n                            if (error < epsilon) {\n                                bestMatch.error = error;\n                                bestMatch.start = i - sum;\n                                bestMatch.end = i;\n                                return bestMatch;\n                            }\n                            if (tryHarder) {\n                                for(j = 0; j < counter.length - 2; j++){\n                                    counter[j] = counter[j + 2];\n                                }\n                                counter[counter.length - 2] = 0;\n                                counter[counter.length - 1] = 0;\n                                counterPos--;\n                            } else {\n                                return null;\n                            }\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            EANReader.prototype._findStart = function() {\n                var self1 = this, leadingWhitespaceStart, offset = self1._nextSet(self1._row), startInfo;\n                while(!startInfo){\n                    startInfo = self1._findPattern(self1.START_PATTERN, offset);\n                    if (!startInfo) {\n                        return null;\n                    }\n                    leadingWhitespaceStart = startInfo.start - (startInfo.end - startInfo.start);\n                    if (leadingWhitespaceStart >= 0) {\n                        if (self1._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                            return startInfo;\n                        }\n                    }\n                    offset = startInfo.end;\n                    startInfo = null;\n                }\n            };\n            EANReader.prototype._verifyTrailingWhitespace = function(endInfo) {\n                var self1 = this, trailingWhitespaceEnd;\n                trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start);\n                if (trailingWhitespaceEnd < self1._row.length) {\n                    if (self1._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                        return endInfo;\n                    }\n                }\n                return null;\n            };\n            EANReader.prototype._findEnd = function(offset, isWhite) {\n                var self1 = this, endInfo = self1._findPattern(self1.STOP_PATTERN, offset, isWhite, false);\n                return endInfo !== null ? self1._verifyTrailingWhitespace(endInfo) : null;\n            };\n            EANReader.prototype._calculateFirstDigit = function(codeFrequency) {\n                var i, self1 = this;\n                for(i = 0; i < self1.CODE_FREQUENCY.length; i++){\n                    if (codeFrequency === self1.CODE_FREQUENCY[i]) {\n                        return i;\n                    }\n                }\n                return null;\n            };\n            EANReader.prototype._decodePayload = function(code, result, decodedCodes) {\n                var i, self1 = this, codeFrequency = 0x0, firstDigit;\n                for(i = 0; i < 6; i++){\n                    code = self1._decodeCode(code.end);\n                    if (!code) {\n                        return null;\n                    }\n                    if (code.code >= self1.CODE_G_START) {\n                        code.code = code.code - self1.CODE_G_START;\n                        codeFrequency |= 1 << 5 - i;\n                    } else {\n                        codeFrequency |= 0 << 5 - i;\n                    }\n                    result.push(code.code);\n                    decodedCodes.push(code);\n                }\n                firstDigit = self1._calculateFirstDigit(codeFrequency);\n                if (firstDigit === null) {\n                    return null;\n                }\n                result.unshift(firstDigit);\n                code = self1._findPattern(self1.MIDDLE_PATTERN, code.end, true, false);\n                if (code === null) {\n                    return null;\n                }\n                decodedCodes.push(code);\n                for(i = 0; i < 6; i++){\n                    code = self1._decodeCode(code.end, self1.CODE_G_START);\n                    if (!code) {\n                        return null;\n                    }\n                    decodedCodes.push(code);\n                    result.push(code.code);\n                }\n                return code;\n            };\n            EANReader.prototype._decode = function() {\n                var startInfo, self1 = this, code, result = [], decodedCodes = [], resultInfo = {};\n                startInfo = self1._findStart();\n                if (!startInfo) {\n                    return null;\n                }\n                code = {\n                    code: startInfo.code,\n                    start: startInfo.start,\n                    end: startInfo.end\n                };\n                decodedCodes.push(code);\n                code = self1._decodePayload(code, result, decodedCodes);\n                if (!code) {\n                    return null;\n                }\n                code = self1._findEnd(code.end, false);\n                if (!code) {\n                    return null;\n                }\n                decodedCodes.push(code);\n                // Checksum\n                if (!self1._checksum(result)) {\n                    return null;\n                }\n                if (this.supplements.length > 0) {\n                    var ext = this._decodeExtensions(code.end);\n                    if (!ext) {\n                        return null;\n                    }\n                    var lastCode = ext.decodedCodes[ext.decodedCodes.length - 1], endInfo = {\n                        start: lastCode.start + ((lastCode.end - lastCode.start) / 2 | 0),\n                        end: lastCode.end\n                    };\n                    if (!self1._verifyTrailingWhitespace(endInfo)) {\n                        return null;\n                    }\n                    resultInfo = {\n                        supplement: ext,\n                        code: result.join(\"\") + ext.code\n                    };\n                }\n                return _extends({\n                    code: result.join(\"\"),\n                    start: startInfo.start,\n                    end: code.end,\n                    codeset: \"\",\n                    startInfo: startInfo,\n                    decodedCodes: decodedCodes\n                }, resultInfo);\n            };\n            EANReader.prototype._decodeExtensions = function(offset) {\n                var i, start = this._nextSet(this._row, offset), startInfo = this._findPattern(this.EXTENSION_START_PATTERN, start, false, false), result;\n                if (startInfo === null) {\n                    return null;\n                }\n                for(i = 0; i < this.supplements.length; i++){\n                    result = this.supplements[i].decode(this._row, startInfo.end);\n                    if (result !== null) {\n                        return {\n                            code: result.code,\n                            start: start,\n                            startInfo: startInfo,\n                            end: result.end,\n                            codeset: \"\",\n                            decodedCodes: result.decodedCodes\n                        };\n                    }\n                }\n                return null;\n            };\n            EANReader.prototype._checksum = function(result) {\n                var sum = 0, i;\n                for(i = result.length - 2; i >= 0; i -= 2){\n                    sum += result[i];\n                }\n                sum *= 3;\n                for(i = result.length - 1; i >= 0; i -= 2){\n                    sum += result[i];\n                }\n                return sum % 10 === 0;\n            };\n            EANReader.CONFIG_KEYS = {\n                supplements: {\n                    \"type\": \"arrayOf(string)\",\n                    \"default\": [],\n                    \"description\": \"Allowed extensions to be decoded (2 and/or 5)\"\n                }\n            };\n            exports1.default = EANReader;\n        /***/ },\n        /* 5 */ /***/ function(module1, exports1, __nested_webpack_require_35208__) {\n            var freeGlobal = __nested_webpack_require_35208__(38);\n            /** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n            /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\n            module1.exports = root;\n        /***/ },\n        /* 6 */ /***/ function(module1, exports1) {\n            /**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function isObjectLike(value) {\n                return value != null && typeof value == \"object\";\n            }\n            module1.exports = isObjectLike;\n        /***/ },\n        /* 7 */ /***/ function(module1, exports1) {\n            module1.exports = clone;\n            /**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */ function clone(a) {\n                var out = new Float32Array(2);\n                out[0] = a[0];\n                out[1] = a[1];\n                return out;\n            }\n        /***/ },\n        /* 8 */ /***/ function(module1, exports1, __nested_webpack_require_36816__) {\n            var Symbol1 = __nested_webpack_require_36816__(11), getRawTag = __nested_webpack_require_36816__(117), objectToString = __nested_webpack_require_36816__(144);\n            /** `Object#toString` result references. */ var nullTag = \"[object Null]\", undefinedTag = \"[object Undefined]\";\n            /** Built-in value references. */ var symToStringTag = Symbol1 ? Symbol1.toStringTag : undefined;\n            /**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag(value) {\n                if (value == null) {\n                    return value === undefined ? undefinedTag : nullTag;\n                }\n                return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n            }\n            module1.exports = baseGetTag;\n        /***/ },\n        /* 9 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            exports1.default = {\n                drawRect: function drawRect(pos, size, ctx, style) {\n                    ctx.strokeStyle = style.color;\n                    ctx.fillStyle = style.color;\n                    ctx.lineWidth = 1;\n                    ctx.beginPath();\n                    ctx.strokeRect(pos.x, pos.y, size.x, size.y);\n                },\n                drawPath: function drawPath(path, def, ctx, style) {\n                    ctx.strokeStyle = style.color;\n                    ctx.fillStyle = style.color;\n                    ctx.lineWidth = style.lineWidth;\n                    ctx.beginPath();\n                    ctx.moveTo(path[0][def.x], path[0][def.y]);\n                    for(var j = 1; j < path.length; j++){\n                        ctx.lineTo(path[j][def.x], path[j][def.y]);\n                    }\n                    ctx.closePath();\n                    ctx.stroke();\n                },\n                drawImage: function drawImage(imageData, size, ctx) {\n                    var canvasData = ctx.getImageData(0, 0, size.x, size.y), data = canvasData.data, imageDataPos = imageData.length, canvasDataPos = data.length, value;\n                    if (canvasDataPos / imageDataPos !== 4) {\n                        return false;\n                    }\n                    while(imageDataPos--){\n                        value = imageData[imageDataPos];\n                        data[--canvasDataPos] = 255;\n                        data[--canvasDataPos] = value;\n                        data[--canvasDataPos] = value;\n                        data[--canvasDataPos] = value;\n                    }\n                    ctx.putImageData(canvasData, 0, 0);\n                    return true;\n                }\n            };\n        /***/ },\n        /* 10 */ /***/ function(module1, exports1, __nested_webpack_require_39711__) {\n            var listCacheClear = __nested_webpack_require_39711__(131), listCacheDelete = __nested_webpack_require_39711__(132), listCacheGet = __nested_webpack_require_39711__(133), listCacheHas = __nested_webpack_require_39711__(134), listCacheSet = __nested_webpack_require_39711__(135);\n            /**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function ListCache(entries) {\n                var index = -1, length = entries == null ? 0 : entries.length;\n                this.clear();\n                while(++index < length){\n                    var entry = entries[index];\n                    this.set(entry[0], entry[1]);\n                }\n            }\n            // Add methods to `ListCache`.\n            ListCache.prototype.clear = listCacheClear;\n            ListCache.prototype[\"delete\"] = listCacheDelete;\n            ListCache.prototype.get = listCacheGet;\n            ListCache.prototype.has = listCacheHas;\n            ListCache.prototype.set = listCacheSet;\n            module1.exports = ListCache;\n        /***/ },\n        /* 11 */ /***/ function(module1, exports1, __nested_webpack_require_40837__) {\n            var root = __nested_webpack_require_40837__(5);\n            /** Built-in value references. */ var Symbol1 = root.Symbol;\n            module1.exports = Symbol1;\n        /***/ },\n        /* 12 */ /***/ function(module1, exports1, __nested_webpack_require_41087__) {\n            var eq = __nested_webpack_require_41087__(17);\n            /**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function assocIndexOf(array, key) {\n                var length = array.length;\n                while(length--){\n                    if (eq(array[length][0], key)) {\n                        return length;\n                    }\n                }\n                return -1;\n            }\n            module1.exports = assocIndexOf;\n        /***/ },\n        /* 13 */ /***/ function(module1, exports1, __nested_webpack_require_41824__) {\n            var isArray = __nested_webpack_require_41824__(2), isKey = __nested_webpack_require_41824__(128), stringToPath = __nested_webpack_require_41824__(152), toString = __nested_webpack_require_41824__(163);\n            /**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */ function castPath(value, object) {\n                if (isArray(value)) {\n                    return value;\n                }\n                return isKey(value, object) ? [\n                    value\n                ] : stringToPath(toString(value));\n            }\n            module1.exports = castPath;\n        /***/ },\n        /* 14 */ /***/ function(module1, exports1, __nested_webpack_require_42623__) {\n            var isKeyable = __nested_webpack_require_42623__(129);\n            /**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function getMapData(map, key) {\n                var data = map.__data__;\n                return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n            }\n            module1.exports = getMapData;\n        /***/ },\n        /* 15 */ /***/ function(module1, exports1) {\n            /** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n            /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\\d*)$/;\n            /**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */ function isIndex(value, length) {\n                length = length == null ? MAX_SAFE_INTEGER : length;\n                return !!length && (typeof value == \"number\" || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n            }\n            module1.exports = isIndex;\n        /***/ },\n        /* 16 */ /***/ function(module1, exports1, __nested_webpack_require_44035__) {\n            var getNative = __nested_webpack_require_44035__(22);\n            /* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, \"create\");\n            module1.exports = nativeCreate;\n        /***/ },\n        /* 17 */ /***/ function(module1, exports1) {\n            /**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ function eq(value, other) {\n                return value === other || value !== value && other !== other;\n            }\n            module1.exports = eq;\n        /***/ },\n        /* 18 */ /***/ function(module1, exports1, __nested_webpack_require_45265__) {\n            var baseIsArguments = __nested_webpack_require_45265__(94), isObjectLike = __nested_webpack_require_45265__(6);\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n            /**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */ var isArguments = baseIsArguments(function() {\n                return arguments;\n            }()) ? baseIsArguments : function(value) {\n                return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n            };\n            module1.exports = isArguments;\n        /***/ },\n        /* 19 */ /***/ function(module1, exports1, __nested_webpack_require_46487__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            exports1._dimensionsConverters = exports1.ERODE = exports1.DILATE = exports1.Tracer = undefined;\n            exports1.imageRef = imageRef;\n            exports1.computeIntegralImage2 = computeIntegralImage2;\n            exports1.computeIntegralImage = computeIntegralImage;\n            exports1.thresholdImage = thresholdImage;\n            exports1.computeHistogram = computeHistogram;\n            exports1.sharpenLine = sharpenLine;\n            exports1.determineOtsuThreshold = determineOtsuThreshold;\n            exports1.otsuThreshold = otsuThreshold;\n            exports1.computeBinaryImage = computeBinaryImage;\n            exports1.cluster = cluster;\n            exports1.dilate = dilate;\n            exports1.erode = erode;\n            exports1.subtract = subtract;\n            exports1.bitwiseOr = bitwiseOr;\n            exports1.countNonZero = countNonZero;\n            exports1.topGeneric = topGeneric;\n            exports1.grayArrayFromImage = grayArrayFromImage;\n            exports1.grayArrayFromContext = grayArrayFromContext;\n            exports1.grayAndHalfSampleFromCanvasData = grayAndHalfSampleFromCanvasData;\n            exports1.computeGray = computeGray;\n            exports1.loadImageArray = loadImageArray;\n            exports1.halfSample = halfSample;\n            exports1.hsv2rgb = hsv2rgb;\n            exports1._computeDivisors = _computeDivisors;\n            exports1.calculatePatchSize = calculatePatchSize;\n            exports1._parseCSSDimensionValues = _parseCSSDimensionValues;\n            exports1.computeImageArea = computeImageArea;\n            var _cluster = __nested_webpack_require_46487__(52);\n            var _cluster2 = _interopRequireDefault(_cluster);\n            var _array_helper = __nested_webpack_require_46487__(3);\n            var _array_helper2 = _interopRequireDefault(_array_helper);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var vec2 = {\n                clone: __nested_webpack_require_46487__(7)\n            };\n            var vec3 = {\n                clone: __nested_webpack_require_46487__(81)\n            };\n            /**\n * @param x x-coordinate\n * @param y y-coordinate\n * @return ImageReference {x,y} Coordinate\n */ function imageRef(x, y) {\n                var that = {\n                    x: x,\n                    y: y,\n                    toVec2: function toVec2() {\n                        return vec2.clone([\n                            this.x,\n                            this.y\n                        ]);\n                    },\n                    toVec3: function toVec3() {\n                        return vec3.clone([\n                            this.x,\n                            this.y,\n                            1\n                        ]);\n                    },\n                    round: function round() {\n                        this.x = this.x > 0.0 ? Math.floor(this.x + 0.5) : Math.floor(this.x - 0.5);\n                        this.y = this.y > 0.0 ? Math.floor(this.y + 0.5) : Math.floor(this.y - 0.5);\n                        return this;\n                    }\n                };\n                return that;\n            }\n            ;\n            /**\n * Computes an integral image of a given grayscale image.\n * @param imageDataContainer {ImageDataContainer} the image to be integrated\n */ function computeIntegralImage2(imageWrapper, integralWrapper) {\n                var imageData = imageWrapper.data;\n                var width = imageWrapper.size.x;\n                var height = imageWrapper.size.y;\n                var integralImageData = integralWrapper.data;\n                var sum = 0, posA = 0, posB = 0, posC = 0, posD = 0, x, y;\n                // sum up first column\n                posB = width;\n                sum = 0;\n                for(y = 1; y < height; y++){\n                    sum += imageData[posA];\n                    integralImageData[posB] += sum;\n                    posA += width;\n                    posB += width;\n                }\n                posA = 0;\n                posB = 1;\n                sum = 0;\n                for(x = 1; x < width; x++){\n                    sum += imageData[posA];\n                    integralImageData[posB] += sum;\n                    posA++;\n                    posB++;\n                }\n                for(y = 1; y < height; y++){\n                    posA = y * width + 1;\n                    posB = (y - 1) * width + 1;\n                    posC = y * width;\n                    posD = (y - 1) * width;\n                    for(x = 1; x < width; x++){\n                        integralImageData[posA] += imageData[posA] + integralImageData[posB] + integralImageData[posC] - integralImageData[posD];\n                        posA++;\n                        posB++;\n                        posC++;\n                        posD++;\n                    }\n                }\n            }\n            ;\n            function computeIntegralImage(imageWrapper, integralWrapper) {\n                var imageData = imageWrapper.data;\n                var width = imageWrapper.size.x;\n                var height = imageWrapper.size.y;\n                var integralImageData = integralWrapper.data;\n                var sum = 0;\n                // sum up first row\n                for(var i = 0; i < width; i++){\n                    sum += imageData[i];\n                    integralImageData[i] = sum;\n                }\n                for(var v = 1; v < height; v++){\n                    sum = 0;\n                    for(var u = 0; u < width; u++){\n                        sum += imageData[v * width + u];\n                        integralImageData[v * width + u] = sum + integralImageData[(v - 1) * width + u];\n                    }\n                }\n            }\n            ;\n            function thresholdImage(imageWrapper, threshold, targetWrapper) {\n                if (!targetWrapper) {\n                    targetWrapper = imageWrapper;\n                }\n                var imageData = imageWrapper.data, length = imageData.length, targetData = targetWrapper.data;\n                while(length--){\n                    targetData[length] = imageData[length] < threshold ? 1 : 0;\n                }\n            }\n            ;\n            function computeHistogram(imageWrapper, bitsPerPixel) {\n                if (!bitsPerPixel) {\n                    bitsPerPixel = 8;\n                }\n                var imageData = imageWrapper.data, length = imageData.length, bitShift = 8 - bitsPerPixel, bucketCnt = 1 << bitsPerPixel, hist = new Int32Array(bucketCnt);\n                while(length--){\n                    hist[imageData[length] >> bitShift]++;\n                }\n                return hist;\n            }\n            ;\n            function sharpenLine(line) {\n                var i, length = line.length, left = line[0], center = line[1], right;\n                for(i = 1; i < length - 1; i++){\n                    right = line[i + 1];\n                    //  -1 4 -1 kernel\n                    line[i - 1] = center * 2 - left - right & 255;\n                    left = center;\n                    center = right;\n                }\n                return line;\n            }\n            ;\n            function determineOtsuThreshold(imageWrapper, bitsPerPixel) {\n                if (!bitsPerPixel) {\n                    bitsPerPixel = 8;\n                }\n                var hist, threshold, bitShift = 8 - bitsPerPixel;\n                function px(init, end) {\n                    var sum = 0, i;\n                    for(i = init; i <= end; i++){\n                        sum += hist[i];\n                    }\n                    return sum;\n                }\n                function mx(init, end) {\n                    var i, sum = 0;\n                    for(i = init; i <= end; i++){\n                        sum += i * hist[i];\n                    }\n                    return sum;\n                }\n                function determineThreshold() {\n                    var vet = [\n                        0\n                    ], p1, p2, p12, k, m1, m2, m12, max = (1 << bitsPerPixel) - 1;\n                    hist = computeHistogram(imageWrapper, bitsPerPixel);\n                    for(k = 1; k < max; k++){\n                        p1 = px(0, k);\n                        p2 = px(k + 1, max);\n                        p12 = p1 * p2;\n                        if (p12 === 0) {\n                            p12 = 1;\n                        }\n                        m1 = mx(0, k) * p2;\n                        m2 = mx(k + 1, max) * p1;\n                        m12 = m1 - m2;\n                        vet[k] = m12 * m12 / p12;\n                    }\n                    return _array_helper2.default.maxIndex(vet);\n                }\n                threshold = determineThreshold();\n                return threshold << bitShift;\n            }\n            ;\n            function otsuThreshold(imageWrapper, targetWrapper) {\n                var threshold = determineOtsuThreshold(imageWrapper);\n                thresholdImage(imageWrapper, threshold, targetWrapper);\n                return threshold;\n            }\n            ;\n            // local thresholding\n            function computeBinaryImage(imageWrapper, integralWrapper, targetWrapper) {\n                computeIntegralImage(imageWrapper, integralWrapper);\n                if (!targetWrapper) {\n                    targetWrapper = imageWrapper;\n                }\n                var imageData = imageWrapper.data;\n                var targetData = targetWrapper.data;\n                var width = imageWrapper.size.x;\n                var height = imageWrapper.size.y;\n                var integralImageData = integralWrapper.data;\n                var sum = 0, v, u, kernel = 3, A, B, C, D, avg, size = (kernel * 2 + 1) * (kernel * 2 + 1);\n                // clear out top & bottom-border\n                for(v = 0; v <= kernel; v++){\n                    for(u = 0; u < width; u++){\n                        targetData[v * width + u] = 0;\n                        targetData[(height - 1 - v) * width + u] = 0;\n                    }\n                }\n                // clear out left & right border\n                for(v = kernel; v < height - kernel; v++){\n                    for(u = 0; u <= kernel; u++){\n                        targetData[v * width + u] = 0;\n                        targetData[v * width + (width - 1 - u)] = 0;\n                    }\n                }\n                for(v = kernel + 1; v < height - kernel - 1; v++){\n                    for(u = kernel + 1; u < width - kernel; u++){\n                        A = integralImageData[(v - kernel - 1) * width + (u - kernel - 1)];\n                        B = integralImageData[(v - kernel - 1) * width + (u + kernel)];\n                        C = integralImageData[(v + kernel) * width + (u - kernel - 1)];\n                        D = integralImageData[(v + kernel) * width + (u + kernel)];\n                        sum = D - C - B + A;\n                        avg = sum / size;\n                        targetData[v * width + u] = imageData[v * width + u] > avg + 5 ? 0 : 1;\n                    }\n                }\n            }\n            ;\n            function cluster(points, threshold, property) {\n                var i, k, cluster, point, clusters = [];\n                if (!property) {\n                    property = \"rad\";\n                }\n                function addToCluster(newPoint) {\n                    var found = false;\n                    for(k = 0; k < clusters.length; k++){\n                        cluster = clusters[k];\n                        if (cluster.fits(newPoint)) {\n                            cluster.add(newPoint);\n                            found = true;\n                        }\n                    }\n                    return found;\n                }\n                // iterate over each cloud\n                for(i = 0; i < points.length; i++){\n                    point = _cluster2.default.createPoint(points[i], i, property);\n                    if (!addToCluster(point)) {\n                        clusters.push(_cluster2.default.create(point, threshold));\n                    }\n                }\n                return clusters;\n            }\n            ;\n            var Tracer = exports1.Tracer = {\n                trace: function trace(points, vec) {\n                    var iteration, maxIterations = 10, top = [], result = [], centerPos = 0, currentPos = 0;\n                    function trace(idx, forward) {\n                        var from, to, toIdx, predictedPos, thresholdX = 1, thresholdY = Math.abs(vec[1] / 10), found = false;\n                        function match(pos, predicted) {\n                            if (pos.x > predicted.x - thresholdX && pos.x < predicted.x + thresholdX && pos.y > predicted.y - thresholdY && pos.y < predicted.y + thresholdY) {\n                                return true;\n                            } else {\n                                return false;\n                            }\n                        }\n                        // check if the next index is within the vec specifications\n                        // if not, check as long as the threshold is met\n                        from = points[idx];\n                        if (forward) {\n                            predictedPos = {\n                                x: from.x + vec[0],\n                                y: from.y + vec[1]\n                            };\n                        } else {\n                            predictedPos = {\n                                x: from.x - vec[0],\n                                y: from.y - vec[1]\n                            };\n                        }\n                        toIdx = forward ? idx + 1 : idx - 1;\n                        to = points[toIdx];\n                        while(to && (found = match(to, predictedPos)) !== true && Math.abs(to.y - from.y) < vec[1]){\n                            toIdx = forward ? toIdx + 1 : toIdx - 1;\n                            to = points[toIdx];\n                        }\n                        return found ? toIdx : null;\n                    }\n                    for(iteration = 0; iteration < maxIterations; iteration++){\n                        // randomly select point to start with\n                        centerPos = Math.floor(Math.random() * points.length);\n                        // trace forward\n                        top = [];\n                        currentPos = centerPos;\n                        top.push(points[currentPos]);\n                        while((currentPos = trace(currentPos, true)) !== null){\n                            top.push(points[currentPos]);\n                        }\n                        if (centerPos > 0) {\n                            currentPos = centerPos;\n                            while((currentPos = trace(currentPos, false)) !== null){\n                                top.push(points[currentPos]);\n                            }\n                        }\n                        if (top.length > result.length) {\n                            result = top;\n                        }\n                    }\n                    return result;\n                }\n            };\n            var DILATE = exports1.DILATE = 1;\n            var ERODE = exports1.ERODE = 2;\n            function dilate(inImageWrapper, outImageWrapper) {\n                var v, u, inImageData = inImageWrapper.data, outImageData = outImageWrapper.data, height = inImageWrapper.size.y, width = inImageWrapper.size.x, sum, yStart1, yStart2, xStart1, xStart2;\n                for(v = 1; v < height - 1; v++){\n                    for(u = 1; u < width - 1; u++){\n                        yStart1 = v - 1;\n                        yStart2 = v + 1;\n                        xStart1 = u - 1;\n                        xStart2 = u + 1;\n                        sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\n                        outImageData[v * width + u] = sum > 0 ? 1 : 0;\n                    }\n                }\n            }\n            ;\n            function erode(inImageWrapper, outImageWrapper) {\n                var v, u, inImageData = inImageWrapper.data, outImageData = outImageWrapper.data, height = inImageWrapper.size.y, width = inImageWrapper.size.x, sum, yStart1, yStart2, xStart1, xStart2;\n                for(v = 1; v < height - 1; v++){\n                    for(u = 1; u < width - 1; u++){\n                        yStart1 = v - 1;\n                        yStart2 = v + 1;\n                        xStart1 = u - 1;\n                        xStart2 = u + 1;\n                        sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\n                        outImageData[v * width + u] = sum === 5 ? 1 : 0;\n                    }\n                }\n            }\n            ;\n            function subtract(aImageWrapper, bImageWrapper, resultImageWrapper) {\n                if (!resultImageWrapper) {\n                    resultImageWrapper = aImageWrapper;\n                }\n                var length = aImageWrapper.data.length, aImageData = aImageWrapper.data, bImageData = bImageWrapper.data, cImageData = resultImageWrapper.data;\n                while(length--){\n                    cImageData[length] = aImageData[length] - bImageData[length];\n                }\n            }\n            ;\n            function bitwiseOr(aImageWrapper, bImageWrapper, resultImageWrapper) {\n                if (!resultImageWrapper) {\n                    resultImageWrapper = aImageWrapper;\n                }\n                var length = aImageWrapper.data.length, aImageData = aImageWrapper.data, bImageData = bImageWrapper.data, cImageData = resultImageWrapper.data;\n                while(length--){\n                    cImageData[length] = aImageData[length] || bImageData[length];\n                }\n            }\n            ;\n            function countNonZero(imageWrapper) {\n                var length = imageWrapper.data.length, data = imageWrapper.data, sum = 0;\n                while(length--){\n                    sum += data[length];\n                }\n                return sum;\n            }\n            ;\n            function topGeneric(list, top, scoreFunc) {\n                var i, minIdx = 0, min = 0, queue = [], score, hit, pos;\n                for(i = 0; i < top; i++){\n                    queue[i] = {\n                        score: 0,\n                        item: null\n                    };\n                }\n                for(i = 0; i < list.length; i++){\n                    score = scoreFunc.apply(this, [\n                        list[i]\n                    ]);\n                    if (score > min) {\n                        hit = queue[minIdx];\n                        hit.score = score;\n                        hit.item = list[i];\n                        min = Number.MAX_VALUE;\n                        for(pos = 0; pos < top; pos++){\n                            if (queue[pos].score < min) {\n                                min = queue[pos].score;\n                                minIdx = pos;\n                            }\n                        }\n                    }\n                }\n                return queue;\n            }\n            ;\n            function grayArrayFromImage(htmlImage, offsetX, ctx, array) {\n                ctx.drawImage(htmlImage, offsetX, 0, htmlImage.width, htmlImage.height);\n                var ctxData = ctx.getImageData(offsetX, 0, htmlImage.width, htmlImage.height).data;\n                computeGray(ctxData, array);\n            }\n            ;\n            function grayArrayFromContext(ctx, size, offset, array) {\n                var ctxData = ctx.getImageData(offset.x, offset.y, size.x, size.y).data;\n                computeGray(ctxData, array);\n            }\n            ;\n            function grayAndHalfSampleFromCanvasData(canvasData, size, outArray) {\n                var topRowIdx = 0;\n                var bottomRowIdx = size.x;\n                var endIdx = Math.floor(canvasData.length / 4);\n                var outWidth = size.x / 2;\n                var outImgIdx = 0;\n                var inWidth = size.x;\n                var i;\n                while(bottomRowIdx < endIdx){\n                    for(i = 0; i < outWidth; i++){\n                        outArray[outImgIdx] = (0.299 * canvasData[topRowIdx * 4 + 0] + 0.587 * canvasData[topRowIdx * 4 + 1] + 0.114 * canvasData[topRowIdx * 4 + 2] + (0.299 * canvasData[(topRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(topRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(topRowIdx + 1) * 4 + 2]) + (0.299 * canvasData[bottomRowIdx * 4 + 0] + 0.587 * canvasData[bottomRowIdx * 4 + 1] + 0.114 * canvasData[bottomRowIdx * 4 + 2]) + (0.299 * canvasData[(bottomRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(bottomRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(bottomRowIdx + 1) * 4 + 2])) / 4;\n                        outImgIdx++;\n                        topRowIdx = topRowIdx + 2;\n                        bottomRowIdx = bottomRowIdx + 2;\n                    }\n                    topRowIdx = topRowIdx + inWidth;\n                    bottomRowIdx = bottomRowIdx + inWidth;\n                }\n            }\n            ;\n            function computeGray(imageData, outArray, config) {\n                var l = imageData.length / 4 | 0, i, singleChannel = config && config.singleChannel === true;\n                if (singleChannel) {\n                    for(i = 0; i < l; i++){\n                        outArray[i] = imageData[i * 4 + 0];\n                    }\n                } else {\n                    for(i = 0; i < l; i++){\n                        outArray[i] = 0.299 * imageData[i * 4 + 0] + 0.587 * imageData[i * 4 + 1] + 0.114 * imageData[i * 4 + 2];\n                    }\n                }\n            }\n            ;\n            function loadImageArray(src, callback, canvas) {\n                if (!canvas) {\n                    canvas = document.createElement(\"canvas\");\n                }\n                var img = new Image();\n                img.callback = callback;\n                img.onload = function() {\n                    canvas.width = this.width;\n                    canvas.height = this.height;\n                    var ctx = canvas.getContext(\"2d\");\n                    ctx.drawImage(this, 0, 0);\n                    var array = new Uint8Array(this.width * this.height);\n                    ctx.drawImage(this, 0, 0);\n                    var data = ctx.getImageData(0, 0, this.width, this.height).data;\n                    computeGray(data, array);\n                    this.callback(array, {\n                        x: this.width,\n                        y: this.height\n                    }, this);\n                };\n                img.src = src;\n            }\n            ;\n            /**\n * @param inImg {ImageWrapper} input image to be sampled\n * @param outImg {ImageWrapper} to be stored in\n */ function halfSample(inImgWrapper, outImgWrapper) {\n                var inImg = inImgWrapper.data;\n                var inWidth = inImgWrapper.size.x;\n                var outImg = outImgWrapper.data;\n                var topRowIdx = 0;\n                var bottomRowIdx = inWidth;\n                var endIdx = inImg.length;\n                var outWidth = inWidth / 2;\n                var outImgIdx = 0;\n                while(bottomRowIdx < endIdx){\n                    for(var i = 0; i < outWidth; i++){\n                        outImg[outImgIdx] = Math.floor((inImg[topRowIdx] + inImg[topRowIdx + 1] + inImg[bottomRowIdx] + inImg[bottomRowIdx + 1]) / 4);\n                        outImgIdx++;\n                        topRowIdx = topRowIdx + 2;\n                        bottomRowIdx = bottomRowIdx + 2;\n                    }\n                    topRowIdx = topRowIdx + inWidth;\n                    bottomRowIdx = bottomRowIdx + inWidth;\n                }\n            }\n            ;\n            function hsv2rgb(hsv, rgb) {\n                var h = hsv[0], s = hsv[1], v = hsv[2], c = v * s, x = c * (1 - Math.abs(h / 60 % 2 - 1)), m = v - c, r = 0, g = 0, b = 0;\n                rgb = rgb || [\n                    0,\n                    0,\n                    0\n                ];\n                if (h < 60) {\n                    r = c;\n                    g = x;\n                } else if (h < 120) {\n                    r = x;\n                    g = c;\n                } else if (h < 180) {\n                    g = c;\n                    b = x;\n                } else if (h < 240) {\n                    g = x;\n                    b = c;\n                } else if (h < 300) {\n                    r = x;\n                    b = c;\n                } else if (h < 360) {\n                    r = c;\n                    b = x;\n                }\n                rgb[0] = (r + m) * 255 | 0;\n                rgb[1] = (g + m) * 255 | 0;\n                rgb[2] = (b + m) * 255 | 0;\n                return rgb;\n            }\n            ;\n            function _computeDivisors(n) {\n                var largeDivisors = [], divisors = [], i;\n                for(i = 1; i < Math.sqrt(n) + 1; i++){\n                    if (n % i === 0) {\n                        divisors.push(i);\n                        if (i !== n / i) {\n                            largeDivisors.unshift(Math.floor(n / i));\n                        }\n                    }\n                }\n                return divisors.concat(largeDivisors);\n            }\n            ;\n            function _computeIntersection(arr1, arr2) {\n                var i = 0, j = 0, result = [];\n                while(i < arr1.length && j < arr2.length){\n                    if (arr1[i] === arr2[j]) {\n                        result.push(arr1[i]);\n                        i++;\n                        j++;\n                    } else if (arr1[i] > arr2[j]) {\n                        j++;\n                    } else {\n                        i++;\n                    }\n                }\n                return result;\n            }\n            ;\n            function calculatePatchSize(patchSize, imgSize) {\n                var divisorsX = _computeDivisors(imgSize.x), divisorsY = _computeDivisors(imgSize.y), wideSide = Math.max(imgSize.x, imgSize.y), common = _computeIntersection(divisorsX, divisorsY), nrOfPatchesList = [\n                    8,\n                    10,\n                    15,\n                    20,\n                    32,\n                    60,\n                    80\n                ], nrOfPatchesMap = {\n                    \"x-small\": 5,\n                    \"small\": 4,\n                    \"medium\": 3,\n                    \"large\": 2,\n                    \"x-large\": 1\n                }, nrOfPatchesIdx = nrOfPatchesMap[patchSize] || nrOfPatchesMap.medium, nrOfPatches = nrOfPatchesList[nrOfPatchesIdx], desiredPatchSize = Math.floor(wideSide / nrOfPatches), optimalPatchSize;\n                function findPatchSizeForDivisors(divisors) {\n                    var i = 0, found = divisors[Math.floor(divisors.length / 2)];\n                    while(i < divisors.length - 1 && divisors[i] < desiredPatchSize){\n                        i++;\n                    }\n                    if (i > 0) {\n                        if (Math.abs(divisors[i] - desiredPatchSize) > Math.abs(divisors[i - 1] - desiredPatchSize)) {\n                            found = divisors[i - 1];\n                        } else {\n                            found = divisors[i];\n                        }\n                    }\n                    if (desiredPatchSize / found < nrOfPatchesList[nrOfPatchesIdx + 1] / nrOfPatchesList[nrOfPatchesIdx] && desiredPatchSize / found > nrOfPatchesList[nrOfPatchesIdx - 1] / nrOfPatchesList[nrOfPatchesIdx]) {\n                        return {\n                            x: found,\n                            y: found\n                        };\n                    }\n                    return null;\n                }\n                optimalPatchSize = findPatchSizeForDivisors(common);\n                if (!optimalPatchSize) {\n                    optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(wideSide));\n                    if (!optimalPatchSize) {\n                        optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(desiredPatchSize * nrOfPatches));\n                    }\n                }\n                return optimalPatchSize;\n            }\n            ;\n            function _parseCSSDimensionValues(value) {\n                var dimension = {\n                    value: parseFloat(value),\n                    unit: value.indexOf(\"%\") === value.length - 1 ? \"%\" : \"%\"\n                };\n                return dimension;\n            }\n            ;\n            var _dimensionsConverters = exports1._dimensionsConverters = {\n                top: function top(dimension, context) {\n                    if (dimension.unit === \"%\") {\n                        return Math.floor(context.height * (dimension.value / 100));\n                    }\n                },\n                right: function right(dimension, context) {\n                    if (dimension.unit === \"%\") {\n                        return Math.floor(context.width - context.width * (dimension.value / 100));\n                    }\n                },\n                bottom: function bottom(dimension, context) {\n                    if (dimension.unit === \"%\") {\n                        return Math.floor(context.height - context.height * (dimension.value / 100));\n                    }\n                },\n                left: function left(dimension, context) {\n                    if (dimension.unit === \"%\") {\n                        return Math.floor(context.width * (dimension.value / 100));\n                    }\n                }\n            };\n            function computeImageArea(inputWidth, inputHeight, area) {\n                var context = {\n                    width: inputWidth,\n                    height: inputHeight\n                };\n                var parsedArea = Object.keys(area).reduce(function(result, key) {\n                    var value = area[key], parsed = _parseCSSDimensionValues(value), calculated = _dimensionsConverters[key](parsed, context);\n                    result[key] = calculated;\n                    return result;\n                }, {});\n                return {\n                    sx: parsedArea.left,\n                    sy: parsedArea.top,\n                    sw: parsedArea.right - parsedArea.left,\n                    sh: parsedArea.bottom - parsedArea.top\n                };\n            }\n            ;\n        /***/ },\n        /* 20 */ /***/ function(module1, exports1, __nested_webpack_require_77416__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _subImage = __nested_webpack_require_77416__(55);\n            var _subImage2 = _interopRequireDefault(_subImage);\n            var _cv_utils = __nested_webpack_require_77416__(19);\n            var _array_helper = __nested_webpack_require_77416__(3);\n            var _array_helper2 = _interopRequireDefault(_array_helper);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var vec2 = {\n                clone: __nested_webpack_require_77416__(7)\n            };\n            /**\n * Represents a basic image combining the data and size.\n * In addition, some methods for manipulation are contained.\n * @param size {x,y} The size of the image in pixel\n * @param data {Array} If given, a flat array containing the pixel data\n * @param ArrayType {Type} If given, the desired DataType of the Array (may be typed/non-typed)\n * @param initialize {Boolean} Indicating if the array should be initialized on creation.\n * @returns {ImageWrapper}\n */ function ImageWrapper(size, data, ArrayType, initialize) {\n                if (!data) {\n                    if (ArrayType) {\n                        this.data = new ArrayType(size.x * size.y);\n                        if (ArrayType === Array && initialize) {\n                            _array_helper2.default.init(this.data, 0);\n                        }\n                    } else {\n                        this.data = new Uint8Array(size.x * size.y);\n                        if (Uint8Array === Array && initialize) {\n                            _array_helper2.default.init(this.data, 0);\n                        }\n                    }\n                } else {\n                    this.data = data;\n                }\n                this.size = size;\n            }\n            /**\n * tests if a position is within the image with a given offset\n * @param imgRef {x, y} The location to test\n * @param border Number the padding value in pixel\n * @returns {Boolean} true if location inside the image's border, false otherwise\n * @see cvd/image.h\n */ ImageWrapper.prototype.inImageWithBorder = function(imgRef, border) {\n                return imgRef.x >= border && imgRef.y >= border && imgRef.x < this.size.x - border && imgRef.y < this.size.y - border;\n            };\n            /**\n * Performs bilinear sampling\n * @param inImg Image to extract sample from\n * @param x the x-coordinate\n * @param y the y-coordinate\n * @returns the sampled value\n * @see cvd/vision.h\n */ ImageWrapper.sample = function(inImg, x, y) {\n                var lx = Math.floor(x);\n                var ly = Math.floor(y);\n                var w = inImg.size.x;\n                var base = ly * inImg.size.x + lx;\n                var a = inImg.data[base + 0];\n                var b = inImg.data[base + 1];\n                var c = inImg.data[base + w];\n                var d = inImg.data[base + w + 1];\n                var e = a - b;\n                x -= lx;\n                y -= ly;\n                var result = Math.floor(x * (y * (e - c + d) - e) + y * (c - a) + a);\n                return result;\n            };\n            /**\n * Initializes a given array. Sets each element to zero.\n * @param array {Array} The array to initialize\n */ ImageWrapper.clearArray = function(array) {\n                var l = array.length;\n                while(l--){\n                    array[l] = 0;\n                }\n            };\n            /**\n * Creates a {SubImage} from the current image ({this}).\n * @param from {ImageRef} The position where to start the {SubImage} from. (top-left corner)\n * @param size {ImageRef} The size of the resulting image\n * @returns {SubImage} A shared part of the original image\n */ ImageWrapper.prototype.subImage = function(from, size) {\n                return new _subImage2.default(from, size, this);\n            };\n            /**\n * Creates an {ImageWrapper) and copies the needed underlying image-data area\n * @param imageWrapper {ImageWrapper} The target {ImageWrapper} where the data should be copied\n * @param from {ImageRef} The location where to copy from (top-left location)\n */ ImageWrapper.prototype.subImageAsCopy = function(imageWrapper, from) {\n                var sizeY = imageWrapper.size.y, sizeX = imageWrapper.size.x;\n                var x, y;\n                for(x = 0; x < sizeX; x++){\n                    for(y = 0; y < sizeY; y++){\n                        imageWrapper.data[y * sizeX + x] = this.data[(from.y + y) * this.size.x + from.x + x];\n                    }\n                }\n            };\n            ImageWrapper.prototype.copyTo = function(imageWrapper) {\n                var length = this.data.length, srcData = this.data, dstData = imageWrapper.data;\n                while(length--){\n                    dstData[length] = srcData[length];\n                }\n            };\n            /**\n * Retrieves a given pixel position from the image\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @returns {Number} The grayscale value at the pixel-position\n */ ImageWrapper.prototype.get = function(x, y) {\n                return this.data[y * this.size.x + x];\n            };\n            /**\n * Retrieves a given pixel position from the image\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @returns {Number} The grayscale value at the pixel-position\n */ ImageWrapper.prototype.getSafe = function(x, y) {\n                var i;\n                if (!this.indexMapping) {\n                    this.indexMapping = {\n                        x: [],\n                        y: []\n                    };\n                    for(i = 0; i < this.size.x; i++){\n                        this.indexMapping.x[i] = i;\n                        this.indexMapping.x[i + this.size.x] = i;\n                    }\n                    for(i = 0; i < this.size.y; i++){\n                        this.indexMapping.y[i] = i;\n                        this.indexMapping.y[i + this.size.y] = i;\n                    }\n                }\n                return this.data[this.indexMapping.y[y + this.size.y] * this.size.x + this.indexMapping.x[x + this.size.x]];\n            };\n            /**\n * Sets a given pixel position in the image\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @param value {Number} The grayscale value to set\n * @returns {ImageWrapper} The Image itself (for possible chaining)\n */ ImageWrapper.prototype.set = function(x, y, value) {\n                this.data[y * this.size.x + x] = value;\n                return this;\n            };\n            /**\n * Sets the border of the image (1 pixel) to zero\n */ ImageWrapper.prototype.zeroBorder = function() {\n                var i, width = this.size.x, height = this.size.y, data = this.data;\n                for(i = 0; i < width; i++){\n                    data[i] = data[(height - 1) * width + i] = 0;\n                }\n                for(i = 1; i < height - 1; i++){\n                    data[i * width] = data[i * width + (width - 1)] = 0;\n                }\n            };\n            /**\n * Inverts a binary image in place\n */ ImageWrapper.prototype.invert = function() {\n                var data = this.data, length = data.length;\n                while(length--){\n                    data[length] = data[length] ? 0 : 1;\n                }\n            };\n            ImageWrapper.prototype.convolve = function(kernel) {\n                var x, y, kx, ky, kSize = kernel.length / 2 | 0, accu = 0;\n                for(y = 0; y < this.size.y; y++){\n                    for(x = 0; x < this.size.x; x++){\n                        accu = 0;\n                        for(ky = -kSize; ky <= kSize; ky++){\n                            for(kx = -kSize; kx <= kSize; kx++){\n                                accu += kernel[ky + kSize][kx + kSize] * this.getSafe(x + kx, y + ky);\n                            }\n                        }\n                        this.data[y * this.size.x + x] = accu;\n                    }\n                }\n            };\n            ImageWrapper.prototype.moments = function(labelcount) {\n                var data = this.data, x, y, height = this.size.y, width = this.size.x, val, ysq, labelsum = [], i, label, mu11, mu02, mu20, x_, y_, tmp, result = [], PI = Math.PI, PI_4 = PI / 4;\n                if (labelcount <= 0) {\n                    return result;\n                }\n                for(i = 0; i < labelcount; i++){\n                    labelsum[i] = {\n                        m00: 0,\n                        m01: 0,\n                        m10: 0,\n                        m11: 0,\n                        m02: 0,\n                        m20: 0,\n                        theta: 0,\n                        rad: 0\n                    };\n                }\n                for(y = 0; y < height; y++){\n                    ysq = y * y;\n                    for(x = 0; x < width; x++){\n                        val = data[y * width + x];\n                        if (val > 0) {\n                            label = labelsum[val - 1];\n                            label.m00 += 1;\n                            label.m01 += y;\n                            label.m10 += x;\n                            label.m11 += x * y;\n                            label.m02 += ysq;\n                            label.m20 += x * x;\n                        }\n                    }\n                }\n                for(i = 0; i < labelcount; i++){\n                    label = labelsum[i];\n                    if (!isNaN(label.m00) && label.m00 !== 0) {\n                        x_ = label.m10 / label.m00;\n                        y_ = label.m01 / label.m00;\n                        mu11 = label.m11 / label.m00 - x_ * y_;\n                        mu02 = label.m02 / label.m00 - y_ * y_;\n                        mu20 = label.m20 / label.m00 - x_ * x_;\n                        tmp = (mu02 - mu20) / (2 * mu11);\n                        tmp = 0.5 * Math.atan(tmp) + (mu11 >= 0 ? PI_4 : -PI_4) + PI;\n                        label.theta = (tmp * 180 / PI + 90) % 180 - 90;\n                        if (label.theta < 0) {\n                            label.theta += 180;\n                        }\n                        label.rad = tmp > PI ? tmp - PI : tmp;\n                        label.vec = vec2.clone([\n                            Math.cos(tmp),\n                            Math.sin(tmp)\n                        ]);\n                        result.push(label);\n                    }\n                }\n                return result;\n            };\n            /**\n * Displays the {ImageWrapper} in a given canvas\n * @param canvas {Canvas} The canvas element to write to\n * @param scale {Number} Scale which is applied to each pixel-value\n */ ImageWrapper.prototype.show = function(canvas, scale) {\n                var ctx, frame, data, current, pixel, x, y;\n                if (!scale) {\n                    scale = 1.0;\n                }\n                ctx = canvas.getContext(\"2d\");\n                canvas.width = this.size.x;\n                canvas.height = this.size.y;\n                frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                data = frame.data;\n                current = 0;\n                for(y = 0; y < this.size.y; y++){\n                    for(x = 0; x < this.size.x; x++){\n                        pixel = y * this.size.x + x;\n                        current = this.get(x, y) * scale;\n                        data[pixel * 4 + 0] = current;\n                        data[pixel * 4 + 1] = current;\n                        data[pixel * 4 + 2] = current;\n                        data[pixel * 4 + 3] = 255;\n                    }\n                }\n                //frame.data = data;\n                ctx.putImageData(frame, 0, 0);\n            };\n            /**\n * Displays the {SubImage} in a given canvas\n * @param canvas {Canvas} The canvas element to write to\n * @param scale {Number} Scale which is applied to each pixel-value\n */ ImageWrapper.prototype.overlay = function(canvas, scale, from) {\n                if (!scale || scale < 0 || scale > 360) {\n                    scale = 360;\n                }\n                var hsv = [\n                    0,\n                    1,\n                    1\n                ];\n                var rgb = [\n                    0,\n                    0,\n                    0\n                ];\n                var whiteRgb = [\n                    255,\n                    255,\n                    255\n                ];\n                var blackRgb = [\n                    0,\n                    0,\n                    0\n                ];\n                var result = [];\n                var ctx = canvas.getContext(\"2d\");\n                var frame = ctx.getImageData(from.x, from.y, this.size.x, this.size.y);\n                var data = frame.data;\n                var length = this.data.length;\n                while(length--){\n                    hsv[0] = this.data[length] * scale;\n                    result = hsv[0] <= 0 ? whiteRgb : hsv[0] >= 360 ? blackRgb : (0, _cv_utils.hsv2rgb)(hsv, rgb);\n                    data[length * 4 + 0] = result[0];\n                    data[length * 4 + 1] = result[1];\n                    data[length * 4 + 2] = result[2];\n                    data[length * 4 + 3] = 255;\n                }\n                ctx.putImageData(frame, from.x, from.y);\n            };\n            exports1.default = ImageWrapper;\n        /***/ },\n        /* 21 */ /***/ function(module1, exports1, __nested_webpack_require_90960__) {\n            var defineProperty = __nested_webpack_require_90960__(37);\n            /**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function baseAssignValue(object, key, value) {\n                if (key == \"__proto__\" && defineProperty) {\n                    defineProperty(object, key, {\n                        \"configurable\": true,\n                        \"enumerable\": true,\n                        \"value\": value,\n                        \"writable\": true\n                    });\n                } else {\n                    object[key] = value;\n                }\n            }\n            module1.exports = baseAssignValue;\n        /***/ },\n        /* 22 */ /***/ function(module1, exports1, __nested_webpack_require_91880__) {\n            var baseIsNative = __nested_webpack_require_91880__(95), getValue = __nested_webpack_require_91880__(118);\n            /**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function getNative(object, key) {\n                var value = getValue(object, key);\n                return baseIsNative(value) ? value : undefined;\n            }\n            module1.exports = getNative;\n        /***/ },\n        /* 23 */ /***/ function(module1, exports1, __nested_webpack_require_92524__) {\n            var isSymbol = __nested_webpack_require_92524__(27);\n            /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;\n            /**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */ function toKey(value) {\n                if (typeof value == \"string\" || isSymbol(value)) {\n                    return value;\n                }\n                var result = value + \"\";\n                return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n            }\n            module1.exports = toKey;\n        /***/ },\n        /* 24 */ /***/ function(module1, exports1, __nested_webpack_require_93264__) {\n            var isFunction = __nested_webpack_require_93264__(25), isLength = __nested_webpack_require_93264__(26);\n            /**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function isArrayLike(value) {\n                return value != null && isLength(value.length) && !isFunction(value);\n            }\n            module1.exports = isArrayLike;\n        /***/ },\n        /* 25 */ /***/ function(module1, exports1, __nested_webpack_require_94244__) {\n            var baseGetTag = __nested_webpack_require_94244__(8), isObject = __nested_webpack_require_94244__(0);\n            /** `Object#toString` result references. */ var asyncTag = \"[object AsyncFunction]\", funcTag = \"[object Function]\", genTag = \"[object GeneratorFunction]\", proxyTag = \"[object Proxy]\";\n            /**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function isFunction(value) {\n                if (!isObject(value)) {\n                    return false;\n                }\n                // The use of `Object#toString` avoids issues with the `typeof` operator\n                // in Safari 9 which returns 'object' for typed arrays and other constructors.\n                var tag = baseGetTag(value);\n                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n            }\n            module1.exports = isFunction;\n        /***/ },\n        /* 26 */ /***/ function(module1, exports1) {\n            /** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n            /**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function isLength(value) {\n                return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n            }\n            module1.exports = isLength;\n        /***/ },\n        /* 27 */ /***/ function(module1, exports1, __nested_webpack_require_96398__) {\n            var baseGetTag = __nested_webpack_require_96398__(8), isObjectLike = __nested_webpack_require_96398__(6);\n            /** `Object#toString` result references. */ var symbolTag = \"[object Symbol]\";\n            /**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */ function isSymbol(value) {\n                return typeof value == \"symbol\" || isObjectLike(value) && baseGetTag(value) == symbolTag;\n            }\n            module1.exports = isSymbol;\n        /***/ },\n        /* 28 */ /***/ function(module1, exports1, __nested_webpack_require_97228__) {\n            var baseMerge = __nested_webpack_require_97228__(98), createAssigner = __nested_webpack_require_97228__(114);\n            /**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */ var merge = createAssigner(function(object, source, srcIndex) {\n                baseMerge(object, source, srcIndex);\n            });\n            module1.exports = merge;\n        /***/ },\n        /* 29 */ /***/ function(module1, exports1) {\n            module1.exports = function(module1) {\n                if (!module1.webpackPolyfill) {\n                    module1.deprecate = function() {};\n                    module1.paths = [];\n                    // module.parent = undefined by default\n                    if (!module1.children) module1.children = [];\n                    Object.defineProperty(module1, \"loaded\", {\n                        enumerable: true,\n                        get: function() {\n                            return module1.l;\n                        }\n                    });\n                    Object.defineProperty(module1, \"id\", {\n                        enumerable: true,\n                        get: function() {\n                            return module1.i;\n                        }\n                    });\n                    module1.webpackPolyfill = 1;\n                }\n                return module1;\n            };\n        /***/ },\n        /* 30 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            /**\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\n */ var Tracer = {\n                searchDirections: [\n                    [\n                        0,\n                        1\n                    ],\n                    [\n                        1,\n                        1\n                    ],\n                    [\n                        1,\n                        0\n                    ],\n                    [\n                        1,\n                        -1\n                    ],\n                    [\n                        0,\n                        -1\n                    ],\n                    [\n                        -1,\n                        -1\n                    ],\n                    [\n                        -1,\n                        0\n                    ],\n                    [\n                        -1,\n                        1\n                    ]\n                ],\n                create: function create(imageWrapper, labelWrapper) {\n                    var imageData = imageWrapper.data, labelData = labelWrapper.data, searchDirections = this.searchDirections, width = imageWrapper.size.x, pos;\n                    function _trace(current, color, label, edgelabel) {\n                        var i, y, x;\n                        for(i = 0; i < 7; i++){\n                            y = current.cy + searchDirections[current.dir][0];\n                            x = current.cx + searchDirections[current.dir][1];\n                            pos = y * width + x;\n                            if (imageData[pos] === color && (labelData[pos] === 0 || labelData[pos] === label)) {\n                                labelData[pos] = label;\n                                current.cy = y;\n                                current.cx = x;\n                                return true;\n                            } else {\n                                if (labelData[pos] === 0) {\n                                    labelData[pos] = edgelabel;\n                                }\n                                current.dir = (current.dir + 1) % 8;\n                            }\n                        }\n                        return false;\n                    }\n                    function vertex2D(x, y, dir) {\n                        return {\n                            dir: dir,\n                            x: x,\n                            y: y,\n                            next: null,\n                            prev: null\n                        };\n                    }\n                    function _contourTracing(sy, sx, label, color, edgelabel) {\n                        var Fv = null, Cv, P, ldir, current = {\n                            cx: sx,\n                            cy: sy,\n                            dir: 0\n                        };\n                        if (_trace(current, color, label, edgelabel)) {\n                            Fv = vertex2D(sx, sy, current.dir);\n                            Cv = Fv;\n                            ldir = current.dir;\n                            P = vertex2D(current.cx, current.cy, 0);\n                            P.prev = Cv;\n                            Cv.next = P;\n                            P.next = null;\n                            Cv = P;\n                            do {\n                                current.dir = (current.dir + 6) % 8;\n                                _trace(current, color, label, edgelabel);\n                                if (ldir !== current.dir) {\n                                    Cv.dir = current.dir;\n                                    P = vertex2D(current.cx, current.cy, 0);\n                                    P.prev = Cv;\n                                    Cv.next = P;\n                                    P.next = null;\n                                    Cv = P;\n                                } else {\n                                    Cv.dir = ldir;\n                                    Cv.x = current.cx;\n                                    Cv.y = current.cy;\n                                }\n                                ldir = current.dir;\n                            }while (current.cx !== sx || current.cy !== sy);\n                            Fv.prev = Cv.prev;\n                            Cv.prev.next = Fv;\n                        }\n                        return Fv;\n                    }\n                    return {\n                        trace: function trace(current, color, label, edgelabel) {\n                            return _trace(current, color, label, edgelabel);\n                        },\n                        contourTracing: function contourTracing(sy, sx, label, color, edgelabel) {\n                            return _contourTracing(sy, sx, label, color, edgelabel);\n                        }\n                    };\n                }\n            };\n            exports1.default = Tracer;\n        /***/ },\n        /* 31 */ /***/ function(module1, exports1, __nested_webpack_require_104662__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _barcode_reader = __nested_webpack_require_104662__(1);\n            var _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n            var _array_helper = __nested_webpack_require_104662__(3);\n            var _array_helper2 = _interopRequireDefault(_array_helper);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function Code39Reader() {\n                _barcode_reader2.default.call(this);\n            }\n            var properties = {\n                ALPHABETH_STRING: {\n                    value: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%\"\n                },\n                ALPHABET: {\n                    value: [\n                        48,\n                        49,\n                        50,\n                        51,\n                        52,\n                        53,\n                        54,\n                        55,\n                        56,\n                        57,\n                        65,\n                        66,\n                        67,\n                        68,\n                        69,\n                        70,\n                        71,\n                        72,\n                        73,\n                        74,\n                        75,\n                        76,\n                        77,\n                        78,\n                        79,\n                        80,\n                        81,\n                        82,\n                        83,\n                        84,\n                        85,\n                        86,\n                        87,\n                        88,\n                        89,\n                        90,\n                        45,\n                        46,\n                        32,\n                        42,\n                        36,\n                        47,\n                        43,\n                        37\n                    ]\n                },\n                CHARACTER_ENCODINGS: {\n                    value: [\n                        0x034,\n                        0x121,\n                        0x061,\n                        0x160,\n                        0x031,\n                        0x130,\n                        0x070,\n                        0x025,\n                        0x124,\n                        0x064,\n                        0x109,\n                        0x049,\n                        0x148,\n                        0x019,\n                        0x118,\n                        0x058,\n                        0x00D,\n                        0x10C,\n                        0x04C,\n                        0x01C,\n                        0x103,\n                        0x043,\n                        0x142,\n                        0x013,\n                        0x112,\n                        0x052,\n                        0x007,\n                        0x106,\n                        0x046,\n                        0x016,\n                        0x181,\n                        0x0C1,\n                        0x1C0,\n                        0x091,\n                        0x190,\n                        0x0D0,\n                        0x085,\n                        0x184,\n                        0x0C4,\n                        0x094,\n                        0x0A8,\n                        0x0A2,\n                        0x08A,\n                        0x02A\n                    ]\n                },\n                ASTERISK: {\n                    value: 0x094\n                },\n                FORMAT: {\n                    value: \"code_39\",\n                    writeable: false\n                }\n            };\n            Code39Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\n            Code39Reader.prototype.constructor = Code39Reader;\n            Code39Reader.prototype._decode = function() {\n                var self1 = this, counters = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ], result = [], start = self1._findStart(), decodedChar, lastStart, pattern, nextStart;\n                if (!start) {\n                    return null;\n                }\n                nextStart = self1._nextSet(self1._row, start.end);\n                do {\n                    counters = self1._toCounters(nextStart, counters);\n                    pattern = self1._toPattern(counters);\n                    if (pattern < 0) {\n                        return null;\n                    }\n                    decodedChar = self1._patternToChar(pattern);\n                    if (decodedChar < 0) {\n                        return null;\n                    }\n                    result.push(decodedChar);\n                    lastStart = nextStart;\n                    nextStart += _array_helper2.default.sum(counters);\n                    nextStart = self1._nextSet(self1._row, nextStart);\n                }while (decodedChar !== \"*\");\n                result.pop();\n                if (!result.length) {\n                    return null;\n                }\n                if (!self1._verifyTrailingWhitespace(lastStart, nextStart, counters)) {\n                    return null;\n                }\n                return {\n                    code: result.join(\"\"),\n                    start: start.start,\n                    end: nextStart,\n                    startInfo: start,\n                    decodedCodes: result\n                };\n            };\n            Code39Reader.prototype._verifyTrailingWhitespace = function(lastStart, nextStart, counters) {\n                var trailingWhitespaceEnd, patternSize = _array_helper2.default.sum(counters);\n                trailingWhitespaceEnd = nextStart - lastStart - patternSize;\n                if (trailingWhitespaceEnd * 3 >= patternSize) {\n                    return true;\n                }\n                return false;\n            };\n            Code39Reader.prototype._patternToChar = function(pattern) {\n                var i, self1 = this;\n                for(i = 0; i < self1.CHARACTER_ENCODINGS.length; i++){\n                    if (self1.CHARACTER_ENCODINGS[i] === pattern) {\n                        return String.fromCharCode(self1.ALPHABET[i]);\n                    }\n                }\n                return -1;\n            };\n            Code39Reader.prototype._findNextWidth = function(counters, current) {\n                var i, minWidth = Number.MAX_VALUE;\n                for(i = 0; i < counters.length; i++){\n                    if (counters[i] < minWidth && counters[i] > current) {\n                        minWidth = counters[i];\n                    }\n                }\n                return minWidth;\n            };\n            Code39Reader.prototype._toPattern = function(counters) {\n                var numCounters = counters.length, maxNarrowWidth = 0, numWideBars = numCounters, wideBarWidth = 0, self1 = this, pattern, i;\n                while(numWideBars > 3){\n                    maxNarrowWidth = self1._findNextWidth(counters, maxNarrowWidth);\n                    numWideBars = 0;\n                    pattern = 0;\n                    for(i = 0; i < numCounters; i++){\n                        if (counters[i] > maxNarrowWidth) {\n                            pattern |= 1 << numCounters - 1 - i;\n                            numWideBars++;\n                            wideBarWidth += counters[i];\n                        }\n                    }\n                    if (numWideBars === 3) {\n                        for(i = 0; i < numCounters && numWideBars > 0; i++){\n                            if (counters[i] > maxNarrowWidth) {\n                                numWideBars--;\n                                if (counters[i] * 2 >= wideBarWidth) {\n                                    return -1;\n                                }\n                            }\n                        }\n                        return pattern;\n                    }\n                }\n                return -1;\n            };\n            Code39Reader.prototype._findStart = function() {\n                var self1 = this, offset = self1._nextSet(self1._row), patternStart = offset, counter = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ], counterPos = 0, isWhite = false, i, j, whiteSpaceMustStart;\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            // find start pattern\n                            if (self1._toPattern(counter) === self1.ASTERISK) {\n                                whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\n                                if (self1._matchRange(whiteSpaceMustStart, patternStart, 0)) {\n                                    return {\n                                        start: patternStart,\n                                        end: i\n                                    };\n                                }\n                            }\n                            patternStart += counter[0] + counter[1];\n                            for(j = 0; j < 7; j++){\n                                counter[j] = counter[j + 2];\n                            }\n                            counter[7] = 0;\n                            counter[8] = 0;\n                            counterPos--;\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            exports1.default = Code39Reader;\n        /***/ },\n        /* 32 */ /***/ function(module1, exports1) {\n            module1.exports = dot;\n            /**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n                return a[0] * b[0] + a[1] * b[1];\n            }\n        /***/ },\n        /* 33 */ /***/ function(module1, exports1, __nested_webpack_require_115345__) {\n            var getNative = __nested_webpack_require_115345__(22), root = __nested_webpack_require_115345__(5);\n            /* Built-in method references that are verified to be native. */ var Map = getNative(root, \"Map\");\n            module1.exports = Map;\n        /***/ },\n        /* 34 */ /***/ function(module1, exports1, __nested_webpack_require_115666__) {\n            var mapCacheClear = __nested_webpack_require_115666__(136), mapCacheDelete = __nested_webpack_require_115666__(137), mapCacheGet = __nested_webpack_require_115666__(138), mapCacheHas = __nested_webpack_require_115666__(139), mapCacheSet = __nested_webpack_require_115666__(140);\n            /**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function MapCache(entries) {\n                var index = -1, length = entries == null ? 0 : entries.length;\n                this.clear();\n                while(++index < length){\n                    var entry = entries[index];\n                    this.set(entry[0], entry[1]);\n                }\n            }\n            // Add methods to `MapCache`.\n            MapCache.prototype.clear = mapCacheClear;\n            MapCache.prototype[\"delete\"] = mapCacheDelete;\n            MapCache.prototype.get = mapCacheGet;\n            MapCache.prototype.has = mapCacheHas;\n            MapCache.prototype.set = mapCacheSet;\n            module1.exports = MapCache;\n        /***/ },\n        /* 35 */ /***/ function(module1, exports1, __nested_webpack_require_116797__) {\n            var baseAssignValue = __nested_webpack_require_116797__(21), eq = __nested_webpack_require_116797__(17);\n            /**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function assignMergeValue(object, key, value) {\n                if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\n                    baseAssignValue(object, key, value);\n                }\n            }\n            module1.exports = assignMergeValue;\n        /***/ },\n        /* 36 */ /***/ function(module1, exports1, __nested_webpack_require_117549__) {\n            var baseAssignValue = __nested_webpack_require_117549__(21), eq = __nested_webpack_require_117549__(17);\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function assignValue(object, key, value) {\n                var objValue = object[key];\n                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n                    baseAssignValue(object, key, value);\n                }\n            }\n            module1.exports = assignValue;\n        /***/ },\n        /* 37 */ /***/ function(module1, exports1, __nested_webpack_require_118656__) {\n            var getNative = __nested_webpack_require_118656__(22);\n            var defineProperty = function() {\n                try {\n                    var func = getNative(Object, \"defineProperty\");\n                    func({}, \"\", {});\n                    return func;\n                } catch (e) {}\n            }();\n            module1.exports = defineProperty;\n        /***/ },\n        /* 38 */ /***/ function(module1, exports1, __nested_webpack_require_119101__) {\n            /* WEBPACK VAR INJECTION */ (function(global) {\n                var freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\n                module1.exports = freeGlobal;\n            /* WEBPACK VAR INJECTION */ }).call(exports1, __nested_webpack_require_119101__(47));\n        /***/ },\n        /* 39 */ /***/ function(module1, exports1, __nested_webpack_require_119490__) {\n            var overArg = __nested_webpack_require_119490__(145);\n            /** Built-in value references. */ var getPrototype = overArg(Object.getPrototypeOf, Object);\n            module1.exports = getPrototype;\n        /***/ },\n        /* 40 */ /***/ function(module1, exports1) {\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */ function isPrototype(value) {\n                var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n                return value === proto;\n            }\n            module1.exports = isPrototype;\n        /***/ },\n        /* 41 */ /***/ function(module1, exports1, __nested_webpack_require_120398__) {\n            var apply = __nested_webpack_require_120398__(85);\n            /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;\n            /**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */ function overRest(func, start, transform) {\n                start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n                return function() {\n                    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);\n                    while(++index < length){\n                        array[index] = args[start + index];\n                    }\n                    index = -1;\n                    var otherArgs = Array(start + 1);\n                    while(++index < start){\n                        otherArgs[index] = args[index];\n                    }\n                    otherArgs[start] = transform(array);\n                    return apply(func, this, otherArgs);\n                };\n            }\n            module1.exports = overRest;\n        /***/ },\n        /* 42 */ /***/ function(module1, exports1, __nested_webpack_require_121838__) {\n            var baseSetToString = __nested_webpack_require_121838__(104), shortOut = __nested_webpack_require_121838__(146);\n            /**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var setToString = shortOut(baseSetToString);\n            module1.exports = setToString;\n        /***/ },\n        /* 43 */ /***/ function(module1, exports1) {\n            /**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */ function identity(value) {\n                return value;\n            }\n            module1.exports = identity;\n        /***/ },\n        /* 44 */ /***/ function(module1, exports1, __nested_webpack_require_122839__) {\n            /* WEBPACK VAR INJECTION */ (function(module1) {\n                var root = __nested_webpack_require_122839__(5), stubFalse = __nested_webpack_require_122839__(161);\n                /** Detect free variable `exports`. */ var freeExports = typeof exports1 == \"object\" && exports1 && !exports1.nodeType && exports1;\n                /** Detect free variable `module`. */ var freeModule = freeExports && typeof module1 == \"object\" && module1 && !module1.nodeType && module1;\n                /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n                /** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;\n                /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n                /**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */ var isBuffer = nativeIsBuffer || stubFalse;\n                module1.exports = isBuffer;\n            /* WEBPACK VAR INJECTION */ }).call(exports1, __nested_webpack_require_122839__(29)(module1));\n        /***/ },\n        /* 45 */ /***/ function(module1, exports1, __nested_webpack_require_124330__) {\n            var baseIsTypedArray = __nested_webpack_require_124330__(96), baseUnary = __nested_webpack_require_124330__(107), nodeUtil = __nested_webpack_require_124330__(143);\n            /* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n            /**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n            module1.exports = isTypedArray;\n        /***/ },\n        /* 46 */ /***/ function(module1, exports1, __nested_webpack_require_125150__) {\n            var arrayLikeKeys = __nested_webpack_require_125150__(86), baseKeysIn = __nested_webpack_require_125150__(97), isArrayLike = __nested_webpack_require_125150__(24);\n            /**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */ function keysIn(object) {\n                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n            }\n            module1.exports = keysIn;\n        /***/ },\n        /* 47 */ /***/ function(module1, exports1) {\n            var g;\n            // This works in non-strict mode\n            g = function() {\n                return this;\n            }();\n            try {\n                // This works if eval is allowed (see CSP)\n                g = g || Function(\"return this\")() || (1, eval)(\"this\");\n            } catch (e) {\n                // This works if the window reference is available\n                if (false) {}\n            }\n            // g can still be undefined, but nothing to do about it...\n            // We return undefined, instead of nothing here, so it's\n            // easier to handle this case. if(!global) { ...}\n            module1.exports = g;\n        /***/ },\n        /* 48 */ /***/ function(module1, exports1, __nested_webpack_require_126825__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _merge2 = __nested_webpack_require_126825__(28);\n            var _merge3 = _interopRequireDefault(_merge2);\n            var _extends = Object.assign || function(target) {\n                for(var i = 1; i < arguments.length; i++){\n                    var source = arguments[i];\n                    for(var key in source){\n                        if (Object.prototype.hasOwnProperty.call(source, key)) {\n                            target[key] = source[key];\n                        }\n                    }\n                }\n                return target;\n            }; // eslint-disable-line no-unused-vars\n            var _typedefs = __nested_webpack_require_126825__(56);\n            var _typedefs2 = _interopRequireDefault(_typedefs);\n            var _image_wrapper = __nested_webpack_require_126825__(20);\n            var _image_wrapper2 = _interopRequireDefault(_image_wrapper);\n            var _barcode_locator = __nested_webpack_require_126825__(62);\n            var _barcode_locator2 = _interopRequireDefault(_barcode_locator);\n            var _barcode_decoder = __nested_webpack_require_126825__(59);\n            var _barcode_decoder2 = _interopRequireDefault(_barcode_decoder);\n            var _events = __nested_webpack_require_126825__(53);\n            var _events2 = _interopRequireDefault(_events);\n            var _camera_access = __nested_webpack_require_126825__(61);\n            var _camera_access2 = _interopRequireDefault(_camera_access);\n            var _image_debug = __nested_webpack_require_126825__(9);\n            var _image_debug2 = _interopRequireDefault(_image_debug);\n            var _result_collector = __nested_webpack_require_126825__(51);\n            var _result_collector2 = _interopRequireDefault(_result_collector);\n            var _config2 = __nested_webpack_require_126825__(57);\n            var _config3 = _interopRequireDefault(_config2);\n            var _input_stream = __nested_webpack_require_126825__(50);\n            var _input_stream2 = _interopRequireDefault(_input_stream);\n            var _frame_grabber = __nested_webpack_require_126825__(49);\n            var _frame_grabber2 = _interopRequireDefault(_frame_grabber);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var vec2 = {\n                clone: __nested_webpack_require_126825__(7)\n            };\n            var _inputStream, _framegrabber, _stopped, _canvasContainer = {\n                ctx: {\n                    image: null,\n                    overlay: null\n                },\n                dom: {\n                    image: null,\n                    overlay: null\n                }\n            }, _inputImageWrapper, _boxSize, _decoder, _workerPool = [], _onUIThread = true, _resultCollector, _config = {};\n            function initializeData(imageWrapper) {\n                initBuffers(imageWrapper);\n                _decoder = _barcode_decoder2.default.create(_config.decoder, _inputImageWrapper);\n            }\n            function initInputStream(cb) {\n                var video;\n                if (_config.inputStream.type === \"VideoStream\") {\n                    video = document.createElement(\"video\");\n                    _inputStream = _input_stream2.default.createVideoStream(video);\n                } else if (_config.inputStream.type === \"ImageStream\") {\n                    _inputStream = _input_stream2.default.createImageStream();\n                } else if (_config.inputStream.type === \"LiveStream\") {\n                    var $viewport = getViewPort();\n                    if ($viewport) {\n                        video = $viewport.querySelector(\"video\");\n                        if (!video) {\n                            video = document.createElement(\"video\");\n                            $viewport.appendChild(video);\n                        }\n                    }\n                    _inputStream = _input_stream2.default.createLiveStream(video);\n                    _camera_access2.default.request(video, _config.inputStream.constraints).then(function() {\n                        _inputStream.trigger(\"canrecord\");\n                    }).catch(function(err) {\n                        return cb(err);\n                    });\n                }\n                _inputStream.setAttribute(\"preload\", \"auto\");\n                _inputStream.setInputStream(_config.inputStream);\n                _inputStream.addEventListener(\"canrecord\", canRecord.bind(undefined, cb));\n            }\n            function getViewPort() {\n                var target = _config.inputStream.target;\n                // Check if target is already a DOM element\n                if (target && target.nodeName && target.nodeType === 1) {\n                    return target;\n                } else {\n                    // Use '#interactive.viewport' as a fallback selector (backwards compatibility)\n                    var selector = typeof target === \"string\" ? target : \"#interactive.viewport\";\n                    return document.querySelector(selector);\n                }\n            }\n            function canRecord(cb) {\n                _barcode_locator2.default.checkImageConstraints(_inputStream, _config.locator);\n                initCanvas(_config);\n                _framegrabber = _frame_grabber2.default.create(_inputStream, _canvasContainer.dom.image);\n                adjustWorkerPool(_config.numOfWorkers, function() {\n                    if (_config.numOfWorkers === 0) {\n                        initializeData();\n                    }\n                    ready(cb);\n                });\n            }\n            function ready(cb) {\n                _inputStream.play();\n                cb();\n            }\n            function initCanvas() {\n                if (typeof document !== \"undefined\") {\n                    var $viewport = getViewPort();\n                    _canvasContainer.dom.image = document.querySelector(\"canvas.imgBuffer\");\n                    if (!_canvasContainer.dom.image) {\n                        _canvasContainer.dom.image = document.createElement(\"canvas\");\n                        _canvasContainer.dom.image.className = \"imgBuffer\";\n                        if ($viewport && _config.inputStream.type === \"ImageStream\") {\n                            $viewport.appendChild(_canvasContainer.dom.image);\n                        }\n                    }\n                    _canvasContainer.ctx.image = _canvasContainer.dom.image.getContext(\"2d\");\n                    _canvasContainer.dom.image.width = _inputStream.getCanvasSize().x;\n                    _canvasContainer.dom.image.height = _inputStream.getCanvasSize().y;\n                    _canvasContainer.dom.overlay = document.querySelector(\"canvas.drawingBuffer\");\n                    if (!_canvasContainer.dom.overlay) {\n                        _canvasContainer.dom.overlay = document.createElement(\"canvas\");\n                        _canvasContainer.dom.overlay.className = \"drawingBuffer\";\n                        if ($viewport) {\n                            $viewport.appendChild(_canvasContainer.dom.overlay);\n                        }\n                        var clearFix = document.createElement(\"br\");\n                        clearFix.setAttribute(\"clear\", \"all\");\n                        if ($viewport) {\n                            $viewport.appendChild(clearFix);\n                        }\n                    }\n                    _canvasContainer.ctx.overlay = _canvasContainer.dom.overlay.getContext(\"2d\");\n                    _canvasContainer.dom.overlay.width = _inputStream.getCanvasSize().x;\n                    _canvasContainer.dom.overlay.height = _inputStream.getCanvasSize().y;\n                }\n            }\n            function initBuffers(imageWrapper) {\n                if (imageWrapper) {\n                    _inputImageWrapper = imageWrapper;\n                } else {\n                    _inputImageWrapper = new _image_wrapper2.default({\n                        x: _inputStream.getWidth(),\n                        y: _inputStream.getHeight()\n                    });\n                }\n                if (false) {}\n                _boxSize = [\n                    vec2.clone([\n                        0,\n                        0\n                    ]),\n                    vec2.clone([\n                        0,\n                        _inputImageWrapper.size.y\n                    ]),\n                    vec2.clone([\n                        _inputImageWrapper.size.x,\n                        _inputImageWrapper.size.y\n                    ]),\n                    vec2.clone([\n                        _inputImageWrapper.size.x,\n                        0\n                    ])\n                ];\n                _barcode_locator2.default.init(_inputImageWrapper, _config.locator);\n            }\n            function getBoundingBoxes() {\n                if (_config.locate) {\n                    return _barcode_locator2.default.locate();\n                } else {\n                    return [\n                        [\n                            vec2.clone(_boxSize[0]),\n                            vec2.clone(_boxSize[1]),\n                            vec2.clone(_boxSize[2]),\n                            vec2.clone(_boxSize[3])\n                        ]\n                    ];\n                }\n            }\n            function transformResult(result) {\n                var topRight = _inputStream.getTopRight(), xOffset = topRight.x, yOffset = topRight.y, i;\n                if (xOffset === 0 && yOffset === 0) {\n                    return;\n                }\n                if (result.barcodes) {\n                    for(i = 0; i < result.barcodes.length; i++){\n                        transformResult(result.barcodes[i]);\n                    }\n                }\n                if (result.line && result.line.length === 2) {\n                    moveLine(result.line);\n                }\n                if (result.box) {\n                    moveBox(result.box);\n                }\n                if (result.boxes && result.boxes.length > 0) {\n                    for(i = 0; i < result.boxes.length; i++){\n                        moveBox(result.boxes[i]);\n                    }\n                }\n                function moveBox(box) {\n                    var corner = box.length;\n                    while(corner--){\n                        box[corner][0] += xOffset;\n                        box[corner][1] += yOffset;\n                    }\n                }\n                function moveLine(line) {\n                    line[0].x += xOffset;\n                    line[0].y += yOffset;\n                    line[1].x += xOffset;\n                    line[1].y += yOffset;\n                }\n            }\n            function addResult(result, imageData) {\n                if (!imageData || !_resultCollector) {\n                    return;\n                }\n                if (result.barcodes) {\n                    result.barcodes.filter(function(barcode) {\n                        return barcode.codeResult;\n                    }).forEach(function(barcode) {\n                        return addResult(barcode, imageData);\n                    });\n                } else if (result.codeResult) {\n                    _resultCollector.addResult(imageData, _inputStream.getCanvasSize(), result.codeResult);\n                }\n            }\n            function hasCodeResult(result) {\n                return result && (result.barcodes ? result.barcodes.some(function(barcode) {\n                    return barcode.codeResult;\n                }) : result.codeResult);\n            }\n            function publishResult(result, imageData) {\n                var resultToPublish = result;\n                if (result && _onUIThread) {\n                    transformResult(result);\n                    addResult(result, imageData);\n                    resultToPublish = result.barcodes || result;\n                }\n                _events2.default.publish(\"processed\", resultToPublish);\n                if (hasCodeResult(result)) {\n                    _events2.default.publish(\"detected\", resultToPublish);\n                }\n            }\n            function locateAndDecode() {\n                var result, boxes;\n                boxes = getBoundingBoxes();\n                if (boxes) {\n                    result = _decoder.decodeFromBoundingBoxes(boxes);\n                    result = result || {};\n                    result.boxes = boxes;\n                    publishResult(result, _inputImageWrapper.data);\n                } else {\n                    publishResult();\n                }\n            }\n            function update() {\n                var availableWorker;\n                if (_onUIThread) {\n                    if (_workerPool.length > 0) {\n                        availableWorker = _workerPool.filter(function(workerThread) {\n                            return !workerThread.busy;\n                        })[0];\n                        if (availableWorker) {\n                            _framegrabber.attachData(availableWorker.imageData);\n                        } else {\n                            return; // all workers are busy\n                        }\n                    } else {\n                        _framegrabber.attachData(_inputImageWrapper.data);\n                    }\n                    if (_framegrabber.grab()) {\n                        if (availableWorker) {\n                            availableWorker.busy = true;\n                            availableWorker.worker.postMessage({\n                                cmd: \"process\",\n                                imageData: availableWorker.imageData\n                            }, [\n                                availableWorker.imageData.buffer\n                            ]);\n                        } else {\n                            locateAndDecode();\n                        }\n                    }\n                } else {\n                    locateAndDecode();\n                }\n            }\n            function startContinuousUpdate() {\n                var next = null, delay = 1000 / (_config.frequency || 60);\n                _stopped = false;\n                (function frame(timestamp) {\n                    next = next || timestamp;\n                    if (!_stopped) {\n                        if (timestamp >= next) {\n                            next += delay;\n                            update();\n                        }\n                        window.requestAnimFrame(frame);\n                    }\n                })(performance.now());\n            }\n            function _start() {\n                if (_onUIThread && _config.inputStream.type === \"LiveStream\") {\n                    startContinuousUpdate();\n                } else {\n                    update();\n                }\n            }\n            function initWorker(cb) {\n                var blobURL, workerThread = {\n                    worker: undefined,\n                    imageData: new Uint8Array(_inputStream.getWidth() * _inputStream.getHeight()),\n                    busy: true\n                };\n                blobURL = generateWorkerBlob();\n                workerThread.worker = new Worker(blobURL);\n                workerThread.worker.onmessage = function(e) {\n                    if (e.data.event === \"initialized\") {\n                        URL.revokeObjectURL(blobURL);\n                        workerThread.busy = false;\n                        workerThread.imageData = new Uint8Array(e.data.imageData);\n                        if (false) {}\n                        return cb(workerThread);\n                    } else if (e.data.event === \"processed\") {\n                        workerThread.imageData = new Uint8Array(e.data.imageData);\n                        workerThread.busy = false;\n                        publishResult(e.data.result, workerThread.imageData);\n                    } else if (e.data.event === \"error\") {\n                        if (false) {}\n                    }\n                };\n                workerThread.worker.postMessage({\n                    cmd: \"init\",\n                    size: {\n                        x: _inputStream.getWidth(),\n                        y: _inputStream.getHeight()\n                    },\n                    imageData: workerThread.imageData,\n                    config: configForWorker(_config)\n                }, [\n                    workerThread.imageData.buffer\n                ]);\n            }\n            function configForWorker(config) {\n                return _extends({}, config, {\n                    inputStream: _extends({}, config.inputStream, {\n                        target: null\n                    })\n                });\n            }\n            function workerInterface(factory) {\n                /* eslint-disable no-undef*/ if (factory) {\n                    var Quagga = factory().default;\n                    if (!Quagga) {\n                        self.postMessage({\n                            \"event\": \"error\",\n                            message: \"Quagga could not be created\"\n                        });\n                        return;\n                    }\n                }\n                var imageWrapper;\n                self.onmessage = function(e) {\n                    if (e.data.cmd === \"init\") {\n                        var config = e.data.config;\n                        config.numOfWorkers = 0;\n                        imageWrapper = new Quagga.ImageWrapper({\n                            x: e.data.size.x,\n                            y: e.data.size.y\n                        }, new Uint8Array(e.data.imageData));\n                        Quagga.init(config, ready, imageWrapper);\n                        Quagga.onProcessed(onProcessed);\n                    } else if (e.data.cmd === \"process\") {\n                        imageWrapper.data = new Uint8Array(e.data.imageData);\n                        Quagga.start();\n                    } else if (e.data.cmd === \"setReaders\") {\n                        Quagga.setReaders(e.data.readers);\n                    }\n                };\n                function onProcessed(result) {\n                    self.postMessage({\n                        \"event\": \"processed\",\n                        imageData: imageWrapper.data,\n                        result: result\n                    }, [\n                        imageWrapper.data.buffer\n                    ]);\n                }\n                function ready() {\n                    // eslint-disable-line\n                    self.postMessage({\n                        \"event\": \"initialized\",\n                        imageData: imageWrapper.data\n                    }, [\n                        imageWrapper.data.buffer\n                    ]);\n                }\n            /* eslint-enable */ }\n            function generateWorkerBlob() {\n                var blob, factorySource;\n                /* jshint ignore:start */ if (typeof __factorySource__ !== \"undefined\") {\n                    factorySource = __factorySource__; // eslint-disable-line no-undef\n                }\n                /* jshint ignore:end */ blob = new Blob([\n                    \"(\" + workerInterface.toString() + \")(\" + factorySource + \");\"\n                ], {\n                    type: \"text/javascript\"\n                });\n                return window.URL.createObjectURL(blob);\n            }\n            function _setReaders(readers) {\n                if (_decoder) {\n                    _decoder.setReaders(readers);\n                } else if (_onUIThread && _workerPool.length > 0) {\n                    _workerPool.forEach(function(workerThread) {\n                        workerThread.worker.postMessage({\n                            cmd: \"setReaders\",\n                            readers: readers\n                        });\n                    });\n                }\n            }\n            function adjustWorkerPool(capacity, cb) {\n                var increaseBy = capacity - _workerPool.length;\n                if (increaseBy === 0) {\n                    return cb && cb();\n                }\n                if (increaseBy < 0) {\n                    var workersToTerminate = _workerPool.slice(increaseBy);\n                    workersToTerminate.forEach(function(workerThread) {\n                        workerThread.worker.terminate();\n                        if (false) {}\n                    });\n                    _workerPool = _workerPool.slice(0, increaseBy);\n                    return cb && cb();\n                } else {\n                    var workerInitialized = function workerInitialized(workerThread) {\n                        _workerPool.push(workerThread);\n                        if (_workerPool.length >= capacity) {\n                            cb && cb();\n                        }\n                    };\n                    for(var i = 0; i < increaseBy; i++){\n                        initWorker(workerInitialized);\n                    }\n                }\n            }\n            exports1.default = {\n                init: function init(config, cb, imageWrapper) {\n                    _config = (0, _merge3.default)({}, _config3.default, config);\n                    if (imageWrapper) {\n                        _onUIThread = false;\n                        initializeData(imageWrapper);\n                        return cb();\n                    } else {\n                        initInputStream(cb);\n                    }\n                },\n                start: function start() {\n                    _start();\n                },\n                stop: function stop() {\n                    _stopped = true;\n                    adjustWorkerPool(0);\n                    if (_config.inputStream.type === \"LiveStream\") {\n                        _camera_access2.default.release();\n                        _inputStream.clearEventHandlers();\n                    }\n                },\n                pause: function pause() {\n                    _stopped = true;\n                },\n                onDetected: function onDetected(callback) {\n                    _events2.default.subscribe(\"detected\", callback);\n                },\n                offDetected: function offDetected(callback) {\n                    _events2.default.unsubscribe(\"detected\", callback);\n                },\n                onProcessed: function onProcessed(callback) {\n                    _events2.default.subscribe(\"processed\", callback);\n                },\n                offProcessed: function offProcessed(callback) {\n                    _events2.default.unsubscribe(\"processed\", callback);\n                },\n                setReaders: function setReaders(readers) {\n                    _setReaders(readers);\n                },\n                registerResultCollector: function registerResultCollector(resultCollector) {\n                    if (resultCollector && typeof resultCollector.addResult === \"function\") {\n                        _resultCollector = resultCollector;\n                    }\n                },\n                canvas: _canvasContainer,\n                decodeSingle: function decodeSingle(config, resultCallback) {\n                    var _this = this;\n                    config = (0, _merge3.default)({\n                        inputStream: {\n                            type: \"ImageStream\",\n                            sequence: false,\n                            size: 800,\n                            src: config.src\n                        },\n                        numOfWorkers:  false ? 0 : 1,\n                        locator: {\n                            halfSample: false\n                        }\n                    }, config);\n                    this.init(config, function() {\n                        _events2.default.once(\"processed\", function(result) {\n                            _this.stop();\n                            resultCallback.call(null, result);\n                        }, true);\n                        _start();\n                    });\n                },\n                ImageWrapper: _image_wrapper2.default,\n                ImageDebug: _image_debug2.default,\n                ResultCollector: _result_collector2.default,\n                CameraAccess: _camera_access2.default\n            };\n        /***/ },\n        /* 49 */ /***/ function(module1, exports1, __nested_webpack_require_151420__) {\n            \"use strict\";\n            var CVUtils = __nested_webpack_require_151420__(19), Ndarray = __nested_webpack_require_151420__(165), Interp2D = __nested_webpack_require_151420__(166).d2;\n            var FrameGrabber = {};\n            FrameGrabber.create = function(inputStream) {\n                var _that = {}, _streamConfig = inputStream.getConfig(), _video_size = CVUtils.imageRef(inputStream.getRealWidth(), inputStream.getRealHeight()), _canvasSize = inputStream.getCanvasSize(), _size = CVUtils.imageRef(inputStream.getWidth(), inputStream.getHeight()), _topRight = inputStream.getTopRight(), _data = new Uint8Array(_size.x * _size.y), _grayData = new Uint8Array(_video_size.x * _video_size.y), _canvasData = new Uint8Array(_canvasSize.x * _canvasSize.y), _grayImageArray = Ndarray(_grayData, [\n                    _video_size.y,\n                    _video_size.x\n                ]).transpose(1, 0), _canvasImageArray = Ndarray(_canvasData, [\n                    _canvasSize.y,\n                    _canvasSize.x\n                ]).transpose(1, 0), _targetImageArray = _canvasImageArray.hi(_topRight.x + _size.x, _topRight.y + _size.y).lo(_topRight.x, _topRight.y), _stepSizeX = _video_size.x / _canvasSize.x, _stepSizeY = _video_size.y / _canvasSize.y;\n                console.log(\"FrameGrabber\", JSON.stringify({\n                    videoSize: _grayImageArray.shape,\n                    canvasSize: _canvasImageArray.shape,\n                    stepSize: [\n                        _stepSizeX,\n                        _stepSizeY\n                    ],\n                    size: _targetImageArray.shape,\n                    topRight: _topRight\n                }));\n                /**\n     * Uses the given array as frame-buffer\n     */ _that.attachData = function(data) {\n                    _data = data;\n                };\n                /**\n     * Returns the used frame-buffer\n     */ _that.getData = function() {\n                    return _data;\n                };\n                /**\n     * Fetches a frame from the input-stream and puts into the frame-buffer.\n     * The image-data is converted to gray-scale and then half-sampled if configured.\n     */ _that.grab = function() {\n                    var frame = inputStream.getFrame();\n                    if (frame) {\n                        this.scaleAndCrop(frame);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n                _that.scaleAndCrop = function(frame) {\n                    var x, y;\n                    // 1. compute full-sized gray image\n                    CVUtils.computeGray(frame.data, _grayData);\n                    // 2. interpolate\n                    for(y = 0; y < _canvasSize.y; y++){\n                        for(x = 0; x < _canvasSize.x; x++){\n                            _canvasImageArray.set(x, y, Interp2D(_grayImageArray, x * _stepSizeX, y * _stepSizeY) | 0);\n                        }\n                    }\n                    // targetImageArray must be equal to targetSize\n                    if (_targetImageArray.shape[0] !== _size.x || _targetImageArray.shape[1] !== _size.y) {\n                        throw new Error(\"Shapes do not match!\");\n                    }\n                    // 3. crop\n                    for(y = 0; y < _size.y; y++){\n                        for(x = 0; x < _size.x; x++){\n                            _data[y * _size.x + x] = _targetImageArray.get(x, y);\n                        }\n                    }\n                }, _that.getSize = function() {\n                    return _size;\n                };\n                return _that;\n            };\n            module1.exports = FrameGrabber;\n        /***/ },\n        /* 50 */ /***/ function(module1, exports1, __nested_webpack_require_155200__) {\n            \"use strict\";\n            var GetPixels = __nested_webpack_require_155200__(164);\n            var InputStream = {};\n            InputStream.createImageStream = function() {\n                var that = {};\n                var _config = null;\n                var width = 0, height = 0, frameIdx = 0, paused = true, loaded = false, frame = null, baseUrl, ended = false, size, calculatedWidth, calculatedHeight, _eventNames = [\n                    \"canrecord\",\n                    \"ended\"\n                ], _eventHandlers = {}, _topRight = {\n                    x: 0,\n                    y: 0\n                }, _canvasSize = {\n                    x: 0,\n                    y: 0\n                };\n                function loadImages() {\n                    loaded = false;\n                    GetPixels(baseUrl, _config.mime, function(err, pixels) {\n                        if (err) {\n                            console.log(err);\n                            exit(1);\n                        }\n                        loaded = true;\n                        console.log(pixels.shape);\n                        frame = pixels;\n                        width = pixels.shape[0];\n                        height = pixels.shape[1];\n                        calculatedWidth = _config.size ? width / height > 1 ? _config.size : Math.floor(width / height * _config.size) : width;\n                        calculatedHeight = _config.size ? width / height > 1 ? Math.floor(height / width * _config.size) : _config.size : height;\n                        _canvasSize.x = calculatedWidth;\n                        _canvasSize.y = calculatedHeight;\n                        setTimeout(function() {\n                            publishEvent(\"canrecord\", []);\n                        }, 0);\n                    });\n                }\n                function publishEvent(eventName, args) {\n                    var j, handlers = _eventHandlers[eventName];\n                    if (handlers && handlers.length > 0) {\n                        for(j = 0; j < handlers.length; j++){\n                            handlers[j].apply(that, args);\n                        }\n                    }\n                }\n                that.trigger = publishEvent;\n                that.getWidth = function() {\n                    return calculatedWidth;\n                };\n                that.getHeight = function() {\n                    return calculatedHeight;\n                };\n                that.setWidth = function(width) {\n                    calculatedWidth = width;\n                };\n                that.setHeight = function(height) {\n                    calculatedHeight = height;\n                };\n                that.getRealWidth = function() {\n                    return width;\n                };\n                that.getRealHeight = function() {\n                    return height;\n                };\n                that.setInputStream = function(stream) {\n                    _config = stream;\n                    baseUrl = _config.src;\n                    size = 1;\n                    loadImages();\n                };\n                that.ended = function() {\n                    return ended;\n                };\n                that.setAttribute = function() {};\n                that.getConfig = function() {\n                    return _config;\n                };\n                that.pause = function() {\n                    paused = true;\n                };\n                that.play = function() {\n                    paused = false;\n                };\n                that.setCurrentTime = function(time) {\n                    frameIdx = time;\n                };\n                that.addEventListener = function(event, f) {\n                    if (_eventNames.indexOf(event) !== -1) {\n                        if (!_eventHandlers[event]) {\n                            _eventHandlers[event] = [];\n                        }\n                        _eventHandlers[event].push(f);\n                    }\n                };\n                that.setTopRight = function(topRight) {\n                    _topRight.x = topRight.x;\n                    _topRight.y = topRight.y;\n                };\n                that.getTopRight = function() {\n                    return _topRight;\n                };\n                that.setCanvasSize = function(size) {\n                    _canvasSize.x = size.x;\n                    _canvasSize.y = size.y;\n                };\n                that.getCanvasSize = function() {\n                    return _canvasSize;\n                };\n                that.getFrame = function() {\n                    if (!loaded) {\n                        return null;\n                    }\n                    return frame;\n                };\n                return that;\n            };\n            module1.exports = InputStream;\n        /***/ },\n        /* 51 */ /***/ function(module1, exports1, __nested_webpack_require_160109__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _image_debug = __nested_webpack_require_160109__(9);\n            var _image_debug2 = _interopRequireDefault(_image_debug);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function contains(codeResult, list) {\n                if (list) {\n                    return list.some(function(item) {\n                        return Object.keys(item).every(function(key) {\n                            return item[key] === codeResult[key];\n                        });\n                    });\n                }\n                return false;\n            }\n            function passesFilter(codeResult, filter) {\n                if (typeof filter === \"function\") {\n                    return filter(codeResult);\n                }\n                return true;\n            }\n            exports1.default = {\n                create: function create(config) {\n                    var canvas = document.createElement(\"canvas\"), ctx = canvas.getContext(\"2d\"), results = [], capacity = config.capacity || 20, capture = config.capture === true;\n                    function matchesConstraints(codeResult) {\n                        return capacity && codeResult && !contains(codeResult, config.blacklist) && passesFilter(codeResult, config.filter);\n                    }\n                    return {\n                        addResult: function addResult(data, imageSize, codeResult) {\n                            var result = {};\n                            if (matchesConstraints(codeResult)) {\n                                capacity--;\n                                result.codeResult = codeResult;\n                                if (capture) {\n                                    canvas.width = imageSize.x;\n                                    canvas.height = imageSize.y;\n                                    _image_debug2.default.drawImage(data, imageSize, ctx);\n                                    result.frame = canvas.toDataURL();\n                                }\n                                results.push(result);\n                            }\n                        },\n                        getResults: function getResults() {\n                            return results;\n                        }\n                    };\n                }\n            };\n        /***/ },\n        /* 52 */ /***/ function(module1, exports1, __nested_webpack_require_162653__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var vec2 = {\n                clone: __nested_webpack_require_162653__(7),\n                dot: __nested_webpack_require_162653__(32)\n            };\n            /**\n * Creates a cluster for grouping similar orientations of datapoints\n */ exports1.default = {\n                create: function create(point, threshold) {\n                    var points = [], center = {\n                        rad: 0,\n                        vec: vec2.clone([\n                            0,\n                            0\n                        ])\n                    }, pointMap = {};\n                    function init() {\n                        _add(point);\n                        updateCenter();\n                    }\n                    function _add(pointToAdd) {\n                        pointMap[pointToAdd.id] = pointToAdd;\n                        points.push(pointToAdd);\n                    }\n                    function updateCenter() {\n                        var i, sum = 0;\n                        for(i = 0; i < points.length; i++){\n                            sum += points[i].rad;\n                        }\n                        center.rad = sum / points.length;\n                        center.vec = vec2.clone([\n                            Math.cos(center.rad),\n                            Math.sin(center.rad)\n                        ]);\n                    }\n                    init();\n                    return {\n                        add: function add(pointToAdd) {\n                            if (!pointMap[pointToAdd.id]) {\n                                _add(pointToAdd);\n                                updateCenter();\n                            }\n                        },\n                        fits: function fits(otherPoint) {\n                            // check cosine similarity to center-angle\n                            var similarity = Math.abs(vec2.dot(otherPoint.point.vec, center.vec));\n                            if (similarity > threshold) {\n                                return true;\n                            }\n                            return false;\n                        },\n                        getPoints: function getPoints() {\n                            return points;\n                        },\n                        getCenter: function getCenter() {\n                            return center;\n                        }\n                    };\n                },\n                createPoint: function createPoint(newPoint, id, property) {\n                    return {\n                        rad: newPoint[property],\n                        point: newPoint,\n                        id: id\n                    };\n                }\n            };\n        /***/ },\n        /* 53 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            exports1.default = function() {\n                var events = {};\n                function getEvent(eventName) {\n                    if (!events[eventName]) {\n                        events[eventName] = {\n                            subscribers: []\n                        };\n                    }\n                    return events[eventName];\n                }\n                function clearEvents() {\n                    events = {};\n                }\n                function publishSubscription(subscription, data) {\n                    if (subscription.async) {\n                        setTimeout(function() {\n                            subscription.callback(data);\n                        }, 4);\n                    } else {\n                        subscription.callback(data);\n                    }\n                }\n                function _subscribe(event, callback, async) {\n                    var subscription;\n                    if (typeof callback === \"function\") {\n                        subscription = {\n                            callback: callback,\n                            async: async\n                        };\n                    } else {\n                        subscription = callback;\n                        if (!subscription.callback) {\n                            throw \"Callback was not specified on options\";\n                        }\n                    }\n                    getEvent(event).subscribers.push(subscription);\n                }\n                return {\n                    subscribe: function subscribe(event, callback, async) {\n                        return _subscribe(event, callback, async);\n                    },\n                    publish: function publish(eventName, data) {\n                        var event = getEvent(eventName), subscribers = event.subscribers;\n                        // Publish one-time subscriptions\n                        subscribers.filter(function(subscriber) {\n                            return !!subscriber.once;\n                        }).forEach(function(subscriber) {\n                            publishSubscription(subscriber, data);\n                        });\n                        // remove them from the subscriber\n                        event.subscribers = subscribers.filter(function(subscriber) {\n                            return !subscriber.once;\n                        });\n                        // publish the rest\n                        event.subscribers.forEach(function(subscriber) {\n                            publishSubscription(subscriber, data);\n                        });\n                    },\n                    once: function once(event, callback, async) {\n                        _subscribe(event, {\n                            callback: callback,\n                            async: async,\n                            once: true\n                        });\n                    },\n                    unsubscribe: function unsubscribe(eventName, callback) {\n                        var event;\n                        if (eventName) {\n                            event = getEvent(eventName);\n                            if (event && callback) {\n                                event.subscribers = event.subscribers.filter(function(subscriber) {\n                                    return subscriber.callback !== callback;\n                                });\n                            } else {\n                                event.subscribers = [];\n                            }\n                        } else {\n                            clearEvents();\n                        }\n                    }\n                };\n            }();\n        /***/ },\n        /* 54 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            exports1.enumerateDevices = enumerateDevices;\n            exports1.getUserMedia = getUserMedia;\n            function enumerateDevices() {\n                if (navigator.mediaDevices && typeof navigator.mediaDevices.enumerateDevices === \"function\") {\n                    return navigator.mediaDevices.enumerateDevices();\n                }\n                return Promise.reject(new Error(\"enumerateDevices is not defined\"));\n            }\n            ;\n            function getUserMedia(constraints) {\n                if (navigator.mediaDevices && typeof navigator.mediaDevices.getUserMedia === \"function\") {\n                    return navigator.mediaDevices.getUserMedia(constraints);\n                }\n                return Promise.reject(new Error(\"getUserMedia is not defined\"));\n            }\n        /***/ },\n        /* 55 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            /**\n * Construct representing a part of another {ImageWrapper}. Shares data\n * between the parent and the child.\n * @param from {ImageRef} The position where to start the {SubImage} from. (top-left corner)\n * @param size {ImageRef} The size of the resulting image\n * @param I {ImageWrapper} The {ImageWrapper} to share from\n * @returns {SubImage} A shared part of the original image\n */ function SubImage(from, size, I) {\n                if (!I) {\n                    I = {\n                        data: null,\n                        size: size\n                    };\n                }\n                this.data = I.data;\n                this.originalSize = I.size;\n                this.I = I;\n                this.from = from;\n                this.size = size;\n            }\n            /**\n * Displays the {SubImage} in a given canvas\n * @param canvas {Canvas} The canvas element to write to\n * @param scale {Number} Scale which is applied to each pixel-value\n */ SubImage.prototype.show = function(canvas, scale) {\n                var ctx, frame, data, current, y, x, pixel;\n                if (!scale) {\n                    scale = 1.0;\n                }\n                ctx = canvas.getContext(\"2d\");\n                canvas.width = this.size.x;\n                canvas.height = this.size.y;\n                frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                data = frame.data;\n                current = 0;\n                for(y = 0; y < this.size.y; y++){\n                    for(x = 0; x < this.size.x; x++){\n                        pixel = y * this.size.x + x;\n                        current = this.get(x, y) * scale;\n                        data[pixel * 4 + 0] = current;\n                        data[pixel * 4 + 1] = current;\n                        data[pixel * 4 + 2] = current;\n                        data[pixel * 4 + 3] = 255;\n                    }\n                }\n                frame.data = data;\n                ctx.putImageData(frame, 0, 0);\n            };\n            /**\n * Retrieves a given pixel position from the {SubImage}\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @returns {Number} The grayscale value at the pixel-position\n */ SubImage.prototype.get = function(x, y) {\n                return this.data[(this.from.y + y) * this.originalSize.x + this.from.x + x];\n            };\n            /**\n * Updates the underlying data from a given {ImageWrapper}\n * @param image {ImageWrapper} The updated image\n */ SubImage.prototype.updateData = function(image) {\n                this.originalSize = image.size;\n                this.data = image.data;\n            };\n            /**\n * Updates the position of the shared area\n * @param from {x,y} The new location\n * @returns {SubImage} returns {this} for possible chaining\n */ SubImage.prototype.updateFrom = function(from) {\n                this.from = from;\n                return this;\n            };\n            exports1.default = SubImage;\n        /***/ },\n        /* 56 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            /*\n * typedefs.js\n * Normalizes browser-specific prefixes\n */ if (false) {}\n            Math.imul = Math.imul || function(a, b) {\n                var ah = a >>> 16 & 0xffff, al = a & 0xffff, bh = b >>> 16 & 0xffff, bl = b & 0xffff;\n                // the shift by 0 fixes the sign on the high part\n                // the final |0 converts the unsigned value into a signed value\n                return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n            };\n            if (typeof Object.assign !== \"function\") {\n                Object.assign = function(target) {\n                    // .length of function is 2\n                    \"use strict\";\n                    if (target === null) {\n                        // TypeError if undefined or null\n                        throw new TypeError(\"Cannot convert undefined or null to object\");\n                    }\n                    var to = Object(target);\n                    for(var index = 1; index < arguments.length; index++){\n                        var nextSource = arguments[index];\n                        if (nextSource !== null) {\n                            // Skip over if undefined or null\n                            for(var nextKey in nextSource){\n                                // Avoid bugs when hasOwnProperty is shadowed\n                                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                                    to[nextKey] = nextSource[nextKey];\n                                }\n                            }\n                        }\n                    }\n                    return to;\n                };\n            }\n        /***/ },\n        /* 57 */ /***/ function(module1, exports1, __nested_webpack_require_175661__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var config = void 0;\n            if (false) {} else if (true) {\n                config = __nested_webpack_require_175661__(58);\n            } else {}\n            exports1.default = config;\n        /***/ },\n        /* 58 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            module1.exports = {\n                inputStream: {\n                    type: \"ImageStream\",\n                    sequence: false,\n                    size: 800,\n                    area: {\n                        top: \"0%\",\n                        right: \"0%\",\n                        left: \"0%\",\n                        bottom: \"0%\"\n                    },\n                    singleChannel: false // true: only the red color-channel is read\n                },\n                locate: true,\n                numOfWorkers: 0,\n                decoder: {\n                    readers: [\n                        \"code_128_reader\"\n                    ]\n                },\n                locator: {\n                    halfSample: true,\n                    patchSize: \"medium\" // x-small, small, medium, large, x-large\n                }\n            };\n        /***/ },\n        /* 59 */ /***/ function(module1, exports1, __nested_webpack_require_177111__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n                return typeof obj;\n            } : function(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            var _bresenham = __nested_webpack_require_177111__(60);\n            var _bresenham2 = _interopRequireDefault(_bresenham);\n            var _image_debug = __nested_webpack_require_177111__(9);\n            var _image_debug2 = _interopRequireDefault(_image_debug);\n            var _code_128_reader = __nested_webpack_require_177111__(67);\n            var _code_128_reader2 = _interopRequireDefault(_code_128_reader);\n            var _ean_reader = __nested_webpack_require_177111__(4);\n            var _ean_reader2 = _interopRequireDefault(_ean_reader);\n            var _code_39_reader = __nested_webpack_require_177111__(31);\n            var _code_39_reader2 = _interopRequireDefault(_code_39_reader);\n            var _code_39_vin_reader = __nested_webpack_require_177111__(68);\n            var _code_39_vin_reader2 = _interopRequireDefault(_code_39_vin_reader);\n            var _codabar_reader = __nested_webpack_require_177111__(66);\n            var _codabar_reader2 = _interopRequireDefault(_codabar_reader);\n            var _upc_reader = __nested_webpack_require_177111__(75);\n            var _upc_reader2 = _interopRequireDefault(_upc_reader);\n            var _ean_8_reader = __nested_webpack_require_177111__(72);\n            var _ean_8_reader2 = _interopRequireDefault(_ean_8_reader);\n            var _ean_2_reader = __nested_webpack_require_177111__(70);\n            var _ean_2_reader2 = _interopRequireDefault(_ean_2_reader);\n            var _ean_5_reader = __nested_webpack_require_177111__(71);\n            var _ean_5_reader2 = _interopRequireDefault(_ean_5_reader);\n            var _upc_e_reader = __nested_webpack_require_177111__(74);\n            var _upc_e_reader2 = _interopRequireDefault(_upc_e_reader);\n            var _i2of5_reader = __nested_webpack_require_177111__(73);\n            var _i2of5_reader2 = _interopRequireDefault(_i2of5_reader);\n            var _of5_reader = __nested_webpack_require_177111__(65);\n            var _of5_reader2 = _interopRequireDefault(_of5_reader);\n            var _code_93_reader = __nested_webpack_require_177111__(69);\n            var _code_93_reader2 = _interopRequireDefault(_code_93_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var READERS = {\n                code_128_reader: _code_128_reader2.default,\n                ean_reader: _ean_reader2.default,\n                ean_5_reader: _ean_5_reader2.default,\n                ean_2_reader: _ean_2_reader2.default,\n                ean_8_reader: _ean_8_reader2.default,\n                code_39_reader: _code_39_reader2.default,\n                code_39_vin_reader: _code_39_vin_reader2.default,\n                codabar_reader: _codabar_reader2.default,\n                upc_reader: _upc_reader2.default,\n                upc_e_reader: _upc_e_reader2.default,\n                i2of5_reader: _i2of5_reader2.default,\n                \"2of5_reader\": _of5_reader2.default,\n                code_93_reader: _code_93_reader2.default\n            };\n            exports1.default = {\n                create: function create(config, inputImageWrapper) {\n                    var _canvas = {\n                        ctx: {\n                            frequency: null,\n                            pattern: null,\n                            overlay: null\n                        },\n                        dom: {\n                            frequency: null,\n                            pattern: null,\n                            overlay: null\n                        }\n                    }, _barcodeReaders = [];\n                    initCanvas();\n                    initReaders();\n                    initConfig();\n                    function initCanvas() {\n                        if (false) { var $debug; }\n                    }\n                    function initReaders() {\n                        config.readers.forEach(function(readerConfig) {\n                            var reader, configuration = {}, supplements = [];\n                            if ((typeof readerConfig === \"undefined\" ? \"undefined\" : _typeof(readerConfig)) === \"object\") {\n                                reader = readerConfig.format;\n                                configuration = readerConfig.config;\n                            } else if (typeof readerConfig === \"string\") {\n                                reader = readerConfig;\n                            }\n                            if (false) {}\n                            if (configuration.supplements) {\n                                supplements = configuration.supplements.map(function(supplement) {\n                                    return new READERS[supplement]();\n                                });\n                            }\n                            _barcodeReaders.push(new READERS[reader](configuration, supplements));\n                        });\n                        if (false) {}\n                    }\n                    function initConfig() {\n                        if (false) { var i, vis; }\n                    }\n                    /**\n         * extend the line on both ends\n         * @param {Array} line\n         * @param {Number} angle\n         */ function getExtendedLine(line, angle, ext) {\n                        function extendLine(amount) {\n                            var extension = {\n                                y: amount * Math.sin(angle),\n                                x: amount * Math.cos(angle)\n                            };\n                            line[0].y -= extension.y;\n                            line[0].x -= extension.x;\n                            line[1].y += extension.y;\n                            line[1].x += extension.x;\n                        }\n                        // check if inside image\n                        extendLine(ext);\n                        while(ext > 1 && (!inputImageWrapper.inImageWithBorder(line[0], 0) || !inputImageWrapper.inImageWithBorder(line[1], 0))){\n                            ext -= Math.ceil(ext / 2);\n                            extendLine(-ext);\n                        }\n                        return line;\n                    }\n                    function getLine(box) {\n                        return [\n                            {\n                                x: (box[1][0] - box[0][0]) / 2 + box[0][0],\n                                y: (box[1][1] - box[0][1]) / 2 + box[0][1]\n                            },\n                            {\n                                x: (box[3][0] - box[2][0]) / 2 + box[2][0],\n                                y: (box[3][1] - box[2][1]) / 2 + box[2][1]\n                            }\n                        ];\n                    }\n                    function tryDecode(line) {\n                        var result = null, i, barcodeLine = _bresenham2.default.getBarcodeLine(inputImageWrapper, line[0], line[1]);\n                        if (false) {}\n                        _bresenham2.default.toBinaryLine(barcodeLine);\n                        if (false) {}\n                        for(i = 0; i < _barcodeReaders.length && result === null; i++){\n                            result = _barcodeReaders[i].decodePattern(barcodeLine.line);\n                        }\n                        if (result === null) {\n                            return null;\n                        }\n                        return {\n                            codeResult: result,\n                            barcodeLine: barcodeLine\n                        };\n                    }\n                    /**\n         * This method slices the given area apart and tries to detect a barcode-pattern\n         * for each slice. It returns the decoded barcode, or null if nothing was found\n         * @param {Array} box\n         * @param {Array} line\n         * @param {Number} lineAngle\n         */ function tryDecodeBruteForce(box, line, lineAngle) {\n                        var sideLength = Math.sqrt(Math.pow(box[1][0] - box[0][0], 2) + Math.pow(box[1][1] - box[0][1], 2)), i, slices = 16, result = null, dir, extension, xdir = Math.sin(lineAngle), ydir = Math.cos(lineAngle);\n                        for(i = 1; i < slices && result === null; i++){\n                            // move line perpendicular to angle\n                            dir = sideLength / slices * i * (i % 2 === 0 ? -1 : 1);\n                            extension = {\n                                y: dir * xdir,\n                                x: dir * ydir\n                            };\n                            line[0].y += extension.x;\n                            line[0].x -= extension.y;\n                            line[1].y += extension.x;\n                            line[1].x -= extension.y;\n                            result = tryDecode(line);\n                        }\n                        return result;\n                    }\n                    function getLineLength(line) {\n                        return Math.sqrt(Math.pow(Math.abs(line[1].y - line[0].y), 2) + Math.pow(Math.abs(line[1].x - line[0].x), 2));\n                    }\n                    /**\n         * With the help of the configured readers (Code128 or EAN) this function tries to detect a\n         * valid barcode pattern within the given area.\n         * @param {Object} box The area to search in\n         * @returns {Object} the result {codeResult, line, angle, pattern, threshold}\n         */ function _decodeFromBoundingBox(box) {\n                        var line, lineAngle, ctx = _canvas.ctx.overlay, result, lineLength;\n                        if (false) {}\n                        line = getLine(box);\n                        lineLength = getLineLength(line);\n                        lineAngle = Math.atan2(line[1].y - line[0].y, line[1].x - line[0].x);\n                        line = getExtendedLine(line, lineAngle, Math.floor(lineLength * 0.1));\n                        if (line === null) {\n                            return null;\n                        }\n                        result = tryDecode(line);\n                        if (result === null) {\n                            result = tryDecodeBruteForce(box, line, lineAngle);\n                        }\n                        if (result === null) {\n                            return null;\n                        }\n                        if (false) {}\n                        return {\n                            codeResult: result.codeResult,\n                            line: line,\n                            angle: lineAngle,\n                            pattern: result.barcodeLine.line,\n                            threshold: result.barcodeLine.threshold\n                        };\n                    }\n                    return {\n                        decodeFromBoundingBox: function decodeFromBoundingBox(box) {\n                            return _decodeFromBoundingBox(box);\n                        },\n                        decodeFromBoundingBoxes: function decodeFromBoundingBoxes(boxes) {\n                            var i, result, barcodes = [], multiple = config.multiple;\n                            for(i = 0; i < boxes.length; i++){\n                                var box = boxes[i];\n                                result = _decodeFromBoundingBox(box) || {};\n                                result.box = box;\n                                if (multiple) {\n                                    barcodes.push(result);\n                                } else if (result.codeResult) {\n                                    return result;\n                                }\n                            }\n                            if (multiple) {\n                                return {\n                                    barcodes: barcodes\n                                };\n                            }\n                        },\n                        setReaders: function setReaders(readers) {\n                            config.readers = readers;\n                            _barcodeReaders.length = 0;\n                            initReaders();\n                        }\n                    };\n                }\n            };\n        /***/ },\n        /* 60 */ /***/ function(module1, exports1, __nested_webpack_require_193905__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _image_wrapper = __nested_webpack_require_193905__(20);\n            var _image_wrapper2 = _interopRequireDefault(_image_wrapper);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var Bresenham = {};\n            var Slope = {\n                DIR: {\n                    UP: 1,\n                    DOWN: -1\n                }\n            };\n            /**\n * Scans a line of the given image from point p1 to p2 and returns a result object containing\n * gray-scale values (0-255) of the underlying pixels in addition to the min\n * and max values.\n * @param {Object} imageWrapper\n * @param {Object} p1 The start point {x,y}\n * @param {Object} p2 The end point {x,y}\n * @returns {line, min, max}\n */ Bresenham.getBarcodeLine = function(imageWrapper, p1, p2) {\n                var x0 = p1.x | 0, y0 = p1.y | 0, x1 = p2.x | 0, y1 = p2.y | 0, steep = Math.abs(y1 - y0) > Math.abs(x1 - x0), deltax, deltay, error, ystep, y, tmp, x, line = [], imageData = imageWrapper.data, width = imageWrapper.size.x, sum = 0, val, min = 255, max = 0;\n                function read(a, b) {\n                    val = imageData[b * width + a];\n                    sum += val;\n                    min = val < min ? val : min;\n                    max = val > max ? val : max;\n                    line.push(val);\n                }\n                if (steep) {\n                    tmp = x0;\n                    x0 = y0;\n                    y0 = tmp;\n                    tmp = x1;\n                    x1 = y1;\n                    y1 = tmp;\n                }\n                if (x0 > x1) {\n                    tmp = x0;\n                    x0 = x1;\n                    x1 = tmp;\n                    tmp = y0;\n                    y0 = y1;\n                    y1 = tmp;\n                }\n                deltax = x1 - x0;\n                deltay = Math.abs(y1 - y0);\n                error = deltax / 2 | 0;\n                y = y0;\n                ystep = y0 < y1 ? 1 : -1;\n                for(x = x0; x < x1; x++){\n                    if (steep) {\n                        read(y, x);\n                    } else {\n                        read(x, y);\n                    }\n                    error = error - deltay;\n                    if (error < 0) {\n                        y = y + ystep;\n                        error = error + deltax;\n                    }\n                }\n                return {\n                    line: line,\n                    min: min,\n                    max: max\n                };\n            };\n            /**\n * Converts the result from getBarcodeLine into a binary representation\n * also considering the frequency and slope of the signal for more robust results\n * @param {Object} result {line, min, max}\n */ Bresenham.toBinaryLine = function(result) {\n                var min = result.min, max = result.max, line = result.line, slope, slope2, center = min + (max - min) / 2, extrema = [], currentDir, dir, threshold = (max - min) / 12, rThreshold = -threshold, i, j;\n                // 1. find extrema\n                currentDir = line[0] > center ? Slope.DIR.UP : Slope.DIR.DOWN;\n                extrema.push({\n                    pos: 0,\n                    val: line[0]\n                });\n                for(i = 0; i < line.length - 2; i++){\n                    slope = line[i + 1] - line[i];\n                    slope2 = line[i + 2] - line[i + 1];\n                    if (slope + slope2 < rThreshold && line[i + 1] < center * 1.5) {\n                        dir = Slope.DIR.DOWN;\n                    } else if (slope + slope2 > threshold && line[i + 1] > center * 0.5) {\n                        dir = Slope.DIR.UP;\n                    } else {\n                        dir = currentDir;\n                    }\n                    if (currentDir !== dir) {\n                        extrema.push({\n                            pos: i,\n                            val: line[i]\n                        });\n                        currentDir = dir;\n                    }\n                }\n                extrema.push({\n                    pos: line.length,\n                    val: line[line.length - 1]\n                });\n                for(j = extrema[0].pos; j < extrema[1].pos; j++){\n                    line[j] = line[j] > center ? 0 : 1;\n                }\n                // iterate over extrema and convert to binary based on avg between minmax\n                for(i = 1; i < extrema.length - 1; i++){\n                    if (extrema[i + 1].val > extrema[i].val) {\n                        threshold = extrema[i].val + (extrema[i + 1].val - extrema[i].val) / 3 * 2 | 0;\n                    } else {\n                        threshold = extrema[i + 1].val + (extrema[i].val - extrema[i + 1].val) / 3 | 0;\n                    }\n                    for(j = extrema[i].pos; j < extrema[i + 1].pos; j++){\n                        line[j] = line[j] > threshold ? 0 : 1;\n                    }\n                }\n                return {\n                    line: line,\n                    threshold: threshold\n                };\n            };\n            /**\n * Used for development only\n */ Bresenham.debug = {\n                printFrequency: function printFrequency(line, canvas) {\n                    var i, ctx = canvas.getContext(\"2d\");\n                    canvas.width = line.length;\n                    canvas.height = 256;\n                    ctx.beginPath();\n                    ctx.strokeStyle = \"blue\";\n                    for(i = 0; i < line.length; i++){\n                        ctx.moveTo(i, 255);\n                        ctx.lineTo(i, 255 - line[i]);\n                    }\n                    ctx.stroke();\n                    ctx.closePath();\n                },\n                printPattern: function printPattern(line, canvas) {\n                    var ctx = canvas.getContext(\"2d\"), i;\n                    canvas.width = line.length;\n                    ctx.fillColor = \"black\";\n                    for(i = 0; i < line.length; i++){\n                        if (line[i] === 1) {\n                            ctx.fillRect(i, 0, 1, 100);\n                        }\n                    }\n                }\n            };\n            exports1.default = Bresenham;\n        /***/ },\n        /* 61 */ /***/ function(module1, exports1, __nested_webpack_require_200372__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _pick2 = __nested_webpack_require_200372__(160);\n            var _pick3 = _interopRequireDefault(_pick2);\n            exports1.pickConstraints = pickConstraints;\n            var _mediaDevices = __nested_webpack_require_200372__(54);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            var facingMatching = {\n                \"user\": /front/i,\n                \"environment\": /back/i\n            };\n            var streamRef;\n            function waitForVideo(video) {\n                return new Promise(function(resolve, reject) {\n                    var attempts = 10;\n                    function checkVideo() {\n                        if (attempts > 0) {\n                            if (video.videoWidth > 10 && video.videoHeight > 10) {\n                                if (false) {}\n                                resolve();\n                            } else {\n                                window.setTimeout(checkVideo, 500);\n                            }\n                        } else {\n                            reject(\"Unable to play video stream. Is webcam working?\");\n                        }\n                        attempts--;\n                    }\n                    checkVideo();\n                });\n            }\n            /**\n * Tries to attach the camera-stream to a given video-element\n * and calls the callback function when the content is ready\n * @param {Object} constraints\n * @param {Object} video\n */ function initCamera(video, constraints) {\n                return (0, _mediaDevices.getUserMedia)(constraints).then(function(stream) {\n                    return new Promise(function(resolve) {\n                        streamRef = stream;\n                        video.setAttribute(\"autoplay\", true);\n                        video.setAttribute(\"muted\", true);\n                        video.setAttribute(\"playsinline\", true);\n                        video.srcObject = stream;\n                        video.addEventListener(\"loadedmetadata\", function() {\n                            video.play();\n                            resolve();\n                        });\n                    });\n                }).then(waitForVideo.bind(null, video));\n            }\n            function deprecatedConstraints(videoConstraints) {\n                var normalized = (0, _pick3.default)(videoConstraints, [\n                    \"width\",\n                    \"height\",\n                    \"facingMode\",\n                    \"aspectRatio\",\n                    \"deviceId\"\n                ]);\n                if (typeof videoConstraints.minAspectRatio !== \"undefined\" && videoConstraints.minAspectRatio > 0) {\n                    normalized.aspectRatio = videoConstraints.minAspectRatio;\n                    console.log(\"WARNING: Constraint 'minAspectRatio' is deprecated; Use 'aspectRatio' instead\");\n                }\n                if (typeof videoConstraints.facing !== \"undefined\") {\n                    normalized.facingMode = videoConstraints.facing;\n                    console.log(\"WARNING: Constraint 'facing' is deprecated. Use 'facingMode' instead'\");\n                }\n                return normalized;\n            }\n            function pickConstraints(videoConstraints) {\n                var normalizedConstraints = {\n                    audio: false,\n                    video: deprecatedConstraints(videoConstraints)\n                };\n                if (normalizedConstraints.video.deviceId && normalizedConstraints.video.facingMode) {\n                    delete normalizedConstraints.video.facingMode;\n                }\n                return Promise.resolve(normalizedConstraints);\n            }\n            function enumerateVideoDevices() {\n                return (0, _mediaDevices.enumerateDevices)().then(function(devices) {\n                    return devices.filter(function(device) {\n                        return device.kind === \"videoinput\";\n                    });\n                });\n            }\n            function getActiveTrack() {\n                if (streamRef) {\n                    var tracks = streamRef.getVideoTracks();\n                    if (tracks && tracks.length) {\n                        return tracks[0];\n                    }\n                }\n            }\n            exports1.default = {\n                request: function request(video, videoConstraints) {\n                    return pickConstraints(videoConstraints).then(initCamera.bind(null, video));\n                },\n                release: function release() {\n                    var tracks = streamRef && streamRef.getVideoTracks();\n                    if (tracks && tracks.length) {\n                        tracks[0].stop();\n                    }\n                    streamRef = null;\n                },\n                enumerateVideoDevices: enumerateVideoDevices,\n                getActiveStreamLabel: function getActiveStreamLabel() {\n                    var track = getActiveTrack();\n                    return track ? track.label : \"\";\n                },\n                getActiveTrack: getActiveTrack\n            };\n        /***/ },\n        /* 62 */ /***/ function(module1, exports1, __nested_webpack_require_205838__) {\n            \"use strict\";\n            /* WEBPACK VAR INJECTION */ (function(global) {\n                exports1.__esModule = true;\n                var _image_wrapper = __nested_webpack_require_205838__(20);\n                var _image_wrapper2 = _interopRequireDefault(_image_wrapper);\n                var _cv_utils = __nested_webpack_require_205838__(19);\n                var _array_helper = __nested_webpack_require_205838__(3);\n                var _array_helper2 = _interopRequireDefault(_array_helper);\n                var _image_debug = __nested_webpack_require_205838__(9);\n                var _image_debug2 = _interopRequireDefault(_image_debug);\n                var _rasterizer = __nested_webpack_require_205838__(63);\n                var _rasterizer2 = _interopRequireDefault(_rasterizer);\n                var _tracer = __nested_webpack_require_205838__(30);\n                var _tracer2 = _interopRequireDefault(_tracer);\n                var _skeletonizer2 = __nested_webpack_require_205838__(64);\n                var _skeletonizer3 = _interopRequireDefault(_skeletonizer2);\n                function _interopRequireDefault(obj) {\n                    return obj && obj.__esModule ? obj : {\n                        default: obj\n                    };\n                }\n                var vec2 = {\n                    clone: __nested_webpack_require_205838__(7),\n                    dot: __nested_webpack_require_205838__(32),\n                    scale: __nested_webpack_require_205838__(79),\n                    transformMat2: __nested_webpack_require_205838__(80)\n                };\n                var mat2 = {\n                    copy: __nested_webpack_require_205838__(76),\n                    create: __nested_webpack_require_205838__(77),\n                    invert: __nested_webpack_require_205838__(78)\n                };\n                var _config, _currentImageWrapper, _skelImageWrapper, _subImageWrapper, _labelImageWrapper, _patchGrid, _patchLabelGrid, _imageToPatchGrid, _binaryImageWrapper, _patchSize, _canvasContainer = {\n                    ctx: {\n                        binary: null\n                    },\n                    dom: {\n                        binary: null\n                    }\n                }, _numPatches = {\n                    x: 0,\n                    y: 0\n                }, _inputImageWrapper, _skeletonizer;\n                function initBuffers() {\n                    var skeletonImageData;\n                    if (_config.halfSample) {\n                        _currentImageWrapper = new _image_wrapper2.default({\n                            x: _inputImageWrapper.size.x / 2 | 0,\n                            y: _inputImageWrapper.size.y / 2 | 0\n                        });\n                    } else {\n                        _currentImageWrapper = _inputImageWrapper;\n                    }\n                    _patchSize = (0, _cv_utils.calculatePatchSize)(_config.patchSize, _currentImageWrapper.size);\n                    _numPatches.x = _currentImageWrapper.size.x / _patchSize.x | 0;\n                    _numPatches.y = _currentImageWrapper.size.y / _patchSize.y | 0;\n                    _binaryImageWrapper = new _image_wrapper2.default(_currentImageWrapper.size, undefined, Uint8Array, false);\n                    _labelImageWrapper = new _image_wrapper2.default(_patchSize, undefined, Array, true);\n                    skeletonImageData = new ArrayBuffer(64 * 1024);\n                    _subImageWrapper = new _image_wrapper2.default(_patchSize, new Uint8Array(skeletonImageData, 0, _patchSize.x * _patchSize.y));\n                    _skelImageWrapper = new _image_wrapper2.default(_patchSize, new Uint8Array(skeletonImageData, _patchSize.x * _patchSize.y * 3, _patchSize.x * _patchSize.y), undefined, true);\n                    _skeletonizer = (0, _skeletonizer3.default)( false ? 0 : typeof self !== \"undefined\" ? self : global, {\n                        size: _patchSize.x\n                    }, skeletonImageData);\n                    _imageToPatchGrid = new _image_wrapper2.default({\n                        x: _currentImageWrapper.size.x / _subImageWrapper.size.x | 0,\n                        y: _currentImageWrapper.size.y / _subImageWrapper.size.y | 0\n                    }, undefined, Array, true);\n                    _patchGrid = new _image_wrapper2.default(_imageToPatchGrid.size, undefined, undefined, true);\n                    _patchLabelGrid = new _image_wrapper2.default(_imageToPatchGrid.size, undefined, Int32Array, true);\n                }\n                function initCanvas() {\n                    if (_config.useWorker || typeof document === \"undefined\") {\n                        return;\n                    }\n                    _canvasContainer.dom.binary = document.createElement(\"canvas\");\n                    _canvasContainer.dom.binary.className = \"binaryBuffer\";\n                    if (false) {}\n                    _canvasContainer.ctx.binary = _canvasContainer.dom.binary.getContext(\"2d\");\n                    _canvasContainer.dom.binary.width = _binaryImageWrapper.size.x;\n                    _canvasContainer.dom.binary.height = _binaryImageWrapper.size.y;\n                }\n                /**\n * Creates a bounding box which encloses all the given patches\n * @returns {Array} The minimal bounding box\n */ function boxFromPatches(patches) {\n                    var overAvg, i, j, patch, transMat, minx = _binaryImageWrapper.size.x, miny = _binaryImageWrapper.size.y, maxx = -_binaryImageWrapper.size.x, maxy = -_binaryImageWrapper.size.y, box, scale;\n                    // draw all patches which are to be taken into consideration\n                    overAvg = 0;\n                    for(i = 0; i < patches.length; i++){\n                        patch = patches[i];\n                        overAvg += patch.rad;\n                        if (false) {}\n                    }\n                    overAvg /= patches.length;\n                    overAvg = (overAvg * 180 / Math.PI + 90) % 180 - 90;\n                    if (overAvg < 0) {\n                        overAvg += 180;\n                    }\n                    overAvg = (180 - overAvg) * Math.PI / 180;\n                    transMat = mat2.copy(mat2.create(), [\n                        Math.cos(overAvg),\n                        Math.sin(overAvg),\n                        -Math.sin(overAvg),\n                        Math.cos(overAvg)\n                    ]);\n                    // iterate over patches and rotate by angle\n                    for(i = 0; i < patches.length; i++){\n                        patch = patches[i];\n                        for(j = 0; j < 4; j++){\n                            vec2.transformMat2(patch.box[j], patch.box[j], transMat);\n                        }\n                        if (false) {}\n                    }\n                    // find bounding box\n                    for(i = 0; i < patches.length; i++){\n                        patch = patches[i];\n                        for(j = 0; j < 4; j++){\n                            if (patch.box[j][0] < minx) {\n                                minx = patch.box[j][0];\n                            }\n                            if (patch.box[j][0] > maxx) {\n                                maxx = patch.box[j][0];\n                            }\n                            if (patch.box[j][1] < miny) {\n                                miny = patch.box[j][1];\n                            }\n                            if (patch.box[j][1] > maxy) {\n                                maxy = patch.box[j][1];\n                            }\n                        }\n                    }\n                    box = [\n                        [\n                            minx,\n                            miny\n                        ],\n                        [\n                            maxx,\n                            miny\n                        ],\n                        [\n                            maxx,\n                            maxy\n                        ],\n                        [\n                            minx,\n                            maxy\n                        ]\n                    ];\n                    if (false) {}\n                    scale = _config.halfSample ? 2 : 1;\n                    // reverse rotation;\n                    transMat = mat2.invert(transMat, transMat);\n                    for(j = 0; j < 4; j++){\n                        vec2.transformMat2(box[j], box[j], transMat);\n                    }\n                    if (false) {}\n                    for(j = 0; j < 4; j++){\n                        vec2.scale(box[j], box[j], scale);\n                    }\n                    return box;\n                }\n                /**\n * Creates a binary image of the current image\n */ function binarizeImage() {\n                    (0, _cv_utils.otsuThreshold)(_currentImageWrapper, _binaryImageWrapper);\n                    _binaryImageWrapper.zeroBorder();\n                    if (false) {}\n                }\n                /**\n * Iterate over the entire image\n * extract patches\n */ function findPatches() {\n                    var i, j, x, y, moments, patchesFound = [], rasterizer, rasterResult, patch;\n                    for(i = 0; i < _numPatches.x; i++){\n                        for(j = 0; j < _numPatches.y; j++){\n                            x = _subImageWrapper.size.x * i;\n                            y = _subImageWrapper.size.y * j;\n                            // seperate parts\n                            skeletonize(x, y);\n                            // Rasterize, find individual bars\n                            _skelImageWrapper.zeroBorder();\n                            _array_helper2.default.init(_labelImageWrapper.data, 0);\n                            rasterizer = _rasterizer2.default.create(_skelImageWrapper, _labelImageWrapper);\n                            rasterResult = rasterizer.rasterize(0);\n                            if (false) {}\n                            // calculate moments from the skeletonized patch\n                            moments = _labelImageWrapper.moments(rasterResult.count);\n                            // extract eligible patches\n                            patchesFound = patchesFound.concat(describePatch(moments, [\n                                i,\n                                j\n                            ], x, y));\n                        }\n                    }\n                    if (false) {}\n                    return patchesFound;\n                }\n                /**\n * Finds those connected areas which contain at least 6 patches\n * and returns them ordered DESC by the number of contained patches\n * @param {Number} maxLabel\n */ function findBiggestConnectedAreas(maxLabel) {\n                    var i, sum, labelHist = [], topLabels = [];\n                    for(i = 0; i < maxLabel; i++){\n                        labelHist.push(0);\n                    }\n                    sum = _patchLabelGrid.data.length;\n                    while(sum--){\n                        if (_patchLabelGrid.data[sum] > 0) {\n                            labelHist[_patchLabelGrid.data[sum] - 1]++;\n                        }\n                    }\n                    labelHist = labelHist.map(function(val, idx) {\n                        return {\n                            val: val,\n                            label: idx + 1\n                        };\n                    });\n                    labelHist.sort(function(a, b) {\n                        return b.val - a.val;\n                    });\n                    // extract top areas with at least 6 patches present\n                    topLabels = labelHist.filter(function(el) {\n                        return el.val >= 5;\n                    });\n                    return topLabels;\n                }\n                /**\n *\n */ function findBoxes(topLabels, maxLabel) {\n                    var i, j, sum, patches = [], patch, box, boxes = [], hsv = [\n                        0,\n                        1,\n                        1\n                    ], rgb = [\n                        0,\n                        0,\n                        0\n                    ];\n                    for(i = 0; i < topLabels.length; i++){\n                        sum = _patchLabelGrid.data.length;\n                        patches.length = 0;\n                        while(sum--){\n                            if (_patchLabelGrid.data[sum] === topLabels[i].label) {\n                                patch = _imageToPatchGrid.data[sum];\n                                patches.push(patch);\n                            }\n                        }\n                        box = boxFromPatches(patches);\n                        if (box) {\n                            boxes.push(box);\n                            // draw patch-labels if requested\n                            if (false) {}\n                        }\n                    }\n                    return boxes;\n                }\n                /**\n * Find similar moments (via cluster)\n * @param {Object} moments\n */ function similarMoments(moments) {\n                    var clusters = (0, _cv_utils.cluster)(moments, 0.90);\n                    var topCluster = (0, _cv_utils.topGeneric)(clusters, 1, function(e) {\n                        return e.getPoints().length;\n                    });\n                    var points = [], result = [];\n                    if (topCluster.length === 1) {\n                        points = topCluster[0].item.getPoints();\n                        for(var i = 0; i < points.length; i++){\n                            result.push(points[i].point);\n                        }\n                    }\n                    return result;\n                }\n                function skeletonize(x, y) {\n                    _binaryImageWrapper.subImageAsCopy(_subImageWrapper, (0, _cv_utils.imageRef)(x, y));\n                    _skeletonizer.skeletonize();\n                    // Show skeleton if requested\n                    if (false) {}\n                }\n                /**\n * Extracts and describes those patches which seem to contain a barcode pattern\n * @param {Array} moments\n * @param {Object} patchPos,\n * @param {Number} x\n * @param {Number} y\n * @returns {Array} list of patches\n */ function describePatch(moments, patchPos, x, y) {\n                    var k, avg, eligibleMoments = [], matchingMoments, patch, patchesFound = [], minComponentWeight = Math.ceil(_patchSize.x / 3);\n                    if (moments.length >= 2) {\n                        // only collect moments which's area covers at least minComponentWeight pixels.\n                        for(k = 0; k < moments.length; k++){\n                            if (moments[k].m00 > minComponentWeight) {\n                                eligibleMoments.push(moments[k]);\n                            }\n                        }\n                        // if at least 2 moments are found which have at least minComponentWeights covered\n                        if (eligibleMoments.length >= 2) {\n                            matchingMoments = similarMoments(eligibleMoments);\n                            avg = 0;\n                            // determine the similarity of the moments\n                            for(k = 0; k < matchingMoments.length; k++){\n                                avg += matchingMoments[k].rad;\n                            }\n                            // Only two of the moments are allowed not to fit into the equation\n                            // add the patch to the set\n                            if (matchingMoments.length > 1 && matchingMoments.length >= eligibleMoments.length / 4 * 3 && matchingMoments.length > moments.length / 4) {\n                                avg /= matchingMoments.length;\n                                patch = {\n                                    index: patchPos[1] * _numPatches.x + patchPos[0],\n                                    pos: {\n                                        x: x,\n                                        y: y\n                                    },\n                                    box: [\n                                        vec2.clone([\n                                            x,\n                                            y\n                                        ]),\n                                        vec2.clone([\n                                            x + _subImageWrapper.size.x,\n                                            y\n                                        ]),\n                                        vec2.clone([\n                                            x + _subImageWrapper.size.x,\n                                            y + _subImageWrapper.size.y\n                                        ]),\n                                        vec2.clone([\n                                            x,\n                                            y + _subImageWrapper.size.y\n                                        ])\n                                    ],\n                                    moments: matchingMoments,\n                                    rad: avg,\n                                    vec: vec2.clone([\n                                        Math.cos(avg),\n                                        Math.sin(avg)\n                                    ])\n                                };\n                                patchesFound.push(patch);\n                            }\n                        }\n                    }\n                    return patchesFound;\n                }\n                /**\n * finds patches which are connected and share the same orientation\n * @param {Object} patchesFound\n */ function rasterizeAngularSimilarity(patchesFound) {\n                    var label = 0, threshold = 0.95, currIdx = 0, j, patch, hsv = [\n                        0,\n                        1,\n                        1\n                    ], rgb = [\n                        0,\n                        0,\n                        0\n                    ];\n                    function notYetProcessed() {\n                        var i;\n                        for(i = 0; i < _patchLabelGrid.data.length; i++){\n                            if (_patchLabelGrid.data[i] === 0 && _patchGrid.data[i] === 1) {\n                                return i;\n                            }\n                        }\n                        return _patchLabelGrid.length;\n                    }\n                    function trace(currentIdx) {\n                        var x, y, currentPatch, idx, dir, current = {\n                            x: currentIdx % _patchLabelGrid.size.x,\n                            y: currentIdx / _patchLabelGrid.size.x | 0\n                        }, similarity;\n                        if (currentIdx < _patchLabelGrid.data.length) {\n                            currentPatch = _imageToPatchGrid.data[currentIdx];\n                            // assign label\n                            _patchLabelGrid.data[currentIdx] = label;\n                            for(dir = 0; dir < _tracer2.default.searchDirections.length; dir++){\n                                y = current.y + _tracer2.default.searchDirections[dir][0];\n                                x = current.x + _tracer2.default.searchDirections[dir][1];\n                                idx = y * _patchLabelGrid.size.x + x;\n                                // continue if patch empty\n                                if (_patchGrid.data[idx] === 0) {\n                                    _patchLabelGrid.data[idx] = Number.MAX_VALUE;\n                                    continue;\n                                }\n                                if (_patchLabelGrid.data[idx] === 0) {\n                                    similarity = Math.abs(vec2.dot(_imageToPatchGrid.data[idx].vec, currentPatch.vec));\n                                    if (similarity > threshold) {\n                                        trace(idx);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // prepare for finding the right patches\n                    _array_helper2.default.init(_patchGrid.data, 0);\n                    _array_helper2.default.init(_patchLabelGrid.data, 0);\n                    _array_helper2.default.init(_imageToPatchGrid.data, null);\n                    for(j = 0; j < patchesFound.length; j++){\n                        patch = patchesFound[j];\n                        _imageToPatchGrid.data[patch.index] = patch;\n                        _patchGrid.data[patch.index] = 1;\n                    }\n                    // rasterize the patches found to determine area\n                    _patchGrid.zeroBorder();\n                    while((currIdx = notYetProcessed()) < _patchLabelGrid.data.length){\n                        label++;\n                        trace(currIdx);\n                    }\n                    // draw patch-labels if requested\n                    if (false) {}\n                    return label;\n                }\n                exports1.default = {\n                    init: function init(inputImageWrapper, config) {\n                        _config = config;\n                        _inputImageWrapper = inputImageWrapper;\n                        initBuffers();\n                        initCanvas();\n                    },\n                    locate: function locate() {\n                        var patchesFound, topLabels, boxes;\n                        if (_config.halfSample) {\n                            (0, _cv_utils.halfSample)(_inputImageWrapper, _currentImageWrapper);\n                        }\n                        binarizeImage();\n                        patchesFound = findPatches();\n                        // return unless 5% or more patches are found\n                        if (patchesFound.length < _numPatches.x * _numPatches.y * 0.05) {\n                            return null;\n                        }\n                        // rasterrize area by comparing angular similarity;\n                        var maxLabel = rasterizeAngularSimilarity(patchesFound);\n                        if (maxLabel < 1) {\n                            return null;\n                        }\n                        // search for area with the most patches (biggest connected area)\n                        topLabels = findBiggestConnectedAreas(maxLabel);\n                        if (topLabels.length === 0) {\n                            return null;\n                        }\n                        boxes = findBoxes(topLabels, maxLabel);\n                        return boxes;\n                    },\n                    checkImageConstraints: function checkImageConstraints(inputStream, config) {\n                        var patchSize, width = inputStream.getWidth(), height = inputStream.getHeight(), halfSample = config.halfSample ? 0.5 : 1, size, area;\n                        // calculate width and height based on area\n                        if (inputStream.getConfig().area) {\n                            area = (0, _cv_utils.computeImageArea)(width, height, inputStream.getConfig().area);\n                            inputStream.setTopRight({\n                                x: area.sx,\n                                y: area.sy\n                            });\n                            inputStream.setCanvasSize({\n                                x: width,\n                                y: height\n                            });\n                            width = area.sw;\n                            height = area.sh;\n                        }\n                        size = {\n                            x: Math.floor(width * halfSample),\n                            y: Math.floor(height * halfSample)\n                        };\n                        patchSize = (0, _cv_utils.calculatePatchSize)(config.patchSize, size);\n                        if (false) {}\n                        inputStream.setWidth(Math.floor(Math.floor(size.x / patchSize.x) * (1 / halfSample) * patchSize.x));\n                        inputStream.setHeight(Math.floor(Math.floor(size.y / patchSize.y) * (1 / halfSample) * patchSize.y));\n                        if (inputStream.getWidth() % patchSize.x === 0 && inputStream.getHeight() % patchSize.y === 0) {\n                            return true;\n                        }\n                        throw new Error(\"Image dimensions do not comply with the current settings: Width (\" + width + \" )and height (\" + height + \") must a multiple of \" + patchSize.x);\n                    }\n                };\n            /* WEBPACK VAR INJECTION */ }).call(exports1, __nested_webpack_require_205838__(47));\n        /***/ },\n        /* 63 */ /***/ function(module1, exports1, __nested_webpack_require_234243__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _tracer = __nested_webpack_require_234243__(30);\n            var _tracer2 = _interopRequireDefault(_tracer);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            /**\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\n */ var Rasterizer = {\n                createContour2D: function createContour2D() {\n                    return {\n                        dir: null,\n                        index: null,\n                        firstVertex: null,\n                        insideContours: null,\n                        nextpeer: null,\n                        prevpeer: null\n                    };\n                },\n                CONTOUR_DIR: {\n                    CW_DIR: 0,\n                    CCW_DIR: 1,\n                    UNKNOWN_DIR: 2\n                },\n                DIR: {\n                    OUTSIDE_EDGE: -32767,\n                    INSIDE_EDGE: -32766\n                },\n                create: function create(imageWrapper, labelWrapper) {\n                    var imageData = imageWrapper.data, labelData = labelWrapper.data, width = imageWrapper.size.x, height = imageWrapper.size.y, tracer = _tracer2.default.create(imageWrapper, labelWrapper);\n                    return {\n                        rasterize: function rasterize(depthlabel) {\n                            var color, bc, lc, labelindex, cx, cy, colorMap = [], vertex, p, cc, sc, pos, connectedCount = 0, i;\n                            for(i = 0; i < 400; i++){\n                                colorMap[i] = 0;\n                            }\n                            colorMap[0] = imageData[0];\n                            cc = null;\n                            for(cy = 1; cy < height - 1; cy++){\n                                labelindex = 0;\n                                bc = colorMap[0];\n                                for(cx = 1; cx < width - 1; cx++){\n                                    pos = cy * width + cx;\n                                    if (labelData[pos] === 0) {\n                                        color = imageData[pos];\n                                        if (color !== bc) {\n                                            if (labelindex === 0) {\n                                                lc = connectedCount + 1;\n                                                colorMap[lc] = color;\n                                                bc = color;\n                                                vertex = tracer.contourTracing(cy, cx, lc, color, Rasterizer.DIR.OUTSIDE_EDGE);\n                                                if (vertex !== null) {\n                                                    connectedCount++;\n                                                    labelindex = lc;\n                                                    p = Rasterizer.createContour2D();\n                                                    p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\n                                                    p.index = labelindex;\n                                                    p.firstVertex = vertex;\n                                                    p.nextpeer = cc;\n                                                    p.insideContours = null;\n                                                    if (cc !== null) {\n                                                        cc.prevpeer = p;\n                                                    }\n                                                    cc = p;\n                                                }\n                                            } else {\n                                                vertex = tracer.contourTracing(cy, cx, Rasterizer.DIR.INSIDE_EDGE, color, labelindex);\n                                                if (vertex !== null) {\n                                                    p = Rasterizer.createContour2D();\n                                                    p.firstVertex = vertex;\n                                                    p.insideContours = null;\n                                                    if (depthlabel === 0) {\n                                                        p.dir = Rasterizer.CONTOUR_DIR.CCW_DIR;\n                                                    } else {\n                                                        p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\n                                                    }\n                                                    p.index = depthlabel;\n                                                    sc = cc;\n                                                    while(sc !== null && sc.index !== labelindex){\n                                                        sc = sc.nextpeer;\n                                                    }\n                                                    if (sc !== null) {\n                                                        p.nextpeer = sc.insideContours;\n                                                        if (sc.insideContours !== null) {\n                                                            sc.insideContours.prevpeer = p;\n                                                        }\n                                                        sc.insideContours = p;\n                                                    }\n                                                }\n                                            }\n                                        } else {\n                                            labelData[pos] = labelindex;\n                                        }\n                                    } else if (labelData[pos] === Rasterizer.DIR.OUTSIDE_EDGE || labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\n                                        labelindex = 0;\n                                        if (labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\n                                            bc = imageData[pos];\n                                        } else {\n                                            bc = colorMap[0];\n                                        }\n                                    } else {\n                                        labelindex = labelData[pos];\n                                        bc = colorMap[labelindex];\n                                    }\n                                }\n                            }\n                            sc = cc;\n                            while(sc !== null){\n                                sc.index = depthlabel;\n                                sc = sc.nextpeer;\n                            }\n                            return {\n                                cc: cc,\n                                count: connectedCount\n                            };\n                        },\n                        debug: {\n                            drawContour: function drawContour(canvas, firstContour) {\n                                var ctx = canvas.getContext(\"2d\"), pq = firstContour, iq, q, p;\n                                ctx.strokeStyle = \"red\";\n                                ctx.fillStyle = \"red\";\n                                ctx.lineWidth = 1;\n                                if (pq !== null) {\n                                    iq = pq.insideContours;\n                                } else {\n                                    iq = null;\n                                }\n                                while(pq !== null){\n                                    if (iq !== null) {\n                                        q = iq;\n                                        iq = iq.nextpeer;\n                                    } else {\n                                        q = pq;\n                                        pq = pq.nextpeer;\n                                        if (pq !== null) {\n                                            iq = pq.insideContours;\n                                        } else {\n                                            iq = null;\n                                        }\n                                    }\n                                    switch(q.dir){\n                                        case Rasterizer.CONTOUR_DIR.CW_DIR:\n                                            ctx.strokeStyle = \"red\";\n                                            break;\n                                        case Rasterizer.CONTOUR_DIR.CCW_DIR:\n                                            ctx.strokeStyle = \"blue\";\n                                            break;\n                                        case Rasterizer.CONTOUR_DIR.UNKNOWN_DIR:\n                                            ctx.strokeStyle = \"green\";\n                                            break;\n                                    }\n                                    p = q.firstVertex;\n                                    ctx.beginPath();\n                                    ctx.moveTo(p.x, p.y);\n                                    do {\n                                        p = p.next;\n                                        ctx.lineTo(p.x, p.y);\n                                    }while (p !== q.firstVertex);\n                                    ctx.stroke();\n                                }\n                            }\n                        }\n                    };\n                }\n            };\n            exports1.default = Rasterizer;\n        /***/ },\n        /* 64 */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            /* @preserve ASM BEGIN */ /* eslint-disable eqeqeq*/ function Skeletonizer(stdlib, foreign, buffer) {\n                \"use asm\";\n                var images = new stdlib.Uint8Array(buffer), size = foreign.size | 0, imul = stdlib.Math.imul;\n                function erode(inImagePtr, outImagePtr) {\n                    inImagePtr = inImagePtr | 0;\n                    outImagePtr = outImagePtr | 0;\n                    var v = 0, u = 0, sum = 0, yStart1 = 0, yStart2 = 0, xStart1 = 0, xStart2 = 0, offset = 0;\n                    for(v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0){\n                        offset = offset + size | 0;\n                        for(u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0){\n                            yStart1 = offset - size | 0;\n                            yStart2 = offset + size | 0;\n                            xStart1 = u - 1 | 0;\n                            xStart2 = u + 1 | 0;\n                            sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n                            if ((sum | 0) == (5 | 0)) {\n                                images[outImagePtr + offset + u | 0] = 1;\n                            } else {\n                                images[outImagePtr + offset + u | 0] = 0;\n                            }\n                        }\n                    }\n                    return;\n                }\n                function subtract(aImagePtr, bImagePtr, outImagePtr) {\n                    aImagePtr = aImagePtr | 0;\n                    bImagePtr = bImagePtr | 0;\n                    outImagePtr = outImagePtr | 0;\n                    var length = 0;\n                    length = imul(size, size) | 0;\n                    while((length | 0) > 0){\n                        length = length - 1 | 0;\n                        images[outImagePtr + length | 0] = (images[aImagePtr + length | 0] | 0) - (images[bImagePtr + length | 0] | 0) | 0;\n                    }\n                }\n                function bitwiseOr(aImagePtr, bImagePtr, outImagePtr) {\n                    aImagePtr = aImagePtr | 0;\n                    bImagePtr = bImagePtr | 0;\n                    outImagePtr = outImagePtr | 0;\n                    var length = 0;\n                    length = imul(size, size) | 0;\n                    while((length | 0) > 0){\n                        length = length - 1 | 0;\n                        images[outImagePtr + length | 0] = images[aImagePtr + length | 0] | 0 | (images[bImagePtr + length | 0] | 0) | 0;\n                    }\n                }\n                function countNonZero(imagePtr) {\n                    imagePtr = imagePtr | 0;\n                    var sum = 0, length = 0;\n                    length = imul(size, size) | 0;\n                    while((length | 0) > 0){\n                        length = length - 1 | 0;\n                        sum = (sum | 0) + (images[imagePtr + length | 0] | 0) | 0;\n                    }\n                    return sum | 0;\n                }\n                function init(imagePtr, value) {\n                    imagePtr = imagePtr | 0;\n                    value = value | 0;\n                    var length = 0;\n                    length = imul(size, size) | 0;\n                    while((length | 0) > 0){\n                        length = length - 1 | 0;\n                        images[imagePtr + length | 0] = value;\n                    }\n                }\n                function dilate(inImagePtr, outImagePtr) {\n                    inImagePtr = inImagePtr | 0;\n                    outImagePtr = outImagePtr | 0;\n                    var v = 0, u = 0, sum = 0, yStart1 = 0, yStart2 = 0, xStart1 = 0, xStart2 = 0, offset = 0;\n                    for(v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0){\n                        offset = offset + size | 0;\n                        for(u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0){\n                            yStart1 = offset - size | 0;\n                            yStart2 = offset + size | 0;\n                            xStart1 = u - 1 | 0;\n                            xStart2 = u + 1 | 0;\n                            sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n                            if ((sum | 0) > (0 | 0)) {\n                                images[outImagePtr + offset + u | 0] = 1;\n                            } else {\n                                images[outImagePtr + offset + u | 0] = 0;\n                            }\n                        }\n                    }\n                    return;\n                }\n                function memcpy(srcImagePtr, dstImagePtr) {\n                    srcImagePtr = srcImagePtr | 0;\n                    dstImagePtr = dstImagePtr | 0;\n                    var length = 0;\n                    length = imul(size, size) | 0;\n                    while((length | 0) > 0){\n                        length = length - 1 | 0;\n                        images[dstImagePtr + length | 0] = images[srcImagePtr + length | 0] | 0;\n                    }\n                }\n                function zeroBorder(imagePtr) {\n                    imagePtr = imagePtr | 0;\n                    var x = 0, y = 0;\n                    for(x = 0; (x | 0) < (size - 1 | 0); x = x + 1 | 0){\n                        images[imagePtr + x | 0] = 0;\n                        images[imagePtr + y | 0] = 0;\n                        y = y + size - 1 | 0;\n                        images[imagePtr + y | 0] = 0;\n                        y = y + 1 | 0;\n                    }\n                    for(x = 0; (x | 0) < (size | 0); x = x + 1 | 0){\n                        images[imagePtr + y | 0] = 0;\n                        y = y + 1 | 0;\n                    }\n                }\n                function skeletonize() {\n                    var subImagePtr = 0, erodedImagePtr = 0, tempImagePtr = 0, skelImagePtr = 0, sum = 0, done = 0;\n                    erodedImagePtr = imul(size, size) | 0;\n                    tempImagePtr = erodedImagePtr + erodedImagePtr | 0;\n                    skelImagePtr = tempImagePtr + erodedImagePtr | 0;\n                    // init skel-image\n                    init(skelImagePtr, 0);\n                    zeroBorder(subImagePtr);\n                    do {\n                        erode(subImagePtr, erodedImagePtr);\n                        dilate(erodedImagePtr, tempImagePtr);\n                        subtract(subImagePtr, tempImagePtr, tempImagePtr);\n                        bitwiseOr(skelImagePtr, tempImagePtr, skelImagePtr);\n                        memcpy(erodedImagePtr, subImagePtr);\n                        sum = countNonZero(subImagePtr) | 0;\n                        done = (sum | 0) == 0 | 0;\n                    }while (!done);\n                }\n                return {\n                    skeletonize: skeletonize\n                };\n            }\n            /* @preserve ASM END */ exports1.default = Skeletonizer;\n        /* eslint-enable eqeqeq*/ /***/ },\n        /* 65 */ /***/ function(module1, exports1, __nested_webpack_require_251342__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _barcode_reader = __nested_webpack_require_251342__(1);\n            var _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function TwoOfFiveReader(opts) {\n                _barcode_reader2.default.call(this, opts);\n                this.barSpaceRatio = [\n                    1,\n                    1\n                ];\n            }\n            var N = 1, W = 3, properties = {\n                START_PATTERN: {\n                    value: [\n                        W,\n                        N,\n                        W,\n                        N,\n                        N,\n                        N\n                    ]\n                },\n                STOP_PATTERN: {\n                    value: [\n                        W,\n                        N,\n                        N,\n                        N,\n                        W\n                    ]\n                },\n                CODE_PATTERN: {\n                    value: [\n                        [\n                            N,\n                            N,\n                            W,\n                            W,\n                            N\n                        ],\n                        [\n                            W,\n                            N,\n                            N,\n                            N,\n                            W\n                        ],\n                        [\n                            N,\n                            W,\n                            N,\n                            N,\n                            W\n                        ],\n                        [\n                            W,\n                            W,\n                            N,\n                            N,\n                            N\n                        ],\n                        [\n                            N,\n                            N,\n                            W,\n                            N,\n                            W\n                        ],\n                        [\n                            W,\n                            N,\n                            W,\n                            N,\n                            N\n                        ],\n                        [\n                            N,\n                            W,\n                            W,\n                            N,\n                            N\n                        ],\n                        [\n                            N,\n                            N,\n                            N,\n                            W,\n                            W\n                        ],\n                        [\n                            W,\n                            N,\n                            N,\n                            W,\n                            N\n                        ],\n                        [\n                            N,\n                            W,\n                            N,\n                            W,\n                            N\n                        ]\n                    ]\n                },\n                SINGLE_CODE_ERROR: {\n                    value: 0.78,\n                    writable: true\n                },\n                AVG_CODE_ERROR: {\n                    value: 0.30,\n                    writable: true\n                },\n                FORMAT: {\n                    value: \"2of5\"\n                }\n            };\n            var startPatternLength = properties.START_PATTERN.value.reduce(function(sum, val) {\n                return sum + val;\n            }, 0);\n            TwoOfFiveReader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\n            TwoOfFiveReader.prototype.constructor = TwoOfFiveReader;\n            TwoOfFiveReader.prototype._findPattern = function(pattern, offset, isWhite, tryHarder) {\n                var counter = [], self1 = this, i, counterPos = 0, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: 0,\n                    end: 0\n                }, error, j, sum, epsilon = self1.AVG_CODE_ERROR;\n                isWhite = isWhite || false;\n                tryHarder = tryHarder || false;\n                if (!offset) {\n                    offset = self1._nextSet(self1._row);\n                }\n                for(i = 0; i < pattern.length; i++){\n                    counter[i] = 0;\n                }\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            sum = 0;\n                            for(j = 0; j < counter.length; j++){\n                                sum += counter[j];\n                            }\n                            error = self1._matchPattern(counter, pattern);\n                            if (error < epsilon) {\n                                bestMatch.error = error;\n                                bestMatch.start = i - sum;\n                                bestMatch.end = i;\n                                return bestMatch;\n                            }\n                            if (tryHarder) {\n                                for(j = 0; j < counter.length - 2; j++){\n                                    counter[j] = counter[j + 2];\n                                }\n                                counter[counter.length - 2] = 0;\n                                counter[counter.length - 1] = 0;\n                                counterPos--;\n                            } else {\n                                return null;\n                            }\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            TwoOfFiveReader.prototype._findStart = function() {\n                var self1 = this, leadingWhitespaceStart, offset = self1._nextSet(self1._row), startInfo, narrowBarWidth = 1;\n                while(!startInfo){\n                    startInfo = self1._findPattern(self1.START_PATTERN, offset, false, true);\n                    if (!startInfo) {\n                        return null;\n                    }\n                    narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / startPatternLength);\n                    leadingWhitespaceStart = startInfo.start - narrowBarWidth * 5;\n                    if (leadingWhitespaceStart >= 0) {\n                        if (self1._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                            return startInfo;\n                        }\n                    }\n                    offset = startInfo.end;\n                    startInfo = null;\n                }\n            };\n            TwoOfFiveReader.prototype._verifyTrailingWhitespace = function(endInfo) {\n                var self1 = this, trailingWhitespaceEnd;\n                trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                if (trailingWhitespaceEnd < self1._row.length) {\n                    if (self1._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                        return endInfo;\n                    }\n                }\n                return null;\n            };\n            TwoOfFiveReader.prototype._findEnd = function() {\n                var self1 = this, endInfo, tmp, offset;\n                self1._row.reverse();\n                offset = self1._nextSet(self1._row);\n                endInfo = self1._findPattern(self1.STOP_PATTERN, offset, false, true);\n                self1._row.reverse();\n                if (endInfo === null) {\n                    return null;\n                }\n                // reverse numbers\n                tmp = endInfo.start;\n                endInfo.start = self1._row.length - endInfo.end;\n                endInfo.end = self1._row.length - tmp;\n                return endInfo !== null ? self1._verifyTrailingWhitespace(endInfo) : null;\n            };\n            TwoOfFiveReader.prototype._decodeCode = function(counter) {\n                var j, self1 = this, sum = 0, normalized, error, epsilon = self1.AVG_CODE_ERROR, code, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: 0,\n                    end: 0\n                };\n                for(j = 0; j < counter.length; j++){\n                    sum += counter[j];\n                }\n                for(code = 0; code < self1.CODE_PATTERN.length; code++){\n                    error = self1._matchPattern(counter, self1.CODE_PATTERN[code]);\n                    if (error < bestMatch.error) {\n                        bestMatch.code = code;\n                        bestMatch.error = error;\n                    }\n                }\n                if (bestMatch.error < epsilon) {\n                    return bestMatch;\n                }\n            };\n            TwoOfFiveReader.prototype._decodePayload = function(counters, result, decodedCodes) {\n                var i, self1 = this, pos = 0, counterLength = counters.length, counter = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ], code;\n                while(pos < counterLength){\n                    for(i = 0; i < 5; i++){\n                        counter[i] = counters[pos] * this.barSpaceRatio[0];\n                        pos += 2;\n                    }\n                    code = self1._decodeCode(counter);\n                    if (!code) {\n                        return null;\n                    }\n                    result.push(code.code + \"\");\n                    decodedCodes.push(code);\n                }\n                return code;\n            };\n            TwoOfFiveReader.prototype._verifyCounterLength = function(counters) {\n                return counters.length % 10 === 0;\n            };\n            TwoOfFiveReader.prototype._decode = function() {\n                var startInfo, endInfo, self1 = this, code, result = [], decodedCodes = [], counters;\n                startInfo = self1._findStart();\n                if (!startInfo) {\n                    return null;\n                }\n                decodedCodes.push(startInfo);\n                endInfo = self1._findEnd();\n                if (!endInfo) {\n                    return null;\n                }\n                counters = self1._fillCounters(startInfo.end, endInfo.start, false);\n                if (!self1._verifyCounterLength(counters)) {\n                    return null;\n                }\n                code = self1._decodePayload(counters, result, decodedCodes);\n                if (!code) {\n                    return null;\n                }\n                if (result.length < 5) {\n                    return null;\n                }\n                decodedCodes.push(endInfo);\n                return {\n                    code: result.join(\"\"),\n                    start: startInfo.start,\n                    end: endInfo.end,\n                    startInfo: startInfo,\n                    decodedCodes: decodedCodes\n                };\n            };\n            exports1.default = TwoOfFiveReader;\n        /***/ },\n        /* 66 */ /***/ function(module1, exports1, __nested_webpack_require_263060__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _barcode_reader = __nested_webpack_require_263060__(1);\n            var _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function CodabarReader() {\n                _barcode_reader2.default.call(this);\n                this._counters = [];\n            }\n            var properties = {\n                ALPHABETH_STRING: {\n                    value: \"0123456789-$:/.+ABCD\"\n                },\n                ALPHABET: {\n                    value: [\n                        48,\n                        49,\n                        50,\n                        51,\n                        52,\n                        53,\n                        54,\n                        55,\n                        56,\n                        57,\n                        45,\n                        36,\n                        58,\n                        47,\n                        46,\n                        43,\n                        65,\n                        66,\n                        67,\n                        68\n                    ]\n                },\n                CHARACTER_ENCODINGS: {\n                    value: [\n                        0x003,\n                        0x006,\n                        0x009,\n                        0x060,\n                        0x012,\n                        0x042,\n                        0x021,\n                        0x024,\n                        0x030,\n                        0x048,\n                        0x00c,\n                        0x018,\n                        0x045,\n                        0x051,\n                        0x054,\n                        0x015,\n                        0x01A,\n                        0x029,\n                        0x00B,\n                        0x00E\n                    ]\n                },\n                START_END: {\n                    value: [\n                        0x01A,\n                        0x029,\n                        0x00B,\n                        0x00E\n                    ]\n                },\n                MIN_ENCODED_CHARS: {\n                    value: 4\n                },\n                MAX_ACCEPTABLE: {\n                    value: 2.0\n                },\n                PADDING: {\n                    value: 1.5\n                },\n                FORMAT: {\n                    value: \"codabar\",\n                    writeable: false\n                }\n            };\n            CodabarReader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\n            CodabarReader.prototype.constructor = CodabarReader;\n            CodabarReader.prototype._decode = function() {\n                var self1 = this, result = [], start, decodedChar, pattern, nextStart, end;\n                this._counters = self1._fillCounters();\n                start = self1._findStart();\n                if (!start) {\n                    return null;\n                }\n                nextStart = start.startCounter;\n                do {\n                    pattern = self1._toPattern(nextStart);\n                    if (pattern < 0) {\n                        return null;\n                    }\n                    decodedChar = self1._patternToChar(pattern);\n                    if (decodedChar < 0) {\n                        return null;\n                    }\n                    result.push(decodedChar);\n                    nextStart += 8;\n                    if (result.length > 1 && self1._isStartEnd(pattern)) {\n                        break;\n                    }\n                }while (nextStart < self1._counters.length);\n                // verify end\n                if (result.length - 2 < self1.MIN_ENCODED_CHARS || !self1._isStartEnd(pattern)) {\n                    return null;\n                }\n                // verify end white space\n                if (!self1._verifyWhitespace(start.startCounter, nextStart - 8)) {\n                    return null;\n                }\n                if (!self1._validateResult(result, start.startCounter)) {\n                    return null;\n                }\n                nextStart = nextStart > self1._counters.length ? self1._counters.length : nextStart;\n                end = start.start + self1._sumCounters(start.startCounter, nextStart - 8);\n                return {\n                    code: result.join(\"\"),\n                    start: start.start,\n                    end: end,\n                    startInfo: start,\n                    decodedCodes: result\n                };\n            };\n            CodabarReader.prototype._verifyWhitespace = function(startCounter, endCounter) {\n                if (startCounter - 1 <= 0 || this._counters[startCounter - 1] >= this._calculatePatternLength(startCounter) / 2.0) {\n                    if (endCounter + 8 >= this._counters.length || this._counters[endCounter + 7] >= this._calculatePatternLength(endCounter) / 2.0) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            CodabarReader.prototype._calculatePatternLength = function(offset) {\n                var i, sum = 0;\n                for(i = offset; i < offset + 7; i++){\n                    sum += this._counters[i];\n                }\n                return sum;\n            };\n            CodabarReader.prototype._thresholdResultPattern = function(result, startCounter) {\n                var self1 = this, categorization = {\n                    space: {\n                        narrow: {\n                            size: 0,\n                            counts: 0,\n                            min: 0,\n                            max: Number.MAX_VALUE\n                        },\n                        wide: {\n                            size: 0,\n                            counts: 0,\n                            min: 0,\n                            max: Number.MAX_VALUE\n                        }\n                    },\n                    bar: {\n                        narrow: {\n                            size: 0,\n                            counts: 0,\n                            min: 0,\n                            max: Number.MAX_VALUE\n                        },\n                        wide: {\n                            size: 0,\n                            counts: 0,\n                            min: 0,\n                            max: Number.MAX_VALUE\n                        }\n                    }\n                }, kind, cat, i, j, pos = startCounter, pattern;\n                for(i = 0; i < result.length; i++){\n                    pattern = self1._charToPattern(result[i]);\n                    for(j = 6; j >= 0; j--){\n                        kind = (j & 1) === 2 ? categorization.bar : categorization.space;\n                        cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\n                        cat.size += self1._counters[pos + j];\n                        cat.counts++;\n                        pattern >>= 1;\n                    }\n                    pos += 8;\n                }\n                [\n                    \"space\",\n                    \"bar\"\n                ].forEach(function(key) {\n                    var newkind = categorization[key];\n                    newkind.wide.min = Math.floor((newkind.narrow.size / newkind.narrow.counts + newkind.wide.size / newkind.wide.counts) / 2);\n                    newkind.narrow.max = Math.ceil(newkind.wide.min);\n                    newkind.wide.max = Math.ceil((newkind.wide.size * self1.MAX_ACCEPTABLE + self1.PADDING) / newkind.wide.counts);\n                });\n                return categorization;\n            };\n            CodabarReader.prototype._charToPattern = function(char) {\n                var self1 = this, charCode = char.charCodeAt(0), i;\n                for(i = 0; i < self1.ALPHABET.length; i++){\n                    if (self1.ALPHABET[i] === charCode) {\n                        return self1.CHARACTER_ENCODINGS[i];\n                    }\n                }\n                return 0x0;\n            };\n            CodabarReader.prototype._validateResult = function(result, startCounter) {\n                var self1 = this, thresholds = self1._thresholdResultPattern(result, startCounter), i, j, kind, cat, size, pos = startCounter, pattern;\n                for(i = 0; i < result.length; i++){\n                    pattern = self1._charToPattern(result[i]);\n                    for(j = 6; j >= 0; j--){\n                        kind = (j & 1) === 0 ? thresholds.bar : thresholds.space;\n                        cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\n                        size = self1._counters[pos + j];\n                        if (size < cat.min || size > cat.max) {\n                            return false;\n                        }\n                        pattern >>= 1;\n                    }\n                    pos += 8;\n                }\n                return true;\n            };\n            CodabarReader.prototype._patternToChar = function(pattern) {\n                var i, self1 = this;\n                for(i = 0; i < self1.CHARACTER_ENCODINGS.length; i++){\n                    if (self1.CHARACTER_ENCODINGS[i] === pattern) {\n                        return String.fromCharCode(self1.ALPHABET[i]);\n                    }\n                }\n                return -1;\n            };\n            CodabarReader.prototype._computeAlternatingThreshold = function(offset, end) {\n                var i, min = Number.MAX_VALUE, max = 0, counter;\n                for(i = offset; i < end; i += 2){\n                    counter = this._counters[i];\n                    if (counter > max) {\n                        max = counter;\n                    }\n                    if (counter < min) {\n                        min = counter;\n                    }\n                }\n                return (min + max) / 2.0 | 0;\n            };\n            CodabarReader.prototype._toPattern = function(offset) {\n                var numCounters = 7, end = offset + numCounters, barThreshold, spaceThreshold, bitmask = 1 << numCounters - 1, pattern = 0, i, threshold;\n                if (end > this._counters.length) {\n                    return -1;\n                }\n                barThreshold = this._computeAlternatingThreshold(offset, end);\n                spaceThreshold = this._computeAlternatingThreshold(offset + 1, end);\n                for(i = 0; i < numCounters; i++){\n                    threshold = (i & 1) === 0 ? barThreshold : spaceThreshold;\n                    if (this._counters[offset + i] > threshold) {\n                        pattern |= bitmask;\n                    }\n                    bitmask >>= 1;\n                }\n                return pattern;\n            };\n            CodabarReader.prototype._isStartEnd = function(pattern) {\n                var i;\n                for(i = 0; i < this.START_END.length; i++){\n                    if (this.START_END[i] === pattern) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            CodabarReader.prototype._sumCounters = function(start, end) {\n                var i, sum = 0;\n                for(i = start; i < end; i++){\n                    sum += this._counters[i];\n                }\n                return sum;\n            };\n            CodabarReader.prototype._findStart = function() {\n                var self1 = this, i, pattern, start = self1._nextUnset(self1._row), end;\n                for(i = 1; i < this._counters.length; i++){\n                    pattern = self1._toPattern(i);\n                    if (pattern !== -1 && self1._isStartEnd(pattern)) {\n                        // TODO: Look for whitespace ahead\n                        start += self1._sumCounters(0, i);\n                        end = start + self1._sumCounters(i, i + 8);\n                        return {\n                            start: start,\n                            end: end,\n                            startCounter: i,\n                            endCounter: i + 8\n                        };\n                    }\n                }\n            };\n            exports1.default = CodabarReader;\n        /***/ },\n        /* 67 */ /***/ function(module1, exports1, __nested_webpack_require_275503__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _barcode_reader = __nested_webpack_require_275503__(1);\n            var _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function Code128Reader() {\n                _barcode_reader2.default.call(this);\n            }\n            var properties = {\n                CODE_SHIFT: {\n                    value: 98\n                },\n                CODE_C: {\n                    value: 99\n                },\n                CODE_B: {\n                    value: 100\n                },\n                CODE_A: {\n                    value: 101\n                },\n                START_CODE_A: {\n                    value: 103\n                },\n                START_CODE_B: {\n                    value: 104\n                },\n                START_CODE_C: {\n                    value: 105\n                },\n                STOP_CODE: {\n                    value: 106\n                },\n                CODE_PATTERN: {\n                    value: [\n                        [\n                            2,\n                            1,\n                            2,\n                            2,\n                            2,\n                            2\n                        ],\n                        [\n                            2,\n                            2,\n                            2,\n                            1,\n                            2,\n                            2\n                        ],\n                        [\n                            2,\n                            2,\n                            2,\n                            2,\n                            2,\n                            1\n                        ],\n                        [\n                            1,\n                            2,\n                            1,\n                            2,\n                            2,\n                            3\n                        ],\n                        [\n                            1,\n                            2,\n                            1,\n                            3,\n                            2,\n                            2\n                        ],\n                        [\n                            1,\n                            3,\n                            1,\n                            2,\n                            2,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            2,\n                            2,\n                            1,\n                            3\n                        ],\n                        [\n                            1,\n                            2,\n                            2,\n                            3,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            3,\n                            2,\n                            2,\n                            1,\n                            2\n                        ],\n                        [\n                            2,\n                            2,\n                            1,\n                            2,\n                            1,\n                            3\n                        ],\n                        [\n                            2,\n                            2,\n                            1,\n                            3,\n                            1,\n                            2\n                        ],\n                        [\n                            2,\n                            3,\n                            1,\n                            2,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            2,\n                            3,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            2,\n                            1,\n                            3,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            2,\n                            2,\n                            3,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            3,\n                            2,\n                            2,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            3,\n                            1,\n                            2,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            3,\n                            2,\n                            2,\n                            1\n                        ],\n                        [\n                            2,\n                            2,\n                            3,\n                            2,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            2,\n                            1,\n                            1,\n                            3,\n                            2\n                        ],\n                        [\n                            2,\n                            2,\n                            1,\n                            2,\n                            3,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            3,\n                            2,\n                            1,\n                            2\n                        ],\n                        [\n                            2,\n                            2,\n                            3,\n                            1,\n                            1,\n                            2\n                        ],\n                        [\n                            3,\n                            1,\n                            2,\n                            1,\n                            3,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            1,\n                            2,\n                            2,\n                            2\n                        ],\n                        [\n                            3,\n                            2,\n                            1,\n                            1,\n                            2,\n                            2\n                        ],\n                        [\n                            3,\n                            2,\n                            1,\n                            2,\n                            2,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            2,\n                            2,\n                            1,\n                            2\n                        ],\n                        [\n                            3,\n                            2,\n                            2,\n                            1,\n                            1,\n                            2\n                        ],\n                        [\n                            3,\n                            2,\n                            2,\n                            2,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            2,\n                            1,\n                            2,\n                            3\n                        ],\n                        [\n                            2,\n                            1,\n                            2,\n                            3,\n                            2,\n                            1\n                        ],\n                        [\n                            2,\n                            3,\n                            2,\n                            1,\n                            2,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            1,\n                            3,\n                            2,\n                            3\n                        ],\n                        [\n                            1,\n                            3,\n                            1,\n                            1,\n                            2,\n                            3\n                        ],\n                        [\n                            1,\n                            3,\n                            1,\n                            3,\n                            2,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            3,\n                            1,\n                            3\n                        ],\n                        [\n                            1,\n                            3,\n                            2,\n                            1,\n                            1,\n                            3\n                        ],\n                        [\n                            1,\n                            3,\n                            2,\n                            3,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            1,\n                            3,\n                            1,\n                            3\n                        ],\n                        [\n                            2,\n                            3,\n                            1,\n                            1,\n                            1,\n                            3\n                        ],\n                        [\n                            2,\n                            3,\n                            1,\n                            3,\n                            1,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            1,\n                            3,\n                            3\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            3,\n                            3,\n                            1\n                        ],\n                        [\n                            1,\n                            3,\n                            2,\n                            1,\n                            3,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            3,\n                            1,\n                            2,\n                            3\n                        ],\n                        [\n                            1,\n                            1,\n                            3,\n                            3,\n                            2,\n                            1\n                        ],\n                        [\n                            1,\n                            3,\n                            3,\n                            1,\n                            2,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            3,\n                            1,\n                            2,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            1,\n                            3,\n                            3,\n                            1\n                        ],\n                        [\n                            2,\n                            3,\n                            1,\n                            1,\n                            3,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            3,\n                            1,\n                            1,\n                            3\n                        ],\n                        [\n                            2,\n                            1,\n                            3,\n                            3,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            3,\n                            1,\n                            3,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            1,\n                            1,\n                            2,\n                            3\n                        ],\n                        [\n                            3,\n                            1,\n                            1,\n                            3,\n                            2,\n                            1\n                        ],\n                        [\n                            3,\n                            3,\n                            1,\n                            1,\n                            2,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            2,\n                            1,\n                            1,\n                            3\n                        ],\n                        [\n                            3,\n                            1,\n                            2,\n                            3,\n                            1,\n                            1\n                        ],\n                        [\n                            3,\n                            3,\n                            2,\n                            1,\n                            1,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            4,\n                            1,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            2,\n                            1,\n                            4,\n                            1,\n                            1\n                        ],\n                        [\n                            4,\n                            3,\n                            1,\n                            1,\n                            1,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            1,\n                            2,\n                            2,\n                            4\n                        ],\n                        [\n                            1,\n                            1,\n                            1,\n                            4,\n                            2,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            1,\n                            1,\n                            2,\n                            4\n                        ],\n                        [\n                            1,\n                            2,\n                            1,\n                            4,\n                            2,\n                            1\n                        ],\n                        [\n                            1,\n                            4,\n                            1,\n                            1,\n                            2,\n                            2\n                        ],\n                        [\n                            1,\n                            4,\n                            1,\n                            2,\n                            2,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            2,\n                            1,\n                            4\n                        ],\n                        [\n                            1,\n                            1,\n                            2,\n                            4,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            2,\n                            1,\n                            1,\n                            4\n                        ],\n                        [\n                            1,\n                            2,\n                            2,\n                            4,\n                            1,\n                            1\n                        ],\n                        [\n                            1,\n                            4,\n                            2,\n                            1,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            4,\n                            2,\n                            2,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            4,\n                            1,\n                            2,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            2,\n                            1,\n                            1,\n                            1,\n                            4\n                        ],\n                        [\n                            4,\n                            1,\n                            3,\n                            1,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            4,\n                            1,\n                            1,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            3,\n                            4,\n                            1,\n                            1,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            1,\n                            2,\n                            4,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            1,\n                            1,\n                            4,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            1,\n                            2,\n                            4,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            4,\n                            2,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            4,\n                            1,\n                            1,\n                            2\n                        ],\n                        [\n                            1,\n                            2,\n                            4,\n                            2,\n                            1,\n                            1\n                        ],\n                        [\n                            4,\n                            1,\n                            1,\n                            2,\n                            1,\n                            2\n                        ],\n                        [\n                            4,\n                            2,\n                            1,\n                            1,\n                            1,\n                            2\n                        ],\n                        [\n                            4,\n                            2,\n                            1,\n                            2,\n                            1,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            2,\n                            1,\n                            4,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            4,\n                            1,\n                            2,\n                            1\n                        ],\n                        [\n                            4,\n                            1,\n                            2,\n                            1,\n                            2,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            1,\n                            1,\n                            4,\n                            3\n                        ],\n                        [\n                            1,\n                            1,\n                            1,\n                            3,\n                            4,\n                            1\n                        ],\n                        [\n                            1,\n                            3,\n                            1,\n                            1,\n                            4,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            4,\n                            1,\n                            1,\n                            3\n                        ],\n                        [\n                            1,\n                            1,\n                            4,\n                            3,\n                            1,\n                            1\n                        ],\n                        [\n                            4,\n                            1,\n                            1,\n                            1,\n                            1,\n                            3\n                        ],\n                        [\n                            4,\n                            1,\n                            1,\n                            3,\n                            1,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            3,\n                            1,\n                            4,\n                            1\n                        ],\n                        [\n                            1,\n                            1,\n                            4,\n                            1,\n                            3,\n                            1\n                        ],\n                        [\n                            3,\n                            1,\n                            1,\n                            1,\n                            4,\n                            1\n                        ],\n                        [\n                            4,\n                            1,\n                            1,\n                            1,\n                            3,\n                            1\n                        ],\n                        [\n                            2,\n                            1,\n                            1,\n                            4,\n                            1,\n                            2\n                        ],\n                        [\n                            2,\n                            1,\n                            1,\n                            2,\n                            1,\n                            4\n                        ],\n                        [\n                            2,\n                            1,\n                            1,\n                            2,\n                            3,\n                            2\n                        ],\n                        [\n                            2,\n                            3,\n                            3,\n                            1,\n                            1,\n                            1,\n                            2\n                        ]\n                    ]\n                },\n                SINGLE_CODE_ERROR: {\n                    value: 0.64\n                },\n                AVG_CODE_ERROR: {\n                    value: 0.30\n                },\n                FORMAT: {\n                    value: \"code_128\",\n                    writeable: false\n                },\n                MODULE_INDICES: {\n                    value: {\n                        bar: [\n                            0,\n                            2,\n                            4\n                        ],\n                        space: [\n                            1,\n                            3,\n                            5\n                        ]\n                    }\n                }\n            };\n            Code128Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\n            Code128Reader.prototype.constructor = Code128Reader;\n            Code128Reader.prototype._decodeCode = function(start, correction) {\n                var counter = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ], i, self1 = this, offset = start, isWhite = !self1._row[offset], counterPos = 0, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: start,\n                    end: start,\n                    correction: {\n                        bar: 1,\n                        space: 1\n                    }\n                }, code, error;\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            if (correction) {\n                                self1._correct(counter, correction);\n                            }\n                            for(code = 0; code < self1.CODE_PATTERN.length; code++){\n                                error = self1._matchPattern(counter, self1.CODE_PATTERN[code]);\n                                if (error < bestMatch.error) {\n                                    bestMatch.code = code;\n                                    bestMatch.error = error;\n                                }\n                            }\n                            bestMatch.end = i;\n                            if (bestMatch.code === -1 || bestMatch.error > self1.AVG_CODE_ERROR) {\n                                return null;\n                            }\n                            if (self1.CODE_PATTERN[bestMatch.code]) {\n                                bestMatch.correction.bar = calculateCorrection(self1.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\n                                bestMatch.correction.space = calculateCorrection(self1.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\n                            }\n                            return bestMatch;\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            Code128Reader.prototype._correct = function(counter, correction) {\n                this._correctBars(counter, correction.bar, this.MODULE_INDICES.bar);\n                this._correctBars(counter, correction.space, this.MODULE_INDICES.space);\n            };\n            Code128Reader.prototype._findStart = function() {\n                var counter = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ], i, self1 = this, offset = self1._nextSet(self1._row), isWhite = false, counterPos = 0, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: 0,\n                    end: 0,\n                    correction: {\n                        bar: 1,\n                        space: 1\n                    }\n                }, code, error, j, sum;\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            sum = 0;\n                            for(j = 0; j < counter.length; j++){\n                                sum += counter[j];\n                            }\n                            for(code = self1.START_CODE_A; code <= self1.START_CODE_C; code++){\n                                error = self1._matchPattern(counter, self1.CODE_PATTERN[code]);\n                                if (error < bestMatch.error) {\n                                    bestMatch.code = code;\n                                    bestMatch.error = error;\n                                }\n                            }\n                            if (bestMatch.error < self1.AVG_CODE_ERROR) {\n                                bestMatch.start = i - sum;\n                                bestMatch.end = i;\n                                bestMatch.correction.bar = calculateCorrection(self1.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\n                                bestMatch.correction.space = calculateCorrection(self1.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\n                                return bestMatch;\n                            }\n                            for(j = 0; j < 4; j++){\n                                counter[j] = counter[j + 2];\n                            }\n                            counter[4] = 0;\n                            counter[5] = 0;\n                            counterPos--;\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            Code128Reader.prototype._decode = function() {\n                var self1 = this, startInfo = self1._findStart(), code = null, done = false, result = [], multiplier = 0, checksum = 0, codeset, rawResult = [], decodedCodes = [], shiftNext = false, unshift, removeLastCharacter = true;\n                if (startInfo === null) {\n                    return null;\n                }\n                code = {\n                    code: startInfo.code,\n                    start: startInfo.start,\n                    end: startInfo.end,\n                    correction: {\n                        bar: startInfo.correction.bar,\n                        space: startInfo.correction.space\n                    }\n                };\n                decodedCodes.push(code);\n                checksum = code.code;\n                switch(code.code){\n                    case self1.START_CODE_A:\n                        codeset = self1.CODE_A;\n                        break;\n                    case self1.START_CODE_B:\n                        codeset = self1.CODE_B;\n                        break;\n                    case self1.START_CODE_C:\n                        codeset = self1.CODE_C;\n                        break;\n                    default:\n                        return null;\n                }\n                while(!done){\n                    unshift = shiftNext;\n                    shiftNext = false;\n                    code = self1._decodeCode(code.end, code.correction);\n                    if (code !== null) {\n                        if (code.code !== self1.STOP_CODE) {\n                            removeLastCharacter = true;\n                        }\n                        if (code.code !== self1.STOP_CODE) {\n                            rawResult.push(code.code);\n                            multiplier++;\n                            checksum += multiplier * code.code;\n                        }\n                        decodedCodes.push(code);\n                        switch(codeset){\n                            case self1.CODE_A:\n                                if (code.code < 64) {\n                                    result.push(String.fromCharCode(32 + code.code));\n                                } else if (code.code < 96) {\n                                    result.push(String.fromCharCode(code.code - 64));\n                                } else {\n                                    if (code.code !== self1.STOP_CODE) {\n                                        removeLastCharacter = false;\n                                    }\n                                    switch(code.code){\n                                        case self1.CODE_SHIFT:\n                                            shiftNext = true;\n                                            codeset = self1.CODE_B;\n                                            break;\n                                        case self1.CODE_B:\n                                            codeset = self1.CODE_B;\n                                            break;\n                                        case self1.CODE_C:\n                                            codeset = self1.CODE_C;\n                                            break;\n                                        case self1.STOP_CODE:\n                                            done = true;\n                                            break;\n                                    }\n                                }\n                                break;\n                            case self1.CODE_B:\n                                if (code.code < 96) {\n                                    result.push(String.fromCharCode(32 + code.code));\n                                } else {\n                                    if (code.code !== self1.STOP_CODE) {\n                                        removeLastCharacter = false;\n                                    }\n                                    switch(code.code){\n                                        case self1.CODE_SHIFT:\n                                            shiftNext = true;\n                                            codeset = self1.CODE_A;\n                                            break;\n                                        case self1.CODE_A:\n                                            codeset = self1.CODE_A;\n                                            break;\n                                        case self1.CODE_C:\n                                            codeset = self1.CODE_C;\n                                            break;\n                                        case self1.STOP_CODE:\n                                            done = true;\n                                            break;\n                                    }\n                                }\n                                break;\n                            case self1.CODE_C:\n                                if (code.code < 100) {\n                                    result.push(code.code < 10 ? \"0\" + code.code : code.code);\n                                } else {\n                                    if (code.code !== self1.STOP_CODE) {\n                                        removeLastCharacter = false;\n                                    }\n                                    switch(code.code){\n                                        case self1.CODE_A:\n                                            codeset = self1.CODE_A;\n                                            break;\n                                        case self1.CODE_B:\n                                            codeset = self1.CODE_B;\n                                            break;\n                                        case self1.STOP_CODE:\n                                            done = true;\n                                            break;\n                                    }\n                                }\n                                break;\n                        }\n                    } else {\n                        done = true;\n                    }\n                    if (unshift) {\n                        codeset = codeset === self1.CODE_A ? self1.CODE_B : self1.CODE_A;\n                    }\n                }\n                if (code === null) {\n                    return null;\n                }\n                code.end = self1._nextUnset(self1._row, code.end);\n                if (!self1._verifyTrailingWhitespace(code)) {\n                    return null;\n                }\n                checksum -= multiplier * rawResult[rawResult.length - 1];\n                if (checksum % 103 !== rawResult[rawResult.length - 1]) {\n                    return null;\n                }\n                if (!result.length) {\n                    return null;\n                }\n                // remove last code from result (checksum)\n                if (removeLastCharacter) {\n                    result.splice(result.length - 1, 1);\n                }\n                return {\n                    code: result.join(\"\"),\n                    start: startInfo.start,\n                    end: code.end,\n                    codeset: codeset,\n                    startInfo: startInfo,\n                    decodedCodes: decodedCodes,\n                    endInfo: code\n                };\n            };\n            _barcode_reader2.default.prototype._verifyTrailingWhitespace = function(endInfo) {\n                var self1 = this, trailingWhitespaceEnd;\n                trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                if (trailingWhitespaceEnd < self1._row.length) {\n                    if (self1._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                        return endInfo;\n                    }\n                }\n                return null;\n            };\n            function calculateCorrection(expected, normalized, indices) {\n                var length = indices.length, sumNormalized = 0, sumExpected = 0;\n                while(length--){\n                    sumExpected += expected[indices[length]];\n                    sumNormalized += normalized[indices[length]];\n                }\n                return sumExpected / sumNormalized;\n            }\n            exports1.default = Code128Reader;\n        /***/ },\n        /* 68 */ /***/ function(module1, exports1, __nested_webpack_require_316811__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _code_39_reader = __nested_webpack_require_316811__(31);\n            var _code_39_reader2 = _interopRequireDefault(_code_39_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function Code39VINReader() {\n                _code_39_reader2.default.call(this);\n            }\n            var patterns = {\n                IOQ: /[IOQ]/g,\n                AZ09: /[A-Z0-9]{17}/\n            };\n            Code39VINReader.prototype = Object.create(_code_39_reader2.default.prototype);\n            Code39VINReader.prototype.constructor = Code39VINReader;\n            // Cribbed from:\n            // https://github.com/zxing/zxing/blob/master/core/src/main/java/com/google/zxing/client/result/VINResultParser.java\n            Code39VINReader.prototype._decode = function() {\n                var result = _code_39_reader2.default.prototype._decode.apply(this);\n                if (!result) {\n                    return null;\n                }\n                var code = result.code;\n                if (!code) {\n                    return null;\n                }\n                code = code.replace(patterns.IOQ, \"\");\n                if (!code.match(patterns.AZ09)) {\n                    if (false) {}\n                    return null;\n                }\n                if (!this._checkChecksum(code)) {\n                    return null;\n                }\n                result.code = code;\n                return result;\n            };\n            Code39VINReader.prototype._checkChecksum = function(code) {\n                // TODO\n                return !!code;\n            };\n            exports1.default = Code39VINReader;\n        /***/ },\n        /* 69 */ /***/ function(module1, exports1, __nested_webpack_require_318817__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _barcode_reader = __nested_webpack_require_318817__(1);\n            var _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n            var _array_helper = __nested_webpack_require_318817__(3);\n            var _array_helper2 = _interopRequireDefault(_array_helper);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function Code93Reader() {\n                _barcode_reader2.default.call(this);\n            }\n            var ALPHABETH_STRING = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*\";\n            var properties = {\n                ALPHABETH_STRING: {\n                    value: ALPHABETH_STRING\n                },\n                ALPHABET: {\n                    value: ALPHABETH_STRING.split(\"\").map(function(char) {\n                        return char.charCodeAt(0);\n                    })\n                },\n                CHARACTER_ENCODINGS: {\n                    value: [\n                        0x114,\n                        0x148,\n                        0x144,\n                        0x142,\n                        0x128,\n                        0x124,\n                        0x122,\n                        0x150,\n                        0x112,\n                        0x10A,\n                        0x1A8,\n                        0x1A4,\n                        0x1A2,\n                        0x194,\n                        0x192,\n                        0x18A,\n                        0x168,\n                        0x164,\n                        0x162,\n                        0x134,\n                        0x11A,\n                        0x158,\n                        0x14C,\n                        0x146,\n                        0x12C,\n                        0x116,\n                        0x1B4,\n                        0x1B2,\n                        0x1AC,\n                        0x1A6,\n                        0x196,\n                        0x19A,\n                        0x16C,\n                        0x166,\n                        0x136,\n                        0x13A,\n                        0x12E,\n                        0x1D4,\n                        0x1D2,\n                        0x1CA,\n                        0x16E,\n                        0x176,\n                        0x1AE,\n                        0x126,\n                        0x1DA,\n                        0x1D6,\n                        0x132,\n                        0x15E\n                    ]\n                },\n                ASTERISK: {\n                    value: 0x15E\n                },\n                FORMAT: {\n                    value: \"code_93\",\n                    writeable: false\n                }\n            };\n            Code93Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\n            Code93Reader.prototype.constructor = Code93Reader;\n            Code93Reader.prototype._decode = function() {\n                var self1 = this, counters = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ], result = [], start = self1._findStart(), decodedChar, lastStart, pattern, nextStart;\n                if (!start) {\n                    return null;\n                }\n                nextStart = self1._nextSet(self1._row, start.end);\n                do {\n                    counters = self1._toCounters(nextStart, counters);\n                    pattern = self1._toPattern(counters);\n                    if (pattern < 0) {\n                        return null;\n                    }\n                    decodedChar = self1._patternToChar(pattern);\n                    if (decodedChar < 0) {\n                        return null;\n                    }\n                    result.push(decodedChar);\n                    lastStart = nextStart;\n                    nextStart += _array_helper2.default.sum(counters);\n                    nextStart = self1._nextSet(self1._row, nextStart);\n                }while (decodedChar !== \"*\");\n                result.pop();\n                if (!result.length) {\n                    return null;\n                }\n                if (!self1._verifyEnd(lastStart, nextStart, counters)) {\n                    return null;\n                }\n                if (!self1._verifyChecksums(result)) {\n                    return null;\n                }\n                result = result.slice(0, result.length - 2);\n                if ((result = self1._decodeExtended(result)) === null) {\n                    return null;\n                }\n                ;\n                return {\n                    code: result.join(\"\"),\n                    start: start.start,\n                    end: nextStart,\n                    startInfo: start,\n                    decodedCodes: result\n                };\n            };\n            Code93Reader.prototype._verifyEnd = function(lastStart, nextStart) {\n                if (lastStart === nextStart || !this._row[nextStart]) {\n                    return false;\n                }\n                return true;\n            };\n            Code93Reader.prototype._patternToChar = function(pattern) {\n                var i, self1 = this;\n                for(i = 0; i < self1.CHARACTER_ENCODINGS.length; i++){\n                    if (self1.CHARACTER_ENCODINGS[i] === pattern) {\n                        return String.fromCharCode(self1.ALPHABET[i]);\n                    }\n                }\n                return -1;\n            };\n            Code93Reader.prototype._toPattern = function(counters) {\n                var numCounters = counters.length;\n                var pattern = 0;\n                var sum = 0;\n                for(var i = 0; i < numCounters; i++){\n                    sum += counters[i];\n                }\n                for(var _i = 0; _i < numCounters; _i++){\n                    var normalized = Math.round(counters[_i] * 9 / sum);\n                    if (normalized < 1 || normalized > 4) {\n                        return -1;\n                    }\n                    if ((_i & 1) === 0) {\n                        for(var j = 0; j < normalized; j++){\n                            pattern = pattern << 1 | 1;\n                        }\n                    } else {\n                        pattern <<= normalized;\n                    }\n                }\n                return pattern;\n            };\n            Code93Reader.prototype._findStart = function() {\n                var self1 = this, offset = self1._nextSet(self1._row), patternStart = offset, counter = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ], counterPos = 0, isWhite = false, i, j, whiteSpaceMustStart;\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            // find start pattern\n                            if (self1._toPattern(counter) === self1.ASTERISK) {\n                                whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\n                                if (self1._matchRange(whiteSpaceMustStart, patternStart, 0)) {\n                                    return {\n                                        start: patternStart,\n                                        end: i\n                                    };\n                                }\n                            }\n                            patternStart += counter[0] + counter[1];\n                            for(j = 0; j < 4; j++){\n                                counter[j] = counter[j + 2];\n                            }\n                            counter[4] = 0;\n                            counter[5] = 0;\n                            counterPos--;\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            Code93Reader.prototype._decodeExtended = function(charArray) {\n                var length = charArray.length;\n                var result = [];\n                for(var i = 0; i < length; i++){\n                    var char = charArray[i];\n                    if (char >= \"a\" && char <= \"d\") {\n                        if (i > length - 2) {\n                            return null;\n                        }\n                        var nextChar = charArray[++i];\n                        var nextCharCode = nextChar.charCodeAt(0);\n                        var decodedChar = void 0;\n                        switch(char){\n                            case \"a\":\n                                if (nextChar >= \"A\" && nextChar <= \"Z\") {\n                                    decodedChar = String.fromCharCode(nextCharCode - 64);\n                                } else {\n                                    return null;\n                                }\n                                break;\n                            case \"b\":\n                                if (nextChar >= \"A\" && nextChar <= \"E\") {\n                                    decodedChar = String.fromCharCode(nextCharCode - 38);\n                                } else if (nextChar >= \"F\" && nextChar <= \"J\") {\n                                    decodedChar = String.fromCharCode(nextCharCode - 11);\n                                } else if (nextChar >= \"K\" && nextChar <= \"O\") {\n                                    decodedChar = String.fromCharCode(nextCharCode + 16);\n                                } else if (nextChar >= \"P\" && nextChar <= \"S\") {\n                                    decodedChar = String.fromCharCode(nextCharCode + 43);\n                                } else if (nextChar >= \"T\" && nextChar <= \"Z\") {\n                                    decodedChar = String.fromCharCode(127);\n                                } else {\n                                    return null;\n                                }\n                                break;\n                            case \"c\":\n                                if (nextChar >= \"A\" && nextChar <= \"O\") {\n                                    decodedChar = String.fromCharCode(nextCharCode - 32);\n                                } else if (nextChar === \"Z\") {\n                                    decodedChar = \":\";\n                                } else {\n                                    return null;\n                                }\n                                break;\n                            case \"d\":\n                                if (nextChar >= \"A\" && nextChar <= \"Z\") {\n                                    decodedChar = String.fromCharCode(nextCharCode + 32);\n                                } else {\n                                    return null;\n                                }\n                                break;\n                        }\n                        result.push(decodedChar);\n                    } else {\n                        result.push(char);\n                    }\n                }\n                return result;\n            };\n            Code93Reader.prototype._verifyChecksums = function(charArray) {\n                return this._matchCheckChar(charArray, charArray.length - 2, 20) && this._matchCheckChar(charArray, charArray.length - 1, 15);\n            };\n            Code93Reader.prototype._matchCheckChar = function(charArray, index, maxWeight) {\n                var _this = this;\n                var arrayToCheck = charArray.slice(0, index);\n                var length = arrayToCheck.length;\n                var weightedSums = arrayToCheck.reduce(function(sum, char, i) {\n                    var weight = (i * -1 + (length - 1)) % maxWeight + 1;\n                    var value = _this.ALPHABET.indexOf(char.charCodeAt(0));\n                    return sum + weight * value;\n                }, 0);\n                var checkChar = this.ALPHABET[weightedSums % 47];\n                return checkChar === charArray[index].charCodeAt(0);\n            };\n            exports1.default = Code93Reader;\n        /***/ },\n        /* 70 */ /***/ function(module1, exports1, __nested_webpack_require_331367__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _ean_reader = __nested_webpack_require_331367__(4);\n            var _ean_reader2 = _interopRequireDefault(_ean_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function EAN2Reader() {\n                _ean_reader2.default.call(this);\n            }\n            var properties = {\n                FORMAT: {\n                    value: \"ean_2\",\n                    writeable: false\n                }\n            };\n            EAN2Reader.prototype = Object.create(_ean_reader2.default.prototype, properties);\n            EAN2Reader.prototype.constructor = EAN2Reader;\n            EAN2Reader.prototype.decode = function(row, start) {\n                this._row = row;\n                var counters = [\n                    0,\n                    0,\n                    0,\n                    0\n                ], codeFrequency = 0, i = 0, offset = start, end = this._row.length, code, result = [], decodedCodes = [];\n                for(i = 0; i < 2 && offset < end; i++){\n                    code = this._decodeCode(offset);\n                    if (!code) {\n                        return null;\n                    }\n                    decodedCodes.push(code);\n                    result.push(code.code % 10);\n                    if (code.code >= this.CODE_G_START) {\n                        codeFrequency |= 1 << 1 - i;\n                    }\n                    if (i != 1) {\n                        offset = this._nextSet(this._row, code.end);\n                        offset = this._nextUnset(this._row, offset);\n                    }\n                }\n                if (result.length != 2 || parseInt(result.join(\"\")) % 4 !== codeFrequency) {\n                    return null;\n                }\n                return {\n                    code: result.join(\"\"),\n                    decodedCodes: decodedCodes,\n                    end: code.end\n                };\n            };\n            exports1.default = EAN2Reader;\n        /***/ },\n        /* 71 */ /***/ function(module1, exports1, __nested_webpack_require_333589__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _ean_reader = __nested_webpack_require_333589__(4);\n            var _ean_reader2 = _interopRequireDefault(_ean_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function EAN5Reader() {\n                _ean_reader2.default.call(this);\n            }\n            var properties = {\n                FORMAT: {\n                    value: \"ean_5\",\n                    writeable: false\n                }\n            };\n            var CHECK_DIGIT_ENCODINGS = [\n                24,\n                20,\n                18,\n                17,\n                12,\n                6,\n                3,\n                10,\n                9,\n                5\n            ];\n            EAN5Reader.prototype = Object.create(_ean_reader2.default.prototype, properties);\n            EAN5Reader.prototype.constructor = EAN5Reader;\n            EAN5Reader.prototype.decode = function(row, start) {\n                this._row = row;\n                var counters = [\n                    0,\n                    0,\n                    0,\n                    0\n                ], codeFrequency = 0, i = 0, offset = start, end = this._row.length, code, result = [], decodedCodes = [];\n                for(i = 0; i < 5 && offset < end; i++){\n                    code = this._decodeCode(offset);\n                    if (!code) {\n                        return null;\n                    }\n                    decodedCodes.push(code);\n                    result.push(code.code % 10);\n                    if (code.code >= this.CODE_G_START) {\n                        codeFrequency |= 1 << 4 - i;\n                    }\n                    if (i != 4) {\n                        offset = this._nextSet(this._row, code.end);\n                        offset = this._nextUnset(this._row, offset);\n                    }\n                }\n                if (result.length != 5) {\n                    return null;\n                }\n                if (extensionChecksum(result) !== determineCheckDigit(codeFrequency)) {\n                    return null;\n                }\n                return {\n                    code: result.join(\"\"),\n                    decodedCodes: decodedCodes,\n                    end: code.end\n                };\n            };\n            function determineCheckDigit(codeFrequency) {\n                var i;\n                for(i = 0; i < 10; i++){\n                    if (codeFrequency === CHECK_DIGIT_ENCODINGS[i]) {\n                        return i;\n                    }\n                }\n                return null;\n            }\n            function extensionChecksum(result) {\n                var length = result.length, sum = 0, i;\n                for(i = length - 2; i >= 0; i -= 2){\n                    sum += result[i];\n                }\n                sum *= 3;\n                for(i = length - 1; i >= 0; i -= 2){\n                    sum += result[i];\n                }\n                sum *= 3;\n                return sum % 10;\n            }\n            exports1.default = EAN5Reader;\n        /***/ },\n        /* 72 */ /***/ function(module1, exports1, __nested_webpack_require_336882__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _ean_reader = __nested_webpack_require_336882__(4);\n            var _ean_reader2 = _interopRequireDefault(_ean_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function EAN8Reader(opts, supplements) {\n                _ean_reader2.default.call(this, opts, supplements);\n            }\n            var properties = {\n                FORMAT: {\n                    value: \"ean_8\",\n                    writeable: false\n                }\n            };\n            EAN8Reader.prototype = Object.create(_ean_reader2.default.prototype, properties);\n            EAN8Reader.prototype.constructor = EAN8Reader;\n            EAN8Reader.prototype._decodePayload = function(code, result, decodedCodes) {\n                var i, self1 = this;\n                for(i = 0; i < 4; i++){\n                    code = self1._decodeCode(code.end, self1.CODE_G_START);\n                    if (!code) {\n                        return null;\n                    }\n                    result.push(code.code);\n                    decodedCodes.push(code);\n                }\n                code = self1._findPattern(self1.MIDDLE_PATTERN, code.end, true, false);\n                if (code === null) {\n                    return null;\n                }\n                decodedCodes.push(code);\n                for(i = 0; i < 4; i++){\n                    code = self1._decodeCode(code.end, self1.CODE_G_START);\n                    if (!code) {\n                        return null;\n                    }\n                    decodedCodes.push(code);\n                    result.push(code.code);\n                }\n                return code;\n            };\n            exports1.default = EAN8Reader;\n        /***/ },\n        /* 73 */ /***/ function(module1, exports1, __nested_webpack_require_338844__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _merge2 = __nested_webpack_require_338844__(28);\n            var _merge3 = _interopRequireDefault(_merge2);\n            var _barcode_reader = __nested_webpack_require_338844__(1);\n            var _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function I2of5Reader(opts) {\n                opts = (0, _merge3.default)(getDefaulConfig(), opts);\n                _barcode_reader2.default.call(this, opts);\n                this.barSpaceRatio = [\n                    1,\n                    1\n                ];\n                if (opts.normalizeBarSpaceWidth) {\n                    this.SINGLE_CODE_ERROR = 0.38;\n                    this.AVG_CODE_ERROR = 0.09;\n                }\n            }\n            function getDefaulConfig() {\n                var config = {};\n                Object.keys(I2of5Reader.CONFIG_KEYS).forEach(function(key) {\n                    config[key] = I2of5Reader.CONFIG_KEYS[key].default;\n                });\n                return config;\n            }\n            var N = 1, W = 3, properties = {\n                START_PATTERN: {\n                    value: [\n                        N,\n                        N,\n                        N,\n                        N\n                    ]\n                },\n                STOP_PATTERN: {\n                    value: [\n                        N,\n                        N,\n                        W\n                    ]\n                },\n                CODE_PATTERN: {\n                    value: [\n                        [\n                            N,\n                            N,\n                            W,\n                            W,\n                            N\n                        ],\n                        [\n                            W,\n                            N,\n                            N,\n                            N,\n                            W\n                        ],\n                        [\n                            N,\n                            W,\n                            N,\n                            N,\n                            W\n                        ],\n                        [\n                            W,\n                            W,\n                            N,\n                            N,\n                            N\n                        ],\n                        [\n                            N,\n                            N,\n                            W,\n                            N,\n                            W\n                        ],\n                        [\n                            W,\n                            N,\n                            W,\n                            N,\n                            N\n                        ],\n                        [\n                            N,\n                            W,\n                            W,\n                            N,\n                            N\n                        ],\n                        [\n                            N,\n                            N,\n                            N,\n                            W,\n                            W\n                        ],\n                        [\n                            W,\n                            N,\n                            N,\n                            W,\n                            N\n                        ],\n                        [\n                            N,\n                            W,\n                            N,\n                            W,\n                            N\n                        ]\n                    ]\n                },\n                SINGLE_CODE_ERROR: {\n                    value: 0.78,\n                    writable: true\n                },\n                AVG_CODE_ERROR: {\n                    value: 0.38,\n                    writable: true\n                },\n                MAX_CORRECTION_FACTOR: {\n                    value: 5\n                },\n                FORMAT: {\n                    value: \"i2of5\"\n                }\n            };\n            I2of5Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\n            I2of5Reader.prototype.constructor = I2of5Reader;\n            I2of5Reader.prototype._matchPattern = function(counter, code) {\n                if (this.config.normalizeBarSpaceWidth) {\n                    var i, counterSum = [\n                        0,\n                        0\n                    ], codeSum = [\n                        0,\n                        0\n                    ], correction = [\n                        0,\n                        0\n                    ], correctionRatio = this.MAX_CORRECTION_FACTOR, correctionRatioInverse = 1 / correctionRatio;\n                    for(i = 0; i < counter.length; i++){\n                        counterSum[i % 2] += counter[i];\n                        codeSum[i % 2] += code[i];\n                    }\n                    correction[0] = codeSum[0] / counterSum[0];\n                    correction[1] = codeSum[1] / counterSum[1];\n                    correction[0] = Math.max(Math.min(correction[0], correctionRatio), correctionRatioInverse);\n                    correction[1] = Math.max(Math.min(correction[1], correctionRatio), correctionRatioInverse);\n                    this.barSpaceRatio = correction;\n                    for(i = 0; i < counter.length; i++){\n                        counter[i] *= this.barSpaceRatio[i % 2];\n                    }\n                }\n                return _barcode_reader2.default.prototype._matchPattern.call(this, counter, code);\n            };\n            I2of5Reader.prototype._findPattern = function(pattern, offset, isWhite, tryHarder) {\n                var counter = [], self1 = this, i, counterPos = 0, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: 0,\n                    end: 0\n                }, error, j, sum, normalized, epsilon = self1.AVG_CODE_ERROR;\n                isWhite = isWhite || false;\n                tryHarder = tryHarder || false;\n                if (!offset) {\n                    offset = self1._nextSet(self1._row);\n                }\n                for(i = 0; i < pattern.length; i++){\n                    counter[i] = 0;\n                }\n                for(i = offset; i < self1._row.length; i++){\n                    if (self1._row[i] ^ isWhite) {\n                        counter[counterPos]++;\n                    } else {\n                        if (counterPos === counter.length - 1) {\n                            sum = 0;\n                            for(j = 0; j < counter.length; j++){\n                                sum += counter[j];\n                            }\n                            error = self1._matchPattern(counter, pattern);\n                            if (error < epsilon) {\n                                bestMatch.error = error;\n                                bestMatch.start = i - sum;\n                                bestMatch.end = i;\n                                return bestMatch;\n                            }\n                            if (tryHarder) {\n                                for(j = 0; j < counter.length - 2; j++){\n                                    counter[j] = counter[j + 2];\n                                }\n                                counter[counter.length - 2] = 0;\n                                counter[counter.length - 1] = 0;\n                                counterPos--;\n                            } else {\n                                return null;\n                            }\n                        } else {\n                            counterPos++;\n                        }\n                        counter[counterPos] = 1;\n                        isWhite = !isWhite;\n                    }\n                }\n                return null;\n            };\n            I2of5Reader.prototype._findStart = function() {\n                var self1 = this, leadingWhitespaceStart, offset = self1._nextSet(self1._row), startInfo, narrowBarWidth = 1;\n                while(!startInfo){\n                    startInfo = self1._findPattern(self1.START_PATTERN, offset, false, true);\n                    if (!startInfo) {\n                        return null;\n                    }\n                    narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / 4);\n                    leadingWhitespaceStart = startInfo.start - narrowBarWidth * 10;\n                    if (leadingWhitespaceStart >= 0) {\n                        if (self1._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                            return startInfo;\n                        }\n                    }\n                    offset = startInfo.end;\n                    startInfo = null;\n                }\n            };\n            I2of5Reader.prototype._verifyTrailingWhitespace = function(endInfo) {\n                var self1 = this, trailingWhitespaceEnd;\n                trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                if (trailingWhitespaceEnd < self1._row.length) {\n                    if (self1._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                        return endInfo;\n                    }\n                }\n                return null;\n            };\n            I2of5Reader.prototype._findEnd = function() {\n                var self1 = this, endInfo, tmp;\n                self1._row.reverse();\n                endInfo = self1._findPattern(self1.STOP_PATTERN);\n                self1._row.reverse();\n                if (endInfo === null) {\n                    return null;\n                }\n                // reverse numbers\n                tmp = endInfo.start;\n                endInfo.start = self1._row.length - endInfo.end;\n                endInfo.end = self1._row.length - tmp;\n                return endInfo !== null ? self1._verifyTrailingWhitespace(endInfo) : null;\n            };\n            I2of5Reader.prototype._decodePair = function(counterPair) {\n                var i, code, codes = [], self1 = this;\n                for(i = 0; i < counterPair.length; i++){\n                    code = self1._decodeCode(counterPair[i]);\n                    if (!code) {\n                        return null;\n                    }\n                    codes.push(code);\n                }\n                return codes;\n            };\n            I2of5Reader.prototype._decodeCode = function(counter) {\n                var j, self1 = this, sum = 0, normalized, error, epsilon = self1.AVG_CODE_ERROR, code, bestMatch = {\n                    error: Number.MAX_VALUE,\n                    code: -1,\n                    start: 0,\n                    end: 0\n                };\n                for(j = 0; j < counter.length; j++){\n                    sum += counter[j];\n                }\n                for(code = 0; code < self1.CODE_PATTERN.length; code++){\n                    error = self1._matchPattern(counter, self1.CODE_PATTERN[code]);\n                    if (error < bestMatch.error) {\n                        bestMatch.code = code;\n                        bestMatch.error = error;\n                    }\n                }\n                if (bestMatch.error < epsilon) {\n                    return bestMatch;\n                }\n            };\n            I2of5Reader.prototype._decodePayload = function(counters, result, decodedCodes) {\n                var i, self1 = this, pos = 0, counterLength = counters.length, counterPair = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ], codes;\n                while(pos < counterLength){\n                    for(i = 0; i < 5; i++){\n                        counterPair[0][i] = counters[pos] * this.barSpaceRatio[0];\n                        counterPair[1][i] = counters[pos + 1] * this.barSpaceRatio[1];\n                        pos += 2;\n                    }\n                    codes = self1._decodePair(counterPair);\n                    if (!codes) {\n                        return null;\n                    }\n                    for(i = 0; i < codes.length; i++){\n                        result.push(codes[i].code + \"\");\n                        decodedCodes.push(codes[i]);\n                    }\n                }\n                return codes;\n            };\n            I2of5Reader.prototype._verifyCounterLength = function(counters) {\n                return counters.length % 10 === 0;\n            };\n            I2of5Reader.prototype._decode = function() {\n                var startInfo, endInfo, self1 = this, code, result = [], decodedCodes = [], counters;\n                startInfo = self1._findStart();\n                if (!startInfo) {\n                    return null;\n                }\n                decodedCodes.push(startInfo);\n                endInfo = self1._findEnd();\n                if (!endInfo) {\n                    return null;\n                }\n                counters = self1._fillCounters(startInfo.end, endInfo.start, false);\n                if (!self1._verifyCounterLength(counters)) {\n                    return null;\n                }\n                code = self1._decodePayload(counters, result, decodedCodes);\n                if (!code) {\n                    return null;\n                }\n                if (result.length % 2 !== 0 || result.length < 6) {\n                    return null;\n                }\n                decodedCodes.push(endInfo);\n                return {\n                    code: result.join(\"\"),\n                    start: startInfo.start,\n                    end: endInfo.end,\n                    startInfo: startInfo,\n                    decodedCodes: decodedCodes\n                };\n            };\n            I2of5Reader.CONFIG_KEYS = {\n                normalizeBarSpaceWidth: {\n                    \"type\": \"boolean\",\n                    \"default\": false,\n                    \"description\": \"If true, the reader tries to normalize the\" + \"width-difference between bars and spaces\"\n                }\n            };\n            exports1.default = I2of5Reader;\n        /***/ },\n        /* 74 */ /***/ function(module1, exports1, __nested_webpack_require_353509__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _ean_reader = __nested_webpack_require_353509__(4);\n            var _ean_reader2 = _interopRequireDefault(_ean_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function UPCEReader(opts, supplements) {\n                _ean_reader2.default.call(this, opts, supplements);\n            }\n            var properties = {\n                CODE_FREQUENCY: {\n                    value: [\n                        [\n                            56,\n                            52,\n                            50,\n                            49,\n                            44,\n                            38,\n                            35,\n                            42,\n                            41,\n                            37\n                        ],\n                        [\n                            7,\n                            11,\n                            13,\n                            14,\n                            19,\n                            25,\n                            28,\n                            21,\n                            22,\n                            26\n                        ]\n                    ]\n                },\n                STOP_PATTERN: {\n                    value: [\n                        1 / 6 * 7,\n                        1 / 6 * 7,\n                        1 / 6 * 7,\n                        1 / 6 * 7,\n                        1 / 6 * 7,\n                        1 / 6 * 7\n                    ]\n                },\n                FORMAT: {\n                    value: \"upc_e\",\n                    writeable: false\n                }\n            };\n            UPCEReader.prototype = Object.create(_ean_reader2.default.prototype, properties);\n            UPCEReader.prototype.constructor = UPCEReader;\n            UPCEReader.prototype._decodePayload = function(code, result, decodedCodes) {\n                var i, self1 = this, codeFrequency = 0x0;\n                for(i = 0; i < 6; i++){\n                    code = self1._decodeCode(code.end);\n                    if (!code) {\n                        return null;\n                    }\n                    if (code.code >= self1.CODE_G_START) {\n                        code.code = code.code - self1.CODE_G_START;\n                        codeFrequency |= 1 << 5 - i;\n                    }\n                    result.push(code.code);\n                    decodedCodes.push(code);\n                }\n                if (!self1._determineParity(codeFrequency, result)) {\n                    return null;\n                }\n                return code;\n            };\n            UPCEReader.prototype._determineParity = function(codeFrequency, result) {\n                var i, nrSystem;\n                for(nrSystem = 0; nrSystem < this.CODE_FREQUENCY.length; nrSystem++){\n                    for(i = 0; i < this.CODE_FREQUENCY[nrSystem].length; i++){\n                        if (codeFrequency === this.CODE_FREQUENCY[nrSystem][i]) {\n                            result.unshift(nrSystem);\n                            result.push(i);\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n            UPCEReader.prototype._convertToUPCA = function(result) {\n                var upca = [\n                    result[0]\n                ], lastDigit = result[result.length - 2];\n                if (lastDigit <= 2) {\n                    upca = upca.concat(result.slice(1, 3)).concat([\n                        lastDigit,\n                        0,\n                        0,\n                        0,\n                        0\n                    ]).concat(result.slice(3, 6));\n                } else if (lastDigit === 3) {\n                    upca = upca.concat(result.slice(1, 4)).concat([\n                        0,\n                        0,\n                        0,\n                        0,\n                        0\n                    ]).concat(result.slice(4, 6));\n                } else if (lastDigit === 4) {\n                    upca = upca.concat(result.slice(1, 5)).concat([\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        result[5]\n                    ]);\n                } else {\n                    upca = upca.concat(result.slice(1, 6)).concat([\n                        0,\n                        0,\n                        0,\n                        0,\n                        lastDigit\n                    ]);\n                }\n                upca.push(result[result.length - 1]);\n                return upca;\n            };\n            UPCEReader.prototype._checksum = function(result) {\n                return _ean_reader2.default.prototype._checksum.call(this, this._convertToUPCA(result));\n            };\n            UPCEReader.prototype._findEnd = function(offset, isWhite) {\n                isWhite = true;\n                return _ean_reader2.default.prototype._findEnd.call(this, offset, isWhite);\n            };\n            UPCEReader.prototype._verifyTrailingWhitespace = function(endInfo) {\n                var self1 = this, trailingWhitespaceEnd;\n                trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                if (trailingWhitespaceEnd < self1._row.length) {\n                    if (self1._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                        return endInfo;\n                    }\n                }\n            };\n            exports1.default = UPCEReader;\n        /***/ },\n        /* 75 */ /***/ function(module1, exports1, __nested_webpack_require_359368__) {\n            \"use strict\";\n            exports1.__esModule = true;\n            var _ean_reader = __nested_webpack_require_359368__(4);\n            var _ean_reader2 = _interopRequireDefault(_ean_reader);\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    default: obj\n                };\n            }\n            function UPCReader(opts, supplements) {\n                _ean_reader2.default.call(this, opts, supplements);\n            }\n            var properties = {\n                FORMAT: {\n                    value: \"upc_a\",\n                    writeable: false\n                }\n            };\n            UPCReader.prototype = Object.create(_ean_reader2.default.prototype, properties);\n            UPCReader.prototype.constructor = UPCReader;\n            UPCReader.prototype._decode = function() {\n                var result = _ean_reader2.default.prototype._decode.call(this);\n                if (result && result.code && result.code.length === 13 && result.code.charAt(0) === \"0\") {\n                    result.code = result.code.substring(1);\n                    return result;\n                }\n                return null;\n            };\n            exports1.default = UPCReader;\n        /***/ },\n        /* 76 */ /***/ function(module1, exports1) {\n            module1.exports = copy;\n            /**\n * Copy the values from one mat2 to another\n *\n * @alias mat2.copy\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */ function copy(out, a) {\n                out[0] = a[0];\n                out[1] = a[1];\n                out[2] = a[2];\n                out[3] = a[3];\n                return out;\n            }\n        /***/ },\n        /* 77 */ /***/ function(module1, exports1) {\n            module1.exports = create;\n            /**\n * Creates a new identity mat2\n *\n * @alias mat2.create\n * @returns {mat2} a new 2x2 matrix\n */ function create() {\n                var out = new Float32Array(4);\n                out[0] = 1;\n                out[1] = 0;\n                out[2] = 0;\n                out[3] = 1;\n                return out;\n            }\n        /***/ },\n        /* 78 */ /***/ function(module1, exports1) {\n            module1.exports = invert;\n            /**\n * Inverts a mat2\n *\n * @alias mat2.invert\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */ function invert(out, a) {\n                var a0 = a[0];\n                var a1 = a[1];\n                var a2 = a[2];\n                var a3 = a[3];\n                var det = a0 * a3 - a2 * a1;\n                if (!det) return null;\n                det = 1.0 / det;\n                out[0] = a3 * det;\n                out[1] = -a1 * det;\n                out[2] = -a2 * det;\n                out[3] = a0 * det;\n                return out;\n            }\n        /***/ },\n        /* 79 */ /***/ function(module1, exports1) {\n            module1.exports = scale;\n            /**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */ function scale(out, a, b) {\n                out[0] = a[0] * b;\n                out[1] = a[1] * b;\n                return out;\n            }\n        /***/ },\n        /* 80 */ /***/ function(module1, exports1) {\n            module1.exports = transformMat2;\n            /**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat2(out, a, m) {\n                var x = a[0], y = a[1];\n                out[0] = m[0] * x + m[2] * y;\n                out[1] = m[1] * x + m[3] * y;\n                return out;\n            }\n        /***/ },\n        /* 81 */ /***/ function(module1, exports1) {\n            module1.exports = clone;\n            /**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */ function clone(a) {\n                var out = new Float32Array(3);\n                out[0] = a[0];\n                out[1] = a[1];\n                out[2] = a[2];\n                return out;\n            }\n        /***/ },\n        /* 82 */ /***/ function(module1, exports1, __nested_webpack_require_363825__) {\n            var hashClear = __nested_webpack_require_363825__(120), hashDelete = __nested_webpack_require_363825__(121), hashGet = __nested_webpack_require_363825__(122), hashHas = __nested_webpack_require_363825__(123), hashSet = __nested_webpack_require_363825__(124);\n            /**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Hash(entries) {\n                var index = -1, length = entries == null ? 0 : entries.length;\n                this.clear();\n                while(++index < length){\n                    var entry = entries[index];\n                    this.set(entry[0], entry[1]);\n                }\n            }\n            // Add methods to `Hash`.\n            Hash.prototype.clear = hashClear;\n            Hash.prototype[\"delete\"] = hashDelete;\n            Hash.prototype.get = hashGet;\n            Hash.prototype.has = hashHas;\n            Hash.prototype.set = hashSet;\n            module1.exports = Hash;\n        /***/ },\n        /* 83 */ /***/ function(module1, exports1, __nested_webpack_require_364854__) {\n            var ListCache = __nested_webpack_require_364854__(10), stackClear = __nested_webpack_require_364854__(147), stackDelete = __nested_webpack_require_364854__(148), stackGet = __nested_webpack_require_364854__(149), stackHas = __nested_webpack_require_364854__(150), stackSet = __nested_webpack_require_364854__(151);\n            /**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Stack(entries) {\n                var data = this.__data__ = new ListCache(entries);\n                this.size = data.size;\n            }\n            // Add methods to `Stack`.\n            Stack.prototype.clear = stackClear;\n            Stack.prototype[\"delete\"] = stackDelete;\n            Stack.prototype.get = stackGet;\n            Stack.prototype.has = stackHas;\n            Stack.prototype.set = stackSet;\n            module1.exports = Stack;\n        /***/ },\n        /* 84 */ /***/ function(module1, exports1, __nested_webpack_require_365810__) {\n            var root = __nested_webpack_require_365810__(5);\n            /** Built-in value references. */ var Uint8Array1 = root.Uint8Array;\n            module1.exports = Uint8Array1;\n        /***/ },\n        /* 85 */ /***/ function(module1, exports1) {\n            /**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */ function apply(func, thisArg, args) {\n                switch(args.length){\n                    case 0:\n                        return func.call(thisArg);\n                    case 1:\n                        return func.call(thisArg, args[0]);\n                    case 2:\n                        return func.call(thisArg, args[0], args[1]);\n                    case 3:\n                        return func.call(thisArg, args[0], args[1], args[2]);\n                }\n                return func.apply(thisArg, args);\n            }\n            module1.exports = apply;\n        /***/ },\n        /* 86 */ /***/ function(module1, exports1, __nested_webpack_require_367092__) {\n            var baseTimes = __nested_webpack_require_367092__(105), isArguments = __nested_webpack_require_367092__(18), isArray = __nested_webpack_require_367092__(2), isBuffer = __nested_webpack_require_367092__(44), isIndex = __nested_webpack_require_367092__(15), isTypedArray = __nested_webpack_require_367092__(45);\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */ function arrayLikeKeys(value, inherited) {\n                var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\n                for(var key in value){\n                    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n                    (key == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n                    isBuff && (key == \"offset\" || key == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n                    isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || // Skip index properties.\n                    isIndex(key, length)))) {\n                        result.push(key);\n                    }\n                }\n                return result;\n            }\n            module1.exports = arrayLikeKeys;\n        /***/ },\n        /* 87 */ /***/ function(module1, exports1) {\n            /**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */ function arrayMap(array, iteratee) {\n                var index = -1, length = array == null ? 0 : array.length, result = Array(length);\n                while(++index < length){\n                    result[index] = iteratee(array[index], index, array);\n                }\n                return result;\n            }\n            module1.exports = arrayMap;\n        /***/ },\n        /* 88 */ /***/ function(module1, exports1) {\n            /**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */ function arrayPush(array, values) {\n                var index = -1, length = values.length, offset = array.length;\n                while(++index < length){\n                    array[offset + index] = values[index];\n                }\n                return array;\n            }\n            module1.exports = arrayPush;\n        /***/ },\n        /* 89 */ /***/ function(module1, exports1, __nested_webpack_require_370370__) {\n            var isObject = __nested_webpack_require_370370__(0);\n            /** Built-in value references. */ var objectCreate = Object.create;\n            /**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */ var baseCreate = function() {\n                function object() {}\n                return function(proto) {\n                    if (!isObject(proto)) {\n                        return {};\n                    }\n                    if (objectCreate) {\n                        return objectCreate(proto);\n                    }\n                    object.prototype = proto;\n                    var result = new object;\n                    object.prototype = undefined;\n                    return result;\n                };\n            }();\n            module1.exports = baseCreate;\n        /***/ },\n        /* 90 */ /***/ function(module1, exports1, __nested_webpack_require_371410__) {\n            var arrayPush = __nested_webpack_require_371410__(88), isFlattenable = __nested_webpack_require_371410__(126);\n            /**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */ function baseFlatten(array, depth, predicate, isStrict, result) {\n                var index = -1, length = array.length;\n                predicate || (predicate = isFlattenable);\n                result || (result = []);\n                while(++index < length){\n                    var value = array[index];\n                    if (depth > 0 && predicate(value)) {\n                        if (depth > 1) {\n                            // Recursively flatten arrays (susceptible to call stack limits).\n                            baseFlatten(value, depth - 1, predicate, isStrict, result);\n                        } else {\n                            arrayPush(result, value);\n                        }\n                    } else if (!isStrict) {\n                        result[result.length] = value;\n                    }\n                }\n                return result;\n            }\n            module1.exports = baseFlatten;\n        /***/ },\n        /* 91 */ /***/ function(module1, exports1, __nested_webpack_require_373012__) {\n            var createBaseFor = __nested_webpack_require_373012__(115);\n            /**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */ var baseFor = createBaseFor();\n            module1.exports = baseFor;\n        /***/ },\n        /* 92 */ /***/ function(module1, exports1, __nested_webpack_require_373728__) {\n            var castPath = __nested_webpack_require_373728__(13), toKey = __nested_webpack_require_373728__(23);\n            /**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */ function baseGet(object, path) {\n                path = castPath(path, object);\n                var index = 0, length = path.length;\n                while(object != null && index < length){\n                    object = object[toKey(path[index++])];\n                }\n                return index && index == length ? object : undefined;\n            }\n            module1.exports = baseGet;\n        /***/ },\n        /* 93 */ /***/ function(module1, exports1) {\n            /**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */ function baseHasIn(object, key) {\n                return object != null && key in Object(object);\n            }\n            module1.exports = baseHasIn;\n        /***/ },\n        /* 94 */ /***/ function(module1, exports1, __nested_webpack_require_375051__) {\n            var baseGetTag = __nested_webpack_require_375051__(8), isObjectLike = __nested_webpack_require_375051__(6);\n            /** `Object#toString` result references. */ var argsTag = \"[object Arguments]\";\n            /**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */ function baseIsArguments(value) {\n                return isObjectLike(value) && baseGetTag(value) == argsTag;\n            }\n            module1.exports = baseIsArguments;\n        /***/ },\n        /* 95 */ /***/ function(module1, exports1, __nested_webpack_require_375693__) {\n            var isFunction = __nested_webpack_require_375693__(25), isMasked = __nested_webpack_require_375693__(130), isObject = __nested_webpack_require_375693__(0), toSource = __nested_webpack_require_375693__(153);\n            /**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n            /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n            /** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;\n            /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /** Used to detect if a method is native. */ var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n            /**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function baseIsNative(value) {\n                if (!isObject(value) || isMasked(value)) {\n                    return false;\n                }\n                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n                return pattern.test(toSource(value));\n            }\n            module1.exports = baseIsNative;\n        /***/ },\n        /* 96 */ /***/ function(module1, exports1, __nested_webpack_require_377369__) {\n            var baseGetTag = __nested_webpack_require_377369__(8), isLength = __nested_webpack_require_377369__(26), isObjectLike = __nested_webpack_require_377369__(6);\n            /** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", objectTag = \"[object Object]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", weakMapTag = \"[object WeakMap]\";\n            var arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n            /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};\n            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n            typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n            /**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */ function baseIsTypedArray(value) {\n                return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n            }\n            module1.exports = baseIsTypedArray;\n        /***/ },\n        /* 97 */ /***/ function(module1, exports1, __nested_webpack_require_379697__) {\n            var isObject = __nested_webpack_require_379697__(0), isPrototype = __nested_webpack_require_379697__(40), nativeKeysIn = __nested_webpack_require_379697__(142);\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function baseKeysIn(object) {\n                if (!isObject(object)) {\n                    return nativeKeysIn(object);\n                }\n                var isProto = isPrototype(object), result = [];\n                for(var key in object){\n                    if (!(key == \"constructor\" && (isProto || !hasOwnProperty.call(object, key)))) {\n                        result.push(key);\n                    }\n                }\n                return result;\n            }\n            module1.exports = baseKeysIn;\n        /***/ },\n        /* 98 */ /***/ function(module1, exports1, __nested_webpack_require_380857__) {\n            var Stack = __nested_webpack_require_380857__(83), assignMergeValue = __nested_webpack_require_380857__(35), baseFor = __nested_webpack_require_380857__(91), baseMergeDeep = __nested_webpack_require_380857__(99), isObject = __nested_webpack_require_380857__(0), keysIn = __nested_webpack_require_380857__(46);\n            /**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function baseMerge(object, source, srcIndex, customizer, stack) {\n                if (object === source) {\n                    return;\n                }\n                baseFor(source, function(srcValue, key) {\n                    if (isObject(srcValue)) {\n                        stack || (stack = new Stack);\n                        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n                    } else {\n                        var newValue = customizer ? customizer(object[key], srcValue, key + \"\", object, source, stack) : undefined;\n                        if (newValue === undefined) {\n                            newValue = srcValue;\n                        }\n                        assignMergeValue(object, key, newValue);\n                    }\n                }, keysIn);\n            }\n            module1.exports = baseMerge;\n        /***/ },\n        /* 99 */ /***/ function(module1, exports1, __nested_webpack_require_382484__) {\n            var assignMergeValue = __nested_webpack_require_382484__(35), cloneBuffer = __nested_webpack_require_382484__(109), cloneTypedArray = __nested_webpack_require_382484__(110), copyArray = __nested_webpack_require_382484__(111), initCloneObject = __nested_webpack_require_382484__(125), isArguments = __nested_webpack_require_382484__(18), isArray = __nested_webpack_require_382484__(2), isArrayLikeObject = __nested_webpack_require_382484__(157), isBuffer = __nested_webpack_require_382484__(44), isFunction = __nested_webpack_require_382484__(25), isObject = __nested_webpack_require_382484__(0), isPlainObject = __nested_webpack_require_382484__(158), isTypedArray = __nested_webpack_require_382484__(45), toPlainObject = __nested_webpack_require_382484__(162);\n            /**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n                var objValue = object[key], srcValue = source[key], stacked = stack.get(srcValue);\n                if (stacked) {\n                    assignMergeValue(object, key, stacked);\n                    return;\n                }\n                var newValue = customizer ? customizer(objValue, srcValue, key + \"\", object, source, stack) : undefined;\n                var isCommon = newValue === undefined;\n                if (isCommon) {\n                    var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n                    newValue = srcValue;\n                    if (isArr || isBuff || isTyped) {\n                        if (isArray(objValue)) {\n                            newValue = objValue;\n                        } else if (isArrayLikeObject(objValue)) {\n                            newValue = copyArray(objValue);\n                        } else if (isBuff) {\n                            isCommon = false;\n                            newValue = cloneBuffer(srcValue, true);\n                        } else if (isTyped) {\n                            isCommon = false;\n                            newValue = cloneTypedArray(srcValue, true);\n                        } else {\n                            newValue = [];\n                        }\n                    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n                        newValue = objValue;\n                        if (isArguments(objValue)) {\n                            newValue = toPlainObject(objValue);\n                        } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {\n                            newValue = initCloneObject(srcValue);\n                        }\n                    } else {\n                        isCommon = false;\n                    }\n                }\n                if (isCommon) {\n                    // Recursively merge objects and arrays (susceptible to call stack limits).\n                    stack.set(srcValue, newValue);\n                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n                    stack[\"delete\"](srcValue);\n                }\n                assignMergeValue(object, key, newValue);\n            }\n            module1.exports = baseMergeDeep;\n        /***/ },\n        /* 100 */ /***/ function(module1, exports1, __nested_webpack_require_386202__) {\n            var basePickBy = __nested_webpack_require_386202__(101), hasIn = __nested_webpack_require_386202__(156);\n            /**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */ function basePick(object, paths) {\n                return basePickBy(object, paths, function(value, path) {\n                    return hasIn(object, path);\n                });\n            }\n            module1.exports = basePick;\n        /***/ },\n        /* 101 */ /***/ function(module1, exports1, __nested_webpack_require_386888__) {\n            var baseGet = __nested_webpack_require_386888__(92), baseSet = __nested_webpack_require_386888__(103), castPath = __nested_webpack_require_386888__(13);\n            /**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */ function basePickBy(object, paths, predicate) {\n                var index = -1, length = paths.length, result = {};\n                while(++index < length){\n                    var path = paths[index], value = baseGet(object, path);\n                    if (predicate(value, path)) {\n                        baseSet(result, castPath(path, object), value);\n                    }\n                }\n                return result;\n            }\n            module1.exports = basePickBy;\n        /***/ },\n        /* 102 */ /***/ function(module1, exports1, __nested_webpack_require_387914__) {\n            var identity = __nested_webpack_require_387914__(43), overRest = __nested_webpack_require_387914__(41), setToString = __nested_webpack_require_387914__(42);\n            /**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */ function baseRest(func, start) {\n                return setToString(overRest(func, start, identity), func + \"\");\n            }\n            module1.exports = baseRest;\n        /***/ },\n        /* 103 */ /***/ function(module1, exports1, __nested_webpack_require_388619__) {\n            var assignValue = __nested_webpack_require_388619__(36), castPath = __nested_webpack_require_388619__(13), isIndex = __nested_webpack_require_388619__(15), isObject = __nested_webpack_require_388619__(0), toKey = __nested_webpack_require_388619__(23);\n            /**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */ function baseSet(object, path, value, customizer) {\n                if (!isObject(object)) {\n                    return object;\n                }\n                path = castPath(path, object);\n                var index = -1, length = path.length, lastIndex = length - 1, nested = object;\n                while(nested != null && ++index < length){\n                    var key = toKey(path[index]), newValue = value;\n                    if (index != lastIndex) {\n                        var objValue = nested[key];\n                        newValue = customizer ? customizer(objValue, key, nested) : undefined;\n                        if (newValue === undefined) {\n                            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\n                        }\n                    }\n                    assignValue(nested, key, newValue);\n                    nested = nested[key];\n                }\n                return object;\n            }\n            module1.exports = baseSet;\n        /***/ },\n        /* 104 */ /***/ function(module1, exports1, __nested_webpack_require_390259__) {\n            var constant = __nested_webpack_require_390259__(154), defineProperty = __nested_webpack_require_390259__(37), identity = __nested_webpack_require_390259__(43);\n            /**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var baseSetToString = !defineProperty ? identity : function(func, string) {\n                return defineProperty(func, \"toString\", {\n                    \"configurable\": true,\n                    \"enumerable\": false,\n                    \"value\": constant(string),\n                    \"writable\": true\n                });\n            };\n            module1.exports = baseSetToString;\n        /***/ },\n        /* 105 */ /***/ function(module1, exports1) {\n            /**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */ function baseTimes(n, iteratee) {\n                var index = -1, result = Array(n);\n                while(++index < n){\n                    result[index] = iteratee(index);\n                }\n                return result;\n            }\n            module1.exports = baseTimes;\n        /***/ },\n        /* 106 */ /***/ function(module1, exports1, __nested_webpack_require_391797__) {\n            var Symbol1 = __nested_webpack_require_391797__(11), arrayMap = __nested_webpack_require_391797__(87), isArray = __nested_webpack_require_391797__(2), isSymbol = __nested_webpack_require_391797__(27);\n            /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;\n            /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol1 ? Symbol1.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;\n            /**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */ function baseToString(value) {\n                // Exit early for strings to avoid a performance hit in some environments.\n                if (typeof value == \"string\") {\n                    return value;\n                }\n                if (isArray(value)) {\n                    // Recursively convert values (susceptible to call stack limits).\n                    return arrayMap(value, baseToString) + \"\";\n                }\n                if (isSymbol(value)) {\n                    return symbolToString ? symbolToString.call(value) : \"\";\n                }\n                var result = value + \"\";\n                return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n            }\n            module1.exports = baseToString;\n        /***/ },\n        /* 107 */ /***/ function(module1, exports1) {\n            /**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */ function baseUnary(func) {\n                return function(value) {\n                    return func(value);\n                };\n            }\n            module1.exports = baseUnary;\n        /***/ },\n        /* 108 */ /***/ function(module1, exports1, __nested_webpack_require_393774__) {\n            var Uint8Array1 = __nested_webpack_require_393774__(84);\n            /**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */ function cloneArrayBuffer(arrayBuffer) {\n                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n                new Uint8Array1(result).set(new Uint8Array1(arrayBuffer));\n                return result;\n            }\n            module1.exports = cloneArrayBuffer;\n        /***/ },\n        /* 109 */ /***/ function(module1, exports1, __nested_webpack_require_394406__) {\n            /* WEBPACK VAR INJECTION */ (function(module1) {\n                var root = __nested_webpack_require_394406__(5);\n                /** Detect free variable `exports`. */ var freeExports = typeof exports1 == \"object\" && exports1 && !exports1.nodeType && exports1;\n                /** Detect free variable `module`. */ var freeModule = freeExports && typeof module1 == \"object\" && module1 && !module1.nodeType && module1;\n                /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n                /** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n                /**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */ function cloneBuffer(buffer, isDeep) {\n                    if (isDeep) {\n                        return buffer.slice();\n                    }\n                    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n                    buffer.copy(result);\n                    return result;\n                }\n                module1.exports = cloneBuffer;\n            /* WEBPACK VAR INJECTION */ }).call(exports1, __nested_webpack_require_394406__(29)(module1));\n        /***/ },\n        /* 110 */ /***/ function(module1, exports1, __nested_webpack_require_395942__) {\n            var cloneArrayBuffer = __nested_webpack_require_395942__(108);\n            /**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */ function cloneTypedArray(typedArray, isDeep) {\n                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n            }\n            module1.exports = cloneTypedArray;\n        /***/ },\n        /* 111 */ /***/ function(module1, exports1) {\n            /**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */ function copyArray(source, array) {\n                var index = -1, length = source.length;\n                array || (array = Array(length));\n                while(++index < length){\n                    array[index] = source[index];\n                }\n                return array;\n            }\n            module1.exports = copyArray;\n        /***/ },\n        /* 112 */ /***/ function(module1, exports1, __nested_webpack_require_397268__) {\n            var assignValue = __nested_webpack_require_397268__(36), baseAssignValue = __nested_webpack_require_397268__(21);\n            /**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */ function copyObject(source, props, object, customizer) {\n                var isNew = !object;\n                object || (object = {});\n                var index = -1, length = props.length;\n                while(++index < length){\n                    var key = props[index];\n                    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n                    if (newValue === undefined) {\n                        newValue = source[key];\n                    }\n                    if (isNew) {\n                        baseAssignValue(object, key, newValue);\n                    } else {\n                        assignValue(object, key, newValue);\n                    }\n                }\n                return object;\n            }\n            module1.exports = copyObject;\n        /***/ },\n        /* 113 */ /***/ function(module1, exports1, __nested_webpack_require_398665__) {\n            var root = __nested_webpack_require_398665__(5);\n            /** Used to detect overreaching core-js shims. */ var coreJsData = root[\"__core-js_shared__\"];\n            module1.exports = coreJsData;\n        /***/ },\n        /* 114 */ /***/ function(module1, exports1, __nested_webpack_require_398953__) {\n            var baseRest = __nested_webpack_require_398953__(102), isIterateeCall = __nested_webpack_require_398953__(127);\n            /**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */ function createAssigner(assigner) {\n                return baseRest(function(object, sources) {\n                    var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;\n                    customizer = assigner.length > 3 && typeof customizer == \"function\" ? (length--, customizer) : undefined;\n                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n                        customizer = length < 3 ? undefined : customizer;\n                        length = 1;\n                    }\n                    object = Object(object);\n                    while(++index < length){\n                        var source = sources[index];\n                        if (source) {\n                            assigner(object, source, index, customizer);\n                        }\n                    }\n                    return object;\n                });\n            }\n            module1.exports = createAssigner;\n        /***/ },\n        /* 115 */ /***/ function(module1, exports1) {\n            /**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */ function createBaseFor(fromRight) {\n                return function(object, iteratee, keysFunc) {\n                    var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;\n                    while(length--){\n                        var key = props[fromRight ? length : ++index];\n                        if (iteratee(iterable[key], key, iterable) === false) {\n                            break;\n                        }\n                    }\n                    return object;\n                };\n            }\n            module1.exports = createBaseFor;\n        /***/ },\n        /* 116 */ /***/ function(module1, exports1, __nested_webpack_require_401246__) {\n            var flatten = __nested_webpack_require_401246__(155), overRest = __nested_webpack_require_401246__(41), setToString = __nested_webpack_require_401246__(42);\n            /**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */ function flatRest(func) {\n                return setToString(overRest(func, undefined, flatten), func + \"\");\n            }\n            module1.exports = flatRest;\n        /***/ },\n        /* 117 */ /***/ function(module1, exports1, __nested_webpack_require_401851__) {\n            var Symbol1 = __nested_webpack_require_401851__(11);\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n            /** Built-in value references. */ var symToStringTag = Symbol1 ? Symbol1.toStringTag : undefined;\n            /**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag(value) {\n                var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n                try {\n                    value[symToStringTag] = undefined;\n                    var unmasked = true;\n                } catch (e) {}\n                var result = nativeObjectToString.call(value);\n                if (unmasked) {\n                    if (isOwn) {\n                        value[symToStringTag] = tag;\n                    } else {\n                        delete value[symToStringTag];\n                    }\n                }\n                return result;\n            }\n            module1.exports = getRawTag;\n        /***/ },\n        /* 118 */ /***/ function(module1, exports1) {\n            /**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function getValue(object, key) {\n                return object == null ? undefined : object[key];\n            }\n            module1.exports = getValue;\n        /***/ },\n        /* 119 */ /***/ function(module1, exports1, __nested_webpack_require_403831__) {\n            var castPath = __nested_webpack_require_403831__(13), isArguments = __nested_webpack_require_403831__(18), isArray = __nested_webpack_require_403831__(2), isIndex = __nested_webpack_require_403831__(15), isLength = __nested_webpack_require_403831__(26), toKey = __nested_webpack_require_403831__(23);\n            /**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */ function hasPath(object, path, hasFunc) {\n                path = castPath(path, object);\n                var index = -1, length = path.length, result = false;\n                while(++index < length){\n                    var key = toKey(path[index]);\n                    if (!(result = object != null && hasFunc(object, key))) {\n                        break;\n                    }\n                    object = object[key];\n                }\n                if (result || ++index != length) {\n                    return result;\n                }\n                length = object == null ? 0 : object.length;\n                return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\n            }\n            module1.exports = hasPath;\n        /***/ },\n        /* 120 */ /***/ function(module1, exports1, __nested_webpack_require_405235__) {\n            var nativeCreate = __nested_webpack_require_405235__(16);\n            /**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function hashClear() {\n                this.__data__ = nativeCreate ? nativeCreate(null) : {};\n                this.size = 0;\n            }\n            module1.exports = hashClear;\n        /***/ },\n        /* 121 */ /***/ function(module1, exports1) {\n            /**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function hashDelete(key) {\n                var result = this.has(key) && delete this.__data__[key];\n                this.size -= result ? 1 : 0;\n                return result;\n            }\n            module1.exports = hashDelete;\n        /***/ },\n        /* 122 */ /***/ function(module1, exports1, __nested_webpack_require_406274__) {\n            var nativeCreate = __nested_webpack_require_406274__(16);\n            /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function hashGet(key) {\n                var data = this.__data__;\n                if (nativeCreate) {\n                    var result = data[key];\n                    return result === HASH_UNDEFINED ? undefined : result;\n                }\n                return hasOwnProperty.call(data, key) ? data[key] : undefined;\n            }\n            module1.exports = hashGet;\n        /***/ },\n        /* 123 */ /***/ function(module1, exports1, __nested_webpack_require_407303__) {\n            var nativeCreate = __nested_webpack_require_407303__(16);\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function hashHas(key) {\n                var data = this.__data__;\n                return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n            }\n            module1.exports = hashHas;\n        /***/ },\n        /* 124 */ /***/ function(module1, exports1, __nested_webpack_require_408113__) {\n            var nativeCreate = __nested_webpack_require_408113__(16);\n            /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n            /**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function hashSet(key, value) {\n                var data = this.__data__;\n                this.size += this.has(key) ? 0 : 1;\n                data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n                return this;\n            }\n            module1.exports = hashSet;\n        /***/ },\n        /* 125 */ /***/ function(module1, exports1, __nested_webpack_require_408912__) {\n            var baseCreate = __nested_webpack_require_408912__(89), getPrototype = __nested_webpack_require_408912__(39), isPrototype = __nested_webpack_require_408912__(40);\n            /**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */ function initCloneObject(object) {\n                return typeof object.constructor == \"function\" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n            }\n            module1.exports = initCloneObject;\n        /***/ },\n        /* 126 */ /***/ function(module1, exports1, __nested_webpack_require_409527__) {\n            var Symbol1 = __nested_webpack_require_409527__(11), isArguments = __nested_webpack_require_409527__(18), isArray = __nested_webpack_require_409527__(2);\n            /** Built-in value references. */ var spreadableSymbol = Symbol1 ? Symbol1.isConcatSpreadable : undefined;\n            /**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */ function isFlattenable(value) {\n                return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n            }\n            module1.exports = isFlattenable;\n        /***/ },\n        /* 127 */ /***/ function(module1, exports1, __nested_webpack_require_410294__) {\n            var eq = __nested_webpack_require_410294__(17), isArrayLike = __nested_webpack_require_410294__(24), isIndex = __nested_webpack_require_410294__(15), isObject = __nested_webpack_require_410294__(0);\n            /**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */ function isIterateeCall(value, index, object) {\n                if (!isObject(object)) {\n                    return false;\n                }\n                var type = typeof index;\n                if (type == \"number\" ? isArrayLike(object) && isIndex(index, object.length) : type == \"string\" && index in object) {\n                    return eq(object[index], value);\n                }\n                return false;\n            }\n            module1.exports = isIterateeCall;\n        /***/ },\n        /* 128 */ /***/ function(module1, exports1, __nested_webpack_require_411397__) {\n            var isArray = __nested_webpack_require_411397__(2), isSymbol = __nested_webpack_require_411397__(27);\n            /** Used to match property names within property paths. */ var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, reIsPlainProp = /^\\w*$/;\n            /**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */ function isKey(value, object) {\n                if (isArray(value)) {\n                    return false;\n                }\n                var type = typeof value;\n                if (type == \"number\" || type == \"symbol\" || type == \"boolean\" || value == null || isSymbol(value)) {\n                    return true;\n                }\n                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n            }\n            module1.exports = isKey;\n        /***/ },\n        /* 129 */ /***/ function(module1, exports1) {\n            /**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ function isKeyable(value) {\n                var type = typeof value;\n                return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n            }\n            module1.exports = isKeyable;\n        /***/ },\n        /* 130 */ /***/ function(module1, exports1, __nested_webpack_require_413078__) {\n            var coreJsData = __nested_webpack_require_413078__(113);\n            /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n                return uid ? \"Symbol(src)_1.\" + uid : \"\";\n            }();\n            /**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function isMasked(func) {\n                return !!maskSrcKey && maskSrcKey in func;\n            }\n            module1.exports = isMasked;\n        /***/ },\n        /* 131 */ /***/ function(module1, exports1) {\n            /**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ function listCacheClear() {\n                this.__data__ = [];\n                this.size = 0;\n            }\n            module1.exports = listCacheClear;\n        /***/ },\n        /* 132 */ /***/ function(module1, exports1, __nested_webpack_require_414193__) {\n            var assocIndexOf = __nested_webpack_require_414193__(12);\n            /** Used for built-in method references. */ var arrayProto = Array.prototype;\n            /** Built-in value references. */ var splice = arrayProto.splice;\n            /**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function listCacheDelete(key) {\n                var data = this.__data__, index = assocIndexOf(data, key);\n                if (index < 0) {\n                    return false;\n                }\n                var lastIndex = data.length - 1;\n                if (index == lastIndex) {\n                    data.pop();\n                } else {\n                    splice.call(data, index, 1);\n                }\n                --this.size;\n                return true;\n            }\n            module1.exports = listCacheDelete;\n        /***/ },\n        /* 133 */ /***/ function(module1, exports1, __nested_webpack_require_415293__) {\n            var assocIndexOf = __nested_webpack_require_415293__(12);\n            /**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function listCacheGet(key) {\n                var data = this.__data__, index = assocIndexOf(data, key);\n                return index < 0 ? undefined : data[index][1];\n            }\n            module1.exports = listCacheGet;\n        /***/ },\n        /* 134 */ /***/ function(module1, exports1, __nested_webpack_require_415870__) {\n            var assocIndexOf = __nested_webpack_require_415870__(12);\n            /**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function listCacheHas(key) {\n                return assocIndexOf(this.__data__, key) > -1;\n            }\n            module1.exports = listCacheHas;\n        /***/ },\n        /* 135 */ /***/ function(module1, exports1, __nested_webpack_require_416423__) {\n            var assocIndexOf = __nested_webpack_require_416423__(12);\n            /**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function listCacheSet(key, value) {\n                var data = this.__data__, index = assocIndexOf(data, key);\n                if (index < 0) {\n                    ++this.size;\n                    data.push([\n                        key,\n                        value\n                    ]);\n                } else {\n                    data[index][1] = value;\n                }\n                return this;\n            }\n            module1.exports = listCacheSet;\n        /***/ },\n        /* 136 */ /***/ function(module1, exports1, __nested_webpack_require_417293__) {\n            var Hash = __nested_webpack_require_417293__(82), ListCache = __nested_webpack_require_417293__(10), Map = __nested_webpack_require_417293__(33);\n            /**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function mapCacheClear() {\n                this.size = 0;\n                this.__data__ = {\n                    \"hash\": new Hash,\n                    \"map\": new (Map || ListCache),\n                    \"string\": new Hash\n                };\n            }\n            module1.exports = mapCacheClear;\n        /***/ },\n        /* 137 */ /***/ function(module1, exports1, __nested_webpack_require_417918__) {\n            var getMapData = __nested_webpack_require_417918__(14);\n            /**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function mapCacheDelete(key) {\n                var result = getMapData(this, key)[\"delete\"](key);\n                this.size -= result ? 1 : 0;\n                return result;\n            }\n            module1.exports = mapCacheDelete;\n        /***/ },\n        /* 138 */ /***/ function(module1, exports1, __nested_webpack_require_418548__) {\n            var getMapData = __nested_webpack_require_418548__(14);\n            /**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function mapCacheGet(key) {\n                return getMapData(this, key).get(key);\n            }\n            module1.exports = mapCacheGet;\n        /***/ },\n        /* 139 */ /***/ function(module1, exports1, __nested_webpack_require_419030__) {\n            var getMapData = __nested_webpack_require_419030__(14);\n            /**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function mapCacheHas(key) {\n                return getMapData(this, key).has(key);\n            }\n            module1.exports = mapCacheHas;\n        /***/ },\n        /* 140 */ /***/ function(module1, exports1, __nested_webpack_require_419564__) {\n            var getMapData = __nested_webpack_require_419564__(14);\n            /**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function mapCacheSet(key, value) {\n                var data = getMapData(this, key), size = data.size;\n                data.set(key, value);\n                this.size += data.size == size ? 0 : 1;\n                return this;\n            }\n            module1.exports = mapCacheSet;\n        /***/ },\n        /* 141 */ /***/ function(module1, exports1, __nested_webpack_require_420240__) {\n            var memoize = __nested_webpack_require_420240__(159);\n            /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;\n            /**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */ function memoizeCapped(func) {\n                var result = memoize(func, function(key) {\n                    if (cache.size === MAX_MEMOIZE_SIZE) {\n                        cache.clear();\n                    }\n                    return key;\n                });\n                var cache = result.cache;\n                return result;\n            }\n            module1.exports = memoizeCapped;\n        /***/ },\n        /* 142 */ /***/ function(module1, exports1) {\n            /**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function nativeKeysIn(object) {\n                var result = [];\n                if (object != null) {\n                    for(var key in Object(object)){\n                        result.push(key);\n                    }\n                }\n                return result;\n            }\n            module1.exports = nativeKeysIn;\n        /***/ },\n        /* 143 */ /***/ function(module1, exports1, __nested_webpack_require_421849__) {\n            /* WEBPACK VAR INJECTION */ (function(module1) {\n                var freeGlobal = __nested_webpack_require_421849__(38);\n                /** Detect free variable `exports`. */ var freeExports = typeof exports1 == \"object\" && exports1 && !exports1.nodeType && exports1;\n                /** Detect free variable `module`. */ var freeModule = freeExports && typeof module1 == \"object\" && module1 && !module1.nodeType && module1;\n                /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n                /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;\n                /** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n                    try {\n                        return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n                    } catch (e) {}\n                }();\n                module1.exports = nodeUtil;\n            /* WEBPACK VAR INJECTION */ }).call(exports1, __nested_webpack_require_421849__(29)(module1));\n        /***/ },\n        /* 144 */ /***/ function(module1, exports1) {\n            /** Used for built-in method references. */ var objectProto = Object.prototype;\n            /**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n            /**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString(value) {\n                return nativeObjectToString.call(value);\n            }\n            module1.exports = objectToString;\n        /***/ },\n        /* 145 */ /***/ function(module1, exports1) {\n            /**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */ function overArg(func, transform) {\n                return function(arg) {\n                    return func(transform(arg));\n                };\n            }\n            module1.exports = overArg;\n        /***/ },\n        /* 146 */ /***/ function(module1, exports1) {\n            /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;\n            /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeNow = Date.now;\n            /**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */ function shortOut(func) {\n                var count = 0, lastCalled = 0;\n                return function() {\n                    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);\n                    lastCalled = stamp;\n                    if (remaining > 0) {\n                        if (++count >= HOT_COUNT) {\n                            return arguments[0];\n                        }\n                    } else {\n                        count = 0;\n                    }\n                    return func.apply(undefined, arguments);\n                };\n            }\n            module1.exports = shortOut;\n        /***/ },\n        /* 147 */ /***/ function(module1, exports1, __nested_webpack_require_425547__) {\n            var ListCache = __nested_webpack_require_425547__(10);\n            /**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */ function stackClear() {\n                this.__data__ = new ListCache;\n                this.size = 0;\n            }\n            module1.exports = stackClear;\n        /***/ },\n        /* 148 */ /***/ function(module1, exports1) {\n            /**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function stackDelete(key) {\n                var data = this.__data__, result = data[\"delete\"](key);\n                this.size = data.size;\n                return result;\n            }\n            module1.exports = stackDelete;\n        /***/ },\n        /* 149 */ /***/ function(module1, exports1) {\n            /**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function stackGet(key) {\n                return this.__data__.get(key);\n            }\n            module1.exports = stackGet;\n        /***/ },\n        /* 150 */ /***/ function(module1, exports1) {\n            /**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function stackHas(key) {\n                return this.__data__.has(key);\n            }\n            module1.exports = stackHas;\n        /***/ },\n        /* 151 */ /***/ function(module1, exports1, __nested_webpack_require_427351__) {\n            var ListCache = __nested_webpack_require_427351__(10), Map = __nested_webpack_require_427351__(33), MapCache = __nested_webpack_require_427351__(34);\n            /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;\n            /**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */ function stackSet(key, value) {\n                var data = this.__data__;\n                if (data instanceof ListCache) {\n                    var pairs = data.__data__;\n                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n                        pairs.push([\n                            key,\n                            value\n                        ]);\n                        this.size = ++data.size;\n                        return this;\n                    }\n                    data = this.__data__ = new MapCache(pairs);\n                }\n                data.set(key, value);\n                this.size = data.size;\n                return this;\n            }\n            module1.exports = stackSet;\n        /***/ },\n        /* 152 */ /***/ function(module1, exports1, __nested_webpack_require_428635__) {\n            var memoizeCapped = __nested_webpack_require_428635__(141);\n            /** Used to match property names within property paths. */ var reLeadingDot = /^\\./, rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n            /** Used to match backslashes in property paths. */ var reEscapeChar = /\\\\(\\\\)?/g;\n            /**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */ var stringToPath = memoizeCapped(function(string) {\n                var result = [];\n                if (reLeadingDot.test(string)) {\n                    result.push(\"\");\n                }\n                string.replace(rePropName, function(match, number, quote, string) {\n                    result.push(quote ? string.replace(reEscapeChar, \"$1\") : number || match);\n                });\n                return result;\n            });\n            module1.exports = stringToPath;\n        /***/ },\n        /* 153 */ /***/ function(module1, exports1) {\n            /** Used for built-in method references. */ var funcProto = Function.prototype;\n            /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n            /**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function toSource(func) {\n                if (func != null) {\n                    try {\n                        return funcToString.call(func);\n                    } catch (e) {}\n                    try {\n                        return func + \"\";\n                    } catch (e) {}\n                }\n                return \"\";\n            }\n            module1.exports = toSource;\n        /***/ },\n        /* 154 */ /***/ function(module1, exports1) {\n            /**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */ function constant(value) {\n                return function() {\n                    return value;\n                };\n            }\n            module1.exports = constant;\n        /***/ },\n        /* 155 */ /***/ function(module1, exports1, __nested_webpack_require_431257__) {\n            var baseFlatten = __nested_webpack_require_431257__(90);\n            /**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */ function flatten(array) {\n                var length = array == null ? 0 : array.length;\n                return length ? baseFlatten(array, 1) : [];\n            }\n            module1.exports = flatten;\n        /***/ },\n        /* 156 */ /***/ function(module1, exports1, __nested_webpack_require_431911__) {\n            var baseHasIn = __nested_webpack_require_431911__(93), hasPath = __nested_webpack_require_431911__(119);\n            /**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */ function hasIn(object, path) {\n                return object != null && hasPath(object, path, baseHasIn);\n            }\n            module1.exports = hasIn;\n        /***/ },\n        /* 157 */ /***/ function(module1, exports1, __nested_webpack_require_432816__) {\n            var isArrayLike = __nested_webpack_require_432816__(24), isObjectLike = __nested_webpack_require_432816__(6);\n            /**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */ function isArrayLikeObject(value) {\n                return isObjectLike(value) && isArrayLike(value);\n            }\n            module1.exports = isArrayLikeObject;\n        /***/ },\n        /* 158 */ /***/ function(module1, exports1, __nested_webpack_require_433703__) {\n            var baseGetTag = __nested_webpack_require_433703__(8), getPrototype = __nested_webpack_require_433703__(39), isObjectLike = __nested_webpack_require_433703__(6);\n            /** `Object#toString` result references. */ var objectTag = \"[object Object]\";\n            /** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;\n            /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);\n            /**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */ function isPlainObject(value) {\n                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n                    return false;\n                }\n                var proto = getPrototype(value);\n                if (proto === null) {\n                    return true;\n                }\n                var Ctor = hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n                return typeof Ctor == \"function\" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n            }\n            module1.exports = isPlainObject;\n        /***/ },\n        /* 159 */ /***/ function(module1, exports1, __nested_webpack_require_435653__) {\n            var MapCache = __nested_webpack_require_435653__(34);\n            /** Error message constants. */ var FUNC_ERROR_TEXT = \"Expected a function\";\n            /**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */ function memoize(func, resolver) {\n                if (typeof func != \"function\" || resolver != null && typeof resolver != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                var memoized = function() {\n                    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;\n                    if (cache.has(key)) {\n                        return cache.get(key);\n                    }\n                    var result = func.apply(this, args);\n                    memoized.cache = cache.set(key, result) || cache;\n                    return result;\n                };\n                memoized.cache = new (memoize.Cache || MapCache);\n                return memoized;\n            }\n            // Expose `MapCache`.\n            memoize.Cache = MapCache;\n            module1.exports = memoize;\n        /***/ },\n        /* 160 */ /***/ function(module1, exports1, __nested_webpack_require_438246__) {\n            var basePick = __nested_webpack_require_438246__(100), flatRest = __nested_webpack_require_438246__(116);\n            /**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */ var pick = flatRest(function(object, paths) {\n                return object == null ? {} : basePick(object, paths);\n            });\n            module1.exports = pick;\n        /***/ },\n        /* 161 */ /***/ function(module1, exports1) {\n            /**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */ function stubFalse() {\n                return false;\n            }\n            module1.exports = stubFalse;\n        /***/ },\n        /* 162 */ /***/ function(module1, exports1, __nested_webpack_require_439429__) {\n            var copyObject = __nested_webpack_require_439429__(112), keysIn = __nested_webpack_require_439429__(46);\n            /**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */ function toPlainObject(value) {\n                return copyObject(value, keysIn(value));\n            }\n            module1.exports = toPlainObject;\n        /***/ },\n        /* 163 */ /***/ function(module1, exports1, __nested_webpack_require_440326__) {\n            var baseToString = __nested_webpack_require_440326__(106);\n            /**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */ function toString(value) {\n                return value == null ? \"\" : baseToString(value);\n            }\n            module1.exports = toString;\n        /***/ },\n        /* 164 */ /***/ function(module1, exports1) {\n            module1.exports = __WEBPACK_EXTERNAL_MODULE_164__;\n        /***/ },\n        /* 165 */ /***/ function(module1, exports1) {\n            module1.exports = __WEBPACK_EXTERNAL_MODULE_165__;\n        /***/ },\n        /* 166 */ /***/ function(module1, exports1) {\n            module1.exports = __WEBPACK_EXTERNAL_MODULE_166__;\n        /***/ },\n        /* 167 */ /***/ function(module1, exports1, __nested_webpack_require_441459__) {\n            module1.exports = __nested_webpack_require_441459__(48);\n        /***/ }\n    ]);\n}); //# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/quagga/lib/quagga.js\n");

/***/ })

};
;